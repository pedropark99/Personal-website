<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>home |&gt; dplyr::glimpse()</title>
<link>https://pedro-faria.netlify.app/</link>
<atom:link href="https://pedro-faria.netlify.app/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog about programming and data analysis, specially with R and Python</description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Mon, 19 Feb 2024 03:00:00 GMT</lastBuildDate>
<item>
  <title>Producing evenly-spaced and non-overlapping curves with Jobard-Lefer Algorithm in C</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>I’m currently writing a book about R and Graphics (stay tuned for more news about this book soon 😉). During my research for this book, I had to study a relatively famous and established algorithm, called as the Jobard-Lefer algorithm. It is an algorithm for producing evenly spaced curves in a flow field (or a vector field). This algorithm is thoroughly described in a scientific paper <span class="citation" data-cites="jobard97">(Jobard and Lefer 1997)</span>.</p>
<p>In this article, I want to describe how you can implement this algorithm in C. These are the topics we are going to discuss:</p>
<ul>
<li>What are flow fields (or vector fields)?</li>
<li>How to draw curves in a flow field?</li>
<li>What the algorithm does?</li>
<li>How does it work?</li>
<li>How to implement it in C?</li>
</ul>
</section>
<section id="what-are-flow-fields-or-vector-fields" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> What are flow fields (or vector fields)?</h1>
<p>A flow field (which is also called a vector field in some ocasions) is essentially a field (or a two-dimensional grid) of angles. Figure&nbsp;1 shows an example of a flow field:</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-flow-field1" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-flow-field1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/en/index_files/figure-html/fig-flow-field1-1.png" class="img-fluid figure-img" width="1400">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-flow-field1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: An example of flow field
</figcaption>
</figure>
</div>
</div>
</div>
<p>In more details, a flow field is usually represented as a 2D (two-dimensional) grid, or a 2D matrix of angle values. So each element in this matrix is a real number, and this real number is interpretd as an angle value (in the radians scale). This 2D matrix of angle values is usually produced by a Perlin Noise algorithm <span class="citation" data-cites="perlin">(Wikipedia 2024a)</span>, or a similar algorithm, like the Simplex Noise algorithm <span class="citation" data-cites="simplex">(Wikipedia 2024b)</span>.</p>
<p>In other words, the numbers in the 2D matrix are normally random numbers. But you cannot use any random number generator to produce them. You must use a 2D (or two-dimensional) noise algorithm to produce these random numbers.</p>
<p>Just to give you a very brief example, you can build a flow field in C, by using the <a href="https://github.com/Auburn/FastNoiseLite"><code>FastNoiseLite</code> library</a>. In this library, you have multiple algorithms you can use for producing two-dimensional noise.</p>
<p>Despite the many options, I will use as an example in this article, the classic Perlin Noise algorithm for producing the flow field. You can see in the snippet below that I am building a flow field with 120 of width and height. In other words, we have a 120x120 grid of angle values.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;math.h&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FNL_IMPL</span></span>
<span id="cb1-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"FastNoiseLite.h"</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FLOW_FIELD_WIDTH </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb1-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FLOW_FIELD_HEIGHT </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> flow_field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>FLOW_FIELD_WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>FLOW_FIELD_HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create and configure noise state</span></span>
<span id="cb1-13">    fnl_state noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fnlCreateState<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-14">    noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">    noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>noise_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FNL_NOISE_PERLIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> FLOW_FIELD_HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> FLOW_FIELD_WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Scale each value to the radians scale by</span></span>
<span id="cb1-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// multiplying each value by 2PI.</span></span>
<span id="cb1-21">            flow_field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fnlGetNoise2D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> M_PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="sec-draw-curve" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> How to draw curves in a flow field?</h1>
<p>Flow fields have multiple applications in computer graphics. For example, you can use them to draw interesting (or “very pleasing looking”) curves.</p>
<p>The basic idea is to draw a curve by walking across the flow field. First, we choose a point in the flow field as our starting point, and then, we start to walking by following the direction of the angles we encounter in the flow field. As we walk trough the flow field, we record the x and y coordinates of our positions. When we finish walking, we can draw a curve by “connecting the dots”, i.e.&nbsp;connecting the points (x and y coordinates) that we passed through.</p>
<p>So, in essence, the steps for drawing a curve in a flow field are:</p>
<ol type="1">
<li>Choose a starting point in the grid.</li>
<li>Look at the angle that is stored in the position of the grid that you are currently in.</li>
<li>Take a step in the direction of that angle.</li>
<li>Recalculate your current position in the grid, and record/store this position for later use.</li>
<li>Comeback to step 2.</li>
</ol>
<p>You can see in the bullet points above that, we begin a loop at step 5. We are repeatedly taking a step in the direction of an angle, recalculating our current position in the flow field, and taking another step in the direction of another angle. As long as we stay inside the boundaries of the flow field, we can repeat this pattern as much as we want to.</p>
<p>The Figure&nbsp;2 below shows the end result of this process. In this example, we begin in coordinate <img src="https://latex.codecogs.com/png.latex?(5,%2010)">, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?x%20=%205"> and <img src="https://latex.codecogs.com/png.latex?y%20=%2010">, in the field, and take 45 sequential steps in the field by following the direction of the angles we encounter in the way. The curve painted in red shows the end result of this “walking process”.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-flow-field2" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-flow-field2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/en/index_files/figure-html/fig-flow-field2-1.png" class="img-fluid figure-img" width="1400">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-flow-field2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Drawing a curve in the flow field
</figcaption>
</figure>
</div>
</div>
</div>
<p>As you walk trough the flow field, the angle that you currently using might lead you to a position that is off the boundaries of the flow field. In that case, you should stop walking, before you go off the flow field. Because if you pass the boundaries of the flow field, then, the lookup process we perform to take an angle in the flow field, will fail.</p>
<p>Two important variables need to be defined to draw your curve:</p>
<ul>
<li>The number of steps you want to take.</li>
<li>The distance of each step (or “step length”).</li>
</ul>
<p>First is the number of steps you want to take in your walk. You can definetly set this to infinity, so you walk indefinitely until you hit one of the boundaries of the flow field. But you normally do not want to walk indefinitely. Because this usually produces a very long curve that goes across the entire flow field.</p>
<p>Yes! You might want to draw a very long curve. As you probably notice, this is very subjective to each person and their objective. But for the most part, you usually do not have to set this number of steps too much high. Around 30-40 steps is a good range for those who doesn’t know what they want.</p>
<p>Therefore, the number of steps directly affects the length of the curve that you are drawing. If you take a high number for steps , the curve will be longer. In contrast, if you take just few steps, your curve will be shorter.</p>
<p>Second is the distance you will take in each step (let’s call it as the “step length”). The step length affects how “sharp” the curve looks. If you set the step length correctly, the curve will look nice, very “curvy”. In other words, the curve will look like an actual curve. But if you set the step length too high, then, the “connect the dots” effects will be much more appearant. In other words, your curve will not look like a curve, and more like an attempt to draw a polygon with very sharp edges.</p>
<p>But be careful to also not set the step length too low. If you set it very very low, then, you will end up affecting the length of the curve as well. Because the step length is soo low, that even if you set the number of steps very high, you still get a very short curve as a result. This is bad because you will be tempted to raise the number of steps even higher, and by setting the number of steps too high, you end up increasing the overhead and computing time of the algorithm.</p>
<p>I mean, increasing the number of steps from 10 to 1000 for drawing a single curve into the field is fine. But when you raise the number of steps to 1000 when you are drawing like 10000 curves into field, then you will notice the overhead very quickly. So, if you want your algorithm to perform well, and still get nice and visually attractive curves in the output, you usually want to set the step length to a number that is in the range from 0.1% to 1% of the flow field width.</p>
<p>The C code snippet below translates the steps I described at Section&nbsp;3 to draw a curve into the field. You can see in this code that our current position in the Cartesian plane is mapped to a specific position in the flow field, or, in other words, to a position in the 2D matrix of angles, by transforming our current x and y positions into integers.</p>
<p>So for example, if our current position in the Cartesian plane is <img src="https://latex.codecogs.com/png.latex?x%20=%2045.289"> and <img src="https://latex.codecogs.com/png.latex?y%20=%2021.556">, then, our current position in the flow field is <img src="https://latex.codecogs.com/png.latex?x%20=%2045"> and <img src="https://latex.codecogs.com/png.latex?y%20=%2021">. So, the current angle that we need to retrieve and use from the flow field, is the angle that is stored in the element <code>angles[45][21]</code> of the matrix.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define N_STEPS </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define STEP_LENGTH </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> FLOW_FIELD_WIDTH</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> off_boundaries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb2-6">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb2-7">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb2-8">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb2-9">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> limit</span>
<span id="cb2-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x_coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>N_STEPS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> y_coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>N_STEPS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> N_STEPS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ff_column_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ff_row_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-19"></span>
<span id="cb2-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>off_boundaries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ff_column_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ff_row_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> FLOW_FIELD_WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-22">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-23"></span>
<span id="cb2-24">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flow_field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ff_row_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>ff_column_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-25">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> STEP_LENGTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-26">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> y_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> STEP_LENGTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-27">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-28">  y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-29"></span>
<span id="cb2-30">  x_coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-31">  y_coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Furthermore, this C code uses a pair of equations from geometry (Equation&nbsp;1 and Equation&nbsp;2) to calculate the new x and y coordinates after I take the step by following the direction of the current angle. These equations are normally used to calculate the coordinates in the circumference of a circle centered at the origin point of the Cartesian plane, and they are exposed below.</p>
<p>Given that a circle that is centered at the origin point of the Cartesian plane, and that <img src="https://latex.codecogs.com/png.latex?r"> is the radius of the circle, and that <img src="https://latex.codecogs.com/png.latex?A"> is the angle, in radians, that identifies the position in the circumference that you are trying to calculate it’s coordinates, you can calculate the x (<img src="https://latex.codecogs.com/png.latex?x'">) and y (<img src="https://latex.codecogs.com/png.latex?y'">) coordinates of the corresponding position in the circumference by using the following pair of equations:</p>
<p><span id="eq-rotation1"><img src="https://latex.codecogs.com/png.latex?%0Ax'=r%5Ctimes%20%5Ccos(A)%0A%5Ctag%7B1%7D"></span></p>
<p><span id="eq-rotation2"><img src="https://latex.codecogs.com/png.latex?%0Ay'=r%5Ctimes%20%5Csin(A)%0A%5Ctag%7B2%7D"></span></p>
</section>
<section id="the-jobard-lefer-algorithm" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> The Jobard-Lefer algorithm</h1>
<p>When you start to draw multiple curves in the flow field, without caring where these curves are placed and where they go, eventually, you will end up with a very dense image, with many curves overlapping each other. Some people are intentionally trying to produce such dense images, because they want the interesting depth effect that these images normally have around the curves.</p>
<p>But sometimes, you are really trying to avoid that. Sometimes, you want to meet all of these criterias below at the same time:</p>
<ul>
<li>draw a high number of curves (i.e.&nbsp;a number that is high enough to “fill” the image) in the field.</li>
<li>draw only non-overlapping curves.</li>
<li>draw curves that are “evenly-spaced” between each other.</li>
</ul>
<p><span class="citation" data-cites="jobard97">Jobard and Lefer (1997)</span> proposes an algorithm that produces non-overlapping and evenly-spaced curves around a flow field. If you read the paper carefully, you might notice that you can divide the algorithm into two separate parts. And splitting this algorithm like this, into two separate parts, will be very useful here in this article for explaining how each piece of the algorithm works.</p>
<p>These parts are:</p>
<ul>
<li>An algorithm to draw non-overlapping curves.</li>
<li>An algorithm to select new start points for new curves.</li>
</ul>
<p>Since each part have it’s own quirks, I begin by focusing on the first part of the algorithm. After explaining how this first part works, it will be a little easier for you to understand how the second part works.</p>
<section id="drawing-non-overlapping-curves" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="drawing-non-overlapping-curves"><span class="header-section-number">4.1</span> Drawing non-overlapping curves</h2>
<p>This first part of the algorithm is the part that makes sure that only non-overlapping curves are drawn to the field. The idea behind it, is that we are constantly checking the distances between our next position and the other curves around us. We want to always make sure that the current curve is far enough from the other curves, and, if not, stop drawing this curve.</p>
<p>This specific part of the algorithm works around a constant value, that represents the minimum distance allowed between two curves. <span class="citation" data-cites="jobard97">Jobard and Lefer (1997)</span> call this value as <img src="https://latex.codecogs.com/png.latex?d_%7Bsep%7D">, or, as the “separating distance”. The end result of the algorithm is that any point in any curve in the field is, at least, at a distance of <img src="https://latex.codecogs.com/png.latex?d_%7Bsep%7D"> units from any other point from another curve in the field.</p>
<p>If you use this part of the algorithm, you normally produce some very nice and “pleasing to the eyes” type of images. At Figure&nbsp;3, I am showing the difference that this part of the algorithm makes to the image. In both subfigures, we used the same colors for each curve, the same starting points for each curve, the same step length, the same number of steps, same flow field, etc. Anymway, all the configs used in both images are literally the same. The only difference between these two images, is the use (or not) of this “non-overlaping” curve algorithm.</p>
<p>In the first image (without the Jobard-Lefer algorithm) I simply drawn the curves using the steps I described at Section&nbsp;3, without caring if the curves were overlapping (or, if they were too close to) each other. In contrast, in the second image, I used the first part of the Jobard-Lefer algorithm to draw the curves while checking if they were overlapping (or, if they were too close to) each other.</p>
<div id="fig-diff-algorithm" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-diff-algorithm-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-diff-algorithm" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-diff-overlap" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-diff-overlap-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/overlap.png" class="img-fluid figure-img" data-ref-parent="fig-diff-algorithm">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-diff-overlap-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Without Jobard-Lefer algorithm
</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-diff-algorithm" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-diff-non-overlap" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-diff-non-overlap-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/non_overlap.png" class="img-fluid figure-img" data-ref-parent="fig-diff-algorithm">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-diff-non-overlap-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) With Jobard-Lefer algorithm
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-diff-algorithm-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Demonstrating the effect of the Jobard-Lefer algorithm on curves drawn in the field
</figcaption>
</figure>
</div>
<section id="how-this-part-of-the-algorithm-works" class="level3" data-number="4.1.1">
<h3 data-number="4.1.1" class="anchored" data-anchor-id="how-this-part-of-the-algorithm-works"><span class="header-section-number">4.1.1</span> How this part of the algorithm works?</h3>
<p>In essence, at each step we take drawing our curve in the flow field, we look at the curves that are around us, and we compare the distance between our current position and all of these neighboring curves. If this distance between the next step we take and any of the neighboring curves, is lower or equal to a specific value ()</p>
<p>, then, we do not take this next step, and we stop drawing the current curve. At this point, if we have a next curve to draw, then, we start to this next curve in the field, and restart this process of checking if the distance of this next step we take and the neighboring curves will be less or equal to the “separating distance”.</p>



</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-jobard97" class="csl-entry">
Jobard, Bruno, and Wilfrid Lefer. 1997. <span>“Creating Evenly-Spaced Streamlines of Arbitrary Density.”</span> In <em>Visualization in Scientific Computing ’97</em>, edited by Wilfrid Lefer and Michel Grave, 43–55. Vienna: Springer Vienna.
</div>
<div id="ref-perlin" class="csl-entry">
Wikipedia. 2024a. <span>“Perlin Noise.”</span> <a href="https://en.wikipedia.org/wiki/Perlin_noise">https://en.wikipedia.org/wiki/Perlin_noise</a>.
</div>
<div id="ref-simplex" class="csl-entry">
———. 2024b. <span>“Simplex Noise.”</span> <a href="https://en.wikipedia.org/wiki/Simplex_noise">https://en.wikipedia.org/wiki/Simplex_noise</a>.
</div>
</div></section></div> ]]></description>
  <category>Flow Fields</category>
  <category>C</category>
  <category>Algorithm</category>
  <category>Computer Graphcis</category>
  <guid>https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/en/</guid>
  <pubDate>Mon, 19 Feb 2024 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/flow_field.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Have you ever SSH before?</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2024/2024-01-22-did-you-ever-ssh/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>SSH stands for <em>Secure Socket Shell</em>, and it is probably the most used protocol today to establish a secure connection between two computers.</p>
<p>In this article, I want to explain how can access a remote computer through a SSH connection.</p>
</section>
<section id="ssh-client-vs-ssh-server" class="level1">
<h1>SSH Client vs SSH Server</h1>
<p>Two computers are involved when you are trying to perform a SSH connection. One computer is your personal desktop/laptop, this is the computer you are using to perform the connection. This computer, is commonly reffered to as the SSH Client.</p>
<p>The other computer, is the remote machine, and it is commonly reffered as the SSH Server. This SSH Server is the computer that you are trying to connect to, while the machine you are using to perform the connection, is the SSH Client.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2024/2024-01-22-did-you-ever-ssh/ssh-client-server.png" class="img-fluid figure-img"></p>
<figcaption>The SSH Client vs SSH Server relationship</figcaption>
</figure>
</div>
<p>On this experiment that I’m sharing here, I used my Ubuntu (Linux) machine as the SSH Server, because most servers these days uses Linux distributions as their operational systems, such as Ubuntu, Debian and Alpine.</p>
<p>In the other hand, my SSH Client here in this example is my Windows machine, or, to be more specific, I’m using my WSL (<em>Windows Subsystem for Linux</em>) with Ubuntu to perform the connection.</p>
<p>So essentially, in this experiment, both sides of this relationship (the SSH Server and the SSH Client) are using Ubuntu distros as they operational system.</p>
</section>
<section id="requirements" class="level1">
<h1>Requirements</h1>
<p>What you must have to login into a remote computer using SSH? Well… you need the following things to establish a SSH connection between two computers:</p>
<ul>
<li>Both computers (SSH Client and Server) must be on and connected to the internet.</li>
<li>The SSH Client needs to have “OpenSSH” installed.</li>
<li>The SSH Server needs to have “OpenSSH Server” installed (which is also commonly reffered as the <code>sshd</code> program<sup>1</sup>).</li>
<li>In order to connect into the SSH Server, this Server needs to have the <code>sshd</code> program working and running, so that it waits for incoming connections.</li>
<li>You need to know the IP address (search specifically, for the public IPv4 address) of the SSH Server.</li>
<li>You need to know which username you want to use when you login into the SSH Server, and also, which is the password of this username.</li>
</ul>
<p>One thing is optional:</p>
<ul>
<li>If you want to establish a password-less connection, then, you need to generate a SSH Key Pair, by using the <code>ssh-keygen</code> command <sup>2</sup>.</li>
</ul>
</section>
<section id="find-the-ip-address-of-your-server" class="level1">
<h1>Find the IP Address of your Server</h1>
<p>The IP address of the remote computer (i.e.&nbsp;the SSH Server) you are trying to connect to is a crucial information, because SSH will use this information to find the actual computer. Without this information, SSH cannot locate where this computer is.</p>
<section id="ipv4-vs-ipv6" class="level2">
<h2 class="anchored" data-anchor-id="ipv4-vs-ipv6">IPv4 vs IPv6</h2>
<p>There are two styles (or models) of IP addresses, IPv4 and IPv6. The IPv4 model is the one that you are looking for! So search for an IP address that have the IPv4 format, which are 4 numbers separated by dots. Examples: <code>127.0.0.1</code> (also known as the IP address for <em>localhost</em>) and <code>172.16.254.1</code>.</p>
</section>
<section id="private-vs-public-ip-address" class="level2">
<h2 class="anchored" data-anchor-id="private-vs-public-ip-address">Private vs public IP address</h2>
<p>There is also the distinction between <em>private</em> and <em>public</em> IP addresses that you need to be aware of. Some IP addresses are <em>private</em> in the meaning that they can only be acessed from a very specific location, which is your local network. That is, private IP addresses are visible only within the same WiFi/Ethernet you are connected in.</p>
<p>In other words, if you are like in Italy for example, and you are trying to access a server that is in France, using the <em>private</em> IP address of that server, then, you will never succeed, it is impossible. Because a <em>private</em> IP address is only accesible if you were connected to the same WiFi/Ethernet that the server is. So you would need to be in the same phisical location of the server in France, and connected to the same network (WiFi/Ethernet) as the server to access it using it’s <em>private</em> IP address.</p>
<p>All of this means that, if you are trying to connect to a remote computer that is far away from you, then you certainly need the <strong>public</strong> IP address of this computer, not the private one. So you should always look for the <strong>public</strong> IP address of the computer you are trying to login in.</p>
</section>
<section id="where-to-find-it" class="level2">
<h2 class="anchored" data-anchor-id="where-to-find-it">Where to find it?</h2>
<p>If, and only if, your SSH Server is actually a Windows machine (which is not commom for servers in general), then, you could open the Windows Settings Menu, and look for the section Network &amp; internet, and look for the “Properties” window of the WiFi/Ethernet that your server is connected to.</p>
<p>In the print below, I used my Windows machine as an example, and I covered the sensible information with a red rectangle. But the IPv4 address can be found where I am pointing with the blue arrow (sorry, my Windows machine is in Portuguese):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2024/2024-01-22-did-you-ever-ssh/windows-ip.png" class="img-fluid figure-img"></p>
<figcaption>Looking the IP Address in Windows</figcaption>
</figure>
</div>
<p>But in contrast, if your server is a Linux machine, then, you can open a terminal, and run the command <code>ifconfig</code>, then look for the IPv4 address that will appear after the <code>inet</code> word.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ifconfig</span></span></code></pre></div>
</section>
<section id="the-ip-address-of-my-ubuntu-ssh-server" class="level2">
<h2 class="anchored" data-anchor-id="the-ip-address-of-my-ubuntu-ssh-server">The IP address of my Ubuntu SSH Server</h2>
<p>I cannot share the public IP address of Ubuntu machine, because if I did, then, I could suffer from remote attacks. If people know where my machine is, then, they can try to access it and break it.</p>
<p>That is why, in this article, I’m going to use a fictituous IP address over the next examples. Let’s suppose I looked for the IPv4 of my Ubuntu computer, which is the SSH Server in this experiment, and I found the IP <code>171.0.0.1</code>. So every time you see this IP <code>171.0.0.1</code>, you know that this is the IP of my SSH Server.</p>
</section>
</section>
<section id="find-the-users-available-in-your-server" class="level1">
<h1>Find the users available in your server</h1>
<p>Now, we need to know which username we want to use in the server’s login. If your SSH Server is a Linux machine, then, you can probably use the <code>root</code> username, which is the admin of the machine, it is the user with most privileges on the server. But using the <code>root</code> user is usually a bad practice.</p>
<p>So I will choose to use the <code>pedro</code> user instead, which is my personal user, to login into my server. Now, if your SSH Server is a Linux machine, and you are unsure about which user to use, you can look at the available users in your server, so that you get a list of “available options”.</p>
<p>To get this list of available users, run the following bash command in the terminal of your SSH Server:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d:</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f1</span> /etc/passwd</span></code></pre></div>
<p>Simply choose whatever user you want from this list.</p>
</section>
<section id="check-if-the-ssh-server-is-running" class="level1">
<h1>Check if the SSH Server is running!</h1>
<p>The machine that is behaving as the SSH Server in this relationship, not only needs to be up and running, and connected to the internet. This machine also needs to have the <code>sshd</code> (SSH Server daemon process) program up and running as well.</p>
<p>The <code>sshd</code> program, is the actual SSH Server process. In other words, that is the actual program that makes a computer behave as a SSH Server. This program will allocate (or take control over) a web socket in your computer, and will use this socket to wait and listen for incoming SSH connections, and it will handle/accept these connections as they come.</p>
<p>Usually, SSH is a core functionality of any web server in the world. As a consequence, usually, the <code>sshd</code> program is already started right at the startup of the machine. So usually, you do not have the need to manually start the <code>sshd</code> program, it automatically starts for you.</p>
<p>But you know… problems or bugs can happen, or maybe, you lack some specific configurations in your server. So how can you check if the <code>sshd</code> program is up and running in your server? If this server is a Linux machine, you can simply run the following bash command to check the current state of the <code>sshd</code> program:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> status sshd</span></code></pre></div>
<p>Now, if for some reason, the above command shows that the <code>sshd</code> program is not in “active/running” state, you can manually start the <code>sshd</code> program by running the following command:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> systemctl start sshd</span></code></pre></div>
</section>
<section id="making-the-ssh-connection" class="level1">
<h1>Making the SSH connection</h1>
<p>Now that we have all the information available, and we are sure that the SSH Server is up and running, we can effectively make the connection with SSH.</p>
<p>Everything you need to do now, is to run the <code>ssh</code> command in the terminal of your SSH Client, which the username you want to use in the login, followed by a <code>@</code> and the IP Address of the SSH Server. So the command have the format of <code>ssh {user}@{ip_address}</code>.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span> pedro@171.0.0.1</span></code></pre></div>
<p>After you run the above command, you probably will be prompted with some questions, just answer “yes”, or whatever answer is most appropriate. After these questions, the SSH Server will ask you to provide the password of the user you choose. In the above example, I used the <code>pedro</code> user to login into the server, so I need to type the password of this user.</p>
<p>If you provide the correct password, the login will succeed and SSH connection to the server will be complete! After that, the server will provide a new bash terminal for you. Through this terminal, you have a lot of control over the server, and you can send whatever bash command you want to be executed into the server.</p>
<p>The output will probably look something like this. If you see the “Last login: …” message, then, your SSH connection was succesful and you currently are inside the bash terminal of the SSH Server. Now, you can send whatever bash command you want to be executed by the server.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Last</span> login: Wed Jan 24 20:27:17 2024</span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pedro@pedro:~/$</span></span></code></pre></div>
</section>
<section id="using-password-less-mode-in-the-ssh-connection" class="level1">
<h1>Using password-less mode in the SSH connection</h1>
<p>Every time you connect to the server, you will need to provide the password of the user you are using to login. However, SSH offers a mode that does need a password, which is known as the “password-less mode of SSH”, and in fact, it is the recommended way of connecting to a server.</p>
<p>In other words, using the “password-less mode of SSH” is the most secure way of building a SSH connection, and because of that, it is how you should connect to your server. This mode uses a key pair to autenthicate the user into the server. This key pair is composed by a public key and a private key, and when you use this mode in SSH, all of the communications made in the SSH connection (between the server and the client) are encrypted by using this pair of keys.</p>
<p>This means that, in order to use this mode of SSH, you need first to generate a key pair, if you don’t have one already. You can generate this pair by running the <code>ssh-keygen</code> command in the terminal of your SSH Client.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-keygen</span></span></code></pre></div>
<p>In theory, you can run this <code>ssh-keygen</code> command in whatever computer you want. You do not need to generate this key pair in the SSH Client necessarily. This computer does not even need to be involved in the SSH relationship here. You can generate this key pair in any place you can.</p>
<p>However! What really essential here, is that <strong>the SSH Client needs to have both the public and the private key</strong>, stored inside of him. In contrast, the SSH Server needs to have only the public key.</p>
<p>This is a very important/essential detail!</p>
<p>As a result, is much easier if you run the <code>ssh-keygen</code> command inside the SSH Client. Because then, you need to do nothing, since both keys were generated inside the SSH Client, and as a consequence, they are already stored inside the SSH Client. All you have to do is to send the public key that was generated to the SSH Server.</p>
<p>But if you generated this key pair in a different computer, like the notebook of your friend, then, you need to add both the public and private keys to the computer that you are using as the SSH Client in this relationship.</p>
<p>However, is important to emphasize, <strong>you should avoid at all costs</strong> moving the private key around! In other words, the private key is an extremely sensitive information, and you should not send it to anyone. If anyone with bad intentions have access to this private key, he may try to get access to your server and make some very serious damage.</p>
<p>That is why we usually generate this key pair inside the SSH Client. Because then we avoid the need to send/move this private key to somewhere else.</p>
<p>Having that said, there is no problem to exchange the public key with other people. The public key of this key pair, is really public in the sense that there is no danger if someone else discover this key. In fact, you need to exchange this public key with the other side of the relationship. The SSH Server in this relationship needs to know which is your public key.</p>
<p>One popular way of sending the public key to the SSH Server, is to use the <code>ssh-copy-id</code> command. You execute this command in the SSH Client. You provide the path to the public key you generated after the <code>-i</code> option, and after that, you provide the same information (username and IP address) you start the connection with the server before:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ssh-copy-id</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> ~/.ssh/id_rsa.pub pedro@171.0.0.1</span></code></pre></div>
<p>You probably will need to provide the password of your username one more time in this command. But if this command runs succesfully, then, over the next times you login into the server, you will not need a password anymore. Because the server will authenticate you automatically based on your key pair.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://www.ssh.com/academy/ssh/sshd" class="uri">https://www.ssh.com/academy/ssh/sshd</a>↩︎</p></li>
<li id="fn2"><p><a href="https://www.ssh.com/academy/ssh/keygen" class="uri">https://www.ssh.com/academy/ssh/keygen</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>SSH</category>
  <category>Servers</category>
  <category>Network</category>
  <guid>https://pedro-faria.netlify.app/posts/2024/2024-01-22-did-you-ever-ssh/en/</guid>
  <pubDate>Mon, 22 Jan 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use the cache effectively on Apache Spark</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2024/2024-01-13-spark-cache/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I work a lot with Apache Spark on Databricks, and very recently, I encountered some cases of jobs failling because of cached DataFrames ocupying all the memory available, and, as consequence, raising <code>OutOfMemory</code> runtime errors.</p>
<p>In essence, the job was executing a Python notebook that contained some <code>pyspark</code> code. Many Spark DataFrames were being constantly cached by using the DataFrame method <code>cache()</code>. And this pattern was causing the memory to be crowed with more and more caches, until it became full, and caused the job to crash.</p>
<p>In this article, I want to describe how you should use <code>cache()</code> effectively on Apache Spark, and also, explain how this <code>OutOfMemory</code> error happenned.</p>
</section>
<section id="what-is-this-cache-method" class="level1">
<h1>What is this <code>cache()</code> method?</h1>
<p>In Apache Spark we work with Spark DataFrames. They are the core (or the essence) of any Spark application. We model, transform, load and export these objects to get the result we want.</p>
<p>However, in some cases, generating a specific Spark DataFrame can take a long time. Maybe this DataFrame is defined by a heavy query, that involves many and many layers of calculations, or maybe, a huge amount of data needs to be read to calculate/generate this DataFrame.</p>
<p>For these specific cases, we can cache this specific Spark DataFrame. By caching it, we avoid the need to calculate/generate from scratch this DataFrame, over and over again. We calculate it once, and then, we reuse this same data in posterior cases.</p>
<p>We do this, by calling the <code>cache()</code> DataFrame method, to mark that specific DataFrame as a “cached DataFrame”. As an example, in the code below, I’m creating a Spark DataFrame called <code>df</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SparkSession</span>
<span id="cb1-2">spark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SparkSession.builder.getOrCreate()</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Row</span>
<span id="cb1-5"></span>
<span id="cb1-6">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-7">  Row(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.3</span>, date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb1-8">  Row(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.8</span>, date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb1-9">  Row(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.1</span>, date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb1-10">  Row(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.6</span>, date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb1-11">]</span>
<span id="cb1-12"></span>
<span id="cb1-13">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.createDataFrame(data)</span></code></pre></div>
<p>If I want to cache this DataFrame, all I need to do is to call the <code>cache()</code> method with this <code>df</code> object, like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df.cache()</span></code></pre></div>
<p>Now, the <code>df</code> DataFrame is marked as a “DataFrame to be cached” by Spark, and if we use this <code>df</code> DataFrame over the next lines of our notebook, instead of Spark recalculating the entire DataFrame each time, it will reuse the data of this DataFrame that was cached. This can make our Spark application much faster, because Spark will not spend more time recalculating the DataFrame.</p>
<p>But is important to note, that in Apache Spark, cache operations are lazy operations. I quickly described this lazy aspect of Spark at <a href="https://pedropark99.github.io/Introd-pyspark/Chapters/04-dataframes.html#sec-viewing-a-dataframe">Section 3.5 of my <code>pyspark</code> book</a>.</p>
<blockquote class="blockquote">
<p>A key aspect of Spark is its laziness. In other words, for most operations, Spark will only check if your code is correct and if it makes sense. Spark will not actually run or execute the operations you are describing in your code, unless you explicit ask for it with a trigger operation, which is called an “action” (this kind of operation is described in Section 5.2). <span class="citation" data-cites="pedro2024">Faria (2024)</span></p>
</blockquote>
<p>Therefore, the cache operation of the DataFrame will only happen if you call an action over the next lines of your notebook. I listed what operations are considered as actions in Spark at <a href="https://pedropark99.github.io/Introd-pyspark/Chapters/05-transforming.html#sec-dataframe-actions">Section 5.2 of my <code>pyspark</code> book</a>. But essentially, the Spark DataFrame methods below are all examples of actions in Spark:</p>
<ul>
<li><code>show()</code></li>
<li><code>collect()</code></li>
<li><code>count()</code></li>
<li><code>write.csv()</code></li>
<li><code>read.csv()</code></li>
</ul>
<p>So, if you call any of the Spark DataFrame methods above, after you called <code>cache()</code> over the same Spark DataFrame, then, Spark will effectively cache your DataFrame.</p>
</section>
<section id="how-to-use-cache-effectively" class="level1">
<h1>How to use cache effectively</h1>
<p>There are two commom situations where cache can be very effective, which are:</p>
<ul>
<li><p><strong>Constantly use the same DataFrame over the notebook</strong>.</p></li>
<li><p><strong>Frequently access a subset of a DataFrame</strong>.</p></li>
</ul>
<p>Every time you call an action on a Spark DataFrame in your notebook, Spark needs to read and load the DataFrame’s data from storage (this storage can be many things, like a data lake in the cloud, or a local static file, etc.). So if you repeateadly use the same Spark DataFrame, then, you are repeateadly reading from storage the same data over and over again.</p>
<p>Having this in mind, when you constantly use the same Spark DataFrame over and over again across your notebook, it might be a good idea to cache this specific DataFrame. For example, if you use a DataFrame called <code>students</code> in 15 locations in your notebook, then, by default, Spark will recalculate this <code>students</code> DataFrame, from scratch, 15 times. But if you cache this DataFrame, then, Spark will calculate the DataFrame on the first time, and reuse the cached data in the remaining 14 times.</p>
<p>So …</p>
<blockquote class="blockquote">
<p>caching is optimal when you need to perform multiple operations on the same dataset to avoid reading from storage repeatedly. <span class="citation" data-cites="patidar2023">Patidar (2023)</span>.</p>
</blockquote>
<p>The same applies to when you are frequently using the same subset of a DataFrame. For example, you might have defined in your notebook a new object <code>under_10</code> which contains all rows from <code>students</code> DataFrame that describes students that have an age below 10.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql.functions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> col</span>
<span id="cb3-2">under_10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> students.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<p>If you use this subset of <code>students</code> DataFrame across multiple locations of your notebook, then, it might be also a good idea to cache this <code>under_10</code> DataFrame, like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql.functions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> col</span>
<span id="cb4-2">under_10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-3">  students</span>
<span id="cb4-4">    .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-5">    .cache()</span>
<span id="cb4-6">)</span></code></pre></div>
</section>
<section id="how-to-not-use-cache-effectively" class="level1">
<h1>How to NOT use cache effectively</h1>
<p>If your notebook have a very sequential logic, then, caching is usually wasteful or a bad idea. Take for example, a notebook that perform the following steps:</p>
<ol type="1">
<li>take DataFrame A, filter it, summarise it, and then, save it.</li>
<li>take DataFrame B, filter it, add new columns, group by and summarise it, and then, send it to the server.</li>
<li>take DataFrame C, filter the essential information you want, save this data into a new CSV file, and then, send this CSV file to an Amazon S3 bucket.</li>
</ol>
<p>If you pay attention to these steps above, you will notice that they are independent from each other. These steps can be performed in any order, because the result from each step does not depend on the results from the other steps.</p>
<p>In a notebook like this, caching any of the three cited DataFrames (A, B or C) is usually unnecessary (or a bad idea), because each of these DataFrames is used only once across the notebook, so there is no really need to cache it. By caching it, you will be wasting not only time, but also, memory space.</p>
<p>Having this in mind, notebooks that have a more complex and interconnected logic are much more suitable candidates for caching. For example, if you have a notebook that produces two DataFrames (B and C) as output, and they both are produced from a JOIN operation with the same DataFrame A, then, it might be worth to cache DataFrame A, so that Spark calculates DataFrame A from scratch only once, instead of two.</p>
<p>Now, another situation where caching might be a bad idea is when you do not have much memory available in your Spark cluster. As an example, let’s consider that you only had available a cluster with 2 nodes and 8 GB of RAM memory in your Spark environment.</p>
<p>If your notebook is working with a Spark DataFrame whose physical size is 7 GB worth of data, then, it might be a very bad idea to cache this DataFrame, because if you do cache it, then, 7 GB (almost 90%) of your memory will be occupied with the cached data, and this leaves only 1 GB avaialable to perform all the transformations and remaining operations of your notebook.</p>
<p>So caching can be more of a hindrance than a help (especially if you cache multiple DataFrames) when these caches occupy a too big chunk of memory. 1 GB might be (or might be not) enough to perform the remaining tasks in your notebook. But you should not take this risk. In general, when you have a low quantity of memory available, and you cache multiple DataFrames, two things can happen:</p>
<ol type="1">
<li>most likely, your job (or your Spark application) will crash with an <code>OutOfMemory</code> error.</li>
<li>the calculations and transformations become much, much, MUCH slower, because the memory does not have enough space available to perform these calculations in parallel. Your Spark application will succeed, and will produce the output you want… only many, many, MANY times slower.</li>
</ol>
</section>
<section id="what-happened-with-the-cases-ive-seen" class="level1">
<h1>What happened with the cases I’ve seen</h1>
<p>I recently encountered some cases of jobs failing during runtime because of <code>OutOfMemory</code> errors, that were generated by multiple caching operations that polluted all memory available in the cluster.</p>
<p>I want to use this practical example to demonstrate how caching was badly used in this example. So that you can learn from it.</p>
<p>The notebook I encountered, was essentially responsible for update 3 different tables in our SQL databases, and to do that, this notebook was defining 5 different Spark DataFrames, and all of them were being cached with the <code>cache()</code> DataFrame method.</p>
<p>If I execute this notebook in a more robust Spark cluster, with more worker nodes, with more RAM memory available, then, the notebook just executed fine.</p>
<p>The complete execution of the notebook took around 55 minutes, which is a long time… But no runtime errors were raised. In essence, no <code>OutOfMemory</code> errors were raised because we were lucky. Because this more robust cluster had enough memory space to hold 5 DataFrames in cache. Figure&nbsp;1 presents this process visually:</p>
<div id="fig-memory2" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-memory2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2024/2024-01-13-spark-cache/memory2.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-memory2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: DataFrames being cached in a more robust Spark cluster
</figcaption>
</figure>
</div>
<p>However, this same notebook was being executed every day by a scheduled job in Databricks (i.e.&nbsp;a Databricks Workflow). But every time this notebook was executed through the scheduled job, it failed with <code>OutOfMemory</code> errors. The scheduled job was being executed by a much smaller cluster, that had only two worder nodes and 8 GB of RAM memory available.</p>
<p>The <code>OutOfMemory</code> errors were being raised right after we cached the third Spark DataFrame (let’s call this DataFrame of <code>df3</code>) defined in the notebook. So, in summary, what was happening is: Spark was caching each DataFrame defined in the notebook, but on the third DataFrame, the Spark process run out of memory. In other words, we did not had any more memory to do anything!</p>
<p>Figure&nbsp;2 summarizes this process visually:</p>
<div id="fig-memory" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-memory-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2024/2024-01-13-spark-cache/memory.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-memory-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Multiple caches surpassing the limit of memory available in a less robust Spark cluster
</figcaption>
</figure>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In essence, using the Spark DataFrame <code>cache()</code> method can improve the performance of your Spark application. But you should be careful when using this resource, because it can be more of a hindrance than a help, depending on how you use it.</p>
<p>As a good rule of thumb, you usually want to use caches in Spark when:</p>
<ul>
<li>Constantly use the same DataFrame over the notebook.</li>
<li>Frequently access a subset of a DataFrame.</li>
</ul>
<p>In this article I also presented a situation where caches were responsible for crashing a Spark application, as a real example on how caches can be harmful.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-pedro2024" class="csl-entry">
Faria, Pedro Duarte. 2024. <em>Introduction to Pyspark</em>. 1st ed. Belo Horizonte. <a href="https://pedropark99.github.io/Introd-pyspark/">https://pedropark99.github.io/Introd-pyspark/</a>.
</div>
<div id="ref-patidar2023" class="csl-entry">
Patidar, Charchit. 2023. <span>“How Cache Works in Apache Spark.”</span> <a href="https://medium.com/@charchitpatidar/how-cache-works-in-apache-spark-aea6eeb3fd03">https://medium.com/@charchitpatidar/how-cache-works-in-apache-spark-aea6eeb3fd03</a>.
</div>
</div></section></div> ]]></description>
  <category>Apache Spark</category>
  <category>Performance</category>
  <guid>https://pedro-faria.netlify.app/posts/2024/2024-01-13-spark-cache/en/</guid>
  <pubDate>Sat, 13 Jan 2024 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2024/2024-01-13-spark-cache/memory.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Introduction to pyspark</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/publications/book/introd-pyspark/en/</link>
  <description><![CDATA[ 





<section id="about-the-book" class="level1">
<h1>About the book</h1>
<p>This book is for anyone who wants to learn quickly how to use <code>pyspark</code> to effectively load, process, and transform large volumes of data using Python.</p>
<p><a href="https://www.amazon.com/dp/B0CRYMVWDN"> <button type="button" class="btn btn-primary">Buy a copy of the book!</button></a> <a href="https://pedropark99.github.io/Introd-pyspark/"> <button type="button" class="btn btn-primary">Read online</button></a> <a href="https://github.com/pedropark99/Introd-pyspark"> <button type="button" class="btn btn-primary">Official repository</button></a></p>
<p>In more detail, this is a quick and introductory book about <code>pyspark</code>, which is the Python API for Apache Spark. Apache Spark is the de facto standard engine for big-data analytics. It is largely used to build data processing, data ingestion, and machine learning applications that process very large volumes of data.</p>
<p>One of the many reasons why Apache Spark became popular is because of its APIs. You can build Spark applications using different programming languages, such as Python, R, and Scala. But this book focuses solely on the Python API.</p>
<p>In this book, you will learn about:</p>
<ul>
<li>How an Apache Spark application works?</li>
<li>What are Spark DataFrames?</li>
<li>How to build, transform and model your Spark DataFrame.</li>
<li>How to import data into (or export data out of) Apache Spark.</li>
<li>How to work with SQL inside pyspark.</li>
<li>Tools for manipulating specific data types (e.g.&nbsp;strings, dates and datetimes).</li>
<li>How to use window functions.</li>
</ul>
</section>
<section id="motivation-for-the-book" class="level1">
<h1>Motivation for the book</h1>
<p>In summary, this book aims to give a solid introduction (for python and not python users) to the <code>pyspark</code> package, and on how to use it to build Spark applications for data pipelines and interactive data analysis.</p>
<p>Although we have a good range of materials about Apache Spark in general, such as <span class="citation" data-cites="damji2020">Damji et al. (2020)</span> and <span class="citation" data-cites="chambers2018">Chambers and Zaharia (2018)</span>, we do not have much abundance of materials about the APIs of Spark in “foreign” languages, like the Python (<code>pyspark</code>) and R (<code>SparkR</code>) APIs.</p>
<p>The reason for this is simple: the Spark API have a consistent structure across all languages. As consequence, a general book about Spark can fairly cover all languages at once. In other words, Spark code in Scala can be easily translated into python code with <code>pyspark</code>. Because the structure of the code is very similar between all languages.</p>
<p>So why this book? First, Python is a more popular and friendly language than Scala or Java. If the reader is not interested in learning Java or Scala, why show Java/Scala code to him? Is very important to focus solely on what interest the reader, specially if it is in a language that he is familiar with. Second, I had some time to spent, and a lot of practical experience with <code>pyspark</code> on production to share (so… why not write a book about it?).</p>
</section>
<section id="cover" class="level1">
<h1>Cover</h1>
<p><img src="https://pedro-faria.netlify.app/publications/book/introd-pyspark/featured.png" class="img-fluid" style="width:100.0%"></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-chambers2018" class="csl-entry">
Chambers, Bill, and Matei Zaharia. 2018. <em>Spark: The Definitive Guide: Big Data Processing Made Simple</em>. Sebastopol, CA: O’Reilly Media.
</div>
<div id="ref-damji2020" class="csl-entry">
Damji, Jules, Brooke Wenig, Tathagata Das, and Denny Lee. 2020. <em>Learning Spark: Lightning-Fast Data Analytics</em>. Sebastopol, CA: O’Reilly Media.
</div>
</div></section></div> ]]></description>
  <category>Python</category>
  <category>Apache Spark</category>
  <category>Book</category>
  <guid>https://pedro-faria.netlify.app/publications/book/introd-pyspark/en/</guid>
  <pubDate>Tue, 09 Jan 2024 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/publications/book/introd-pyspark/featured.png" medium="image" type="image/png" height="215" width="144"/>
</item>
<item>
  <title>My experience with Typst, the potential sucessor of LaTex</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-12-31-introducing-typst/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>Typst is a new markup-based typesetting system for the sciences written in Rust. The Typst works similarly to other typesetting systems. In resume, you write a Typst source file which describes the document you want to create, and then, you invoke the Typst compiler to build the document you described in the source file.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-12-31-introducing-typst/typst-process.svg" class="img-fluid figure-img"></p>
<figcaption>Producing documents with Typst</figcaption>
</figure>
</div>
<p>Typst is open-source and is freely available at GitHub, just <a href="https://github.com/typst/typst/releases/">download the release file according to your operational system</a> and install the tool into your system.</p>
</section>
<section id="what-i-like-about-typst" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> What I like about Typst</h1>
<p>First of all, Typst is an amazing tool! So let me describe the features about it that I like the most.</p>
<section id="have-good-documentation" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="have-good-documentation"><span class="header-section-number">2.1</span> Have good documentation!</h2>
<p><a href="https://typst.app/docs/">Typst have a very good documentation</a>, and this makes all the difference in the world! Because learning how to use the tool becomes so much easier when you have a good support material to rely on.</p>
</section>
<section id="have-fast-compilation-time" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="have-fast-compilation-time"><span class="header-section-number">2.2</span> Have fast compilation time!</h2>
<p>LaTex have a known weakness of being slow to compile the input file and producing the output PDF. Typst does not suffer from this problem, because it has a much faster compilation time.</p>
<p>Compiling a very small Typst document takes about 0.05s in my machine, while compiling essentially the same document in LaTex take 0,26s:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> time typst compile example.typ</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0,05s</span> user 0,06s system 88% cpu 0,121 total</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> time xelatex example.tex</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0,26s</span> user 0,16s system 80% cpu 0,522 total</span></code></pre></div>
<p>This is an important advantage of Typst, because it delivers a much faster feedback loop into your workflow. In other words, if you reduce the compilation time, you will spend less time waiting to see if your code works! By spending less time trying to see the output of your work, you can spend more time in what really matters! Like writing more content or refining your work.</p>
</section>
<section id="understandable-error-messages" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="understandable-error-messages"><span class="header-section-number">2.3</span> Understandable error messages</h2>
<p>For me personally, one of the great weaknesses of LaTex is it’s error messages, which are very obscure, and honestly, useless in the majority of cases. And I mean this.</p>
<p>In contrast, Typst have much more understandable error messages. Messages that are easy to understand, and that are easy to relate back to your source code. Take this error messages from Typst as an example:</p>
<pre class="typst"><code>error: the character `#` is not valid in code
  ┌─ posts/2023/2023-12-31-introducing-typst/example.typ:2:3
  │
2 │    #set text(font: "Inconsolata")
  │    ^</code></pre>
<p>Or maybe this other error message:</p>
<pre class="typst"><code>error: expected function, found content
  ┌─ posts/2023/2023-12-31-introducing-typst/example.typ:1:19
  │  
1 │   #show raw: code =&gt; {
  │ ╭────────────────────^
2 │ │    set text(font: "Inconsolata")
3 │ │ }[#code]
  │ ╰─^

help: error occurred while applying show rule to this raw
  ┌─ posts/2023/2023-12-31-introducing-typst/example.typ:7:16
  │
7 │ Testing if this `raw code element` uses the show rule.
  │                 ^^^^^^^^^^^^^^^^^^
</code></pre>
</section>
<section id="very-good-quality-output" class="level2" data-number="2.4">
<h2 data-number="2.4" class="anchored" data-anchor-id="very-good-quality-output"><span class="header-section-number">2.4</span> Very good quality output</h2>
<p>LaTex is known for producing very-high quality documents, and Typst leaves nothing to be desired in this aspect. Specially because the Typst development team ported some of the core algorithms behind LaTex into Typst.</p>
<p>So Typst also produces very-high quality documents because it learned from the great powers of LaTex.</p>
</section>
<section id="preview-and-incremental-compilation" class="level2" data-number="2.5">
<h2 data-number="2.5" class="anchored" data-anchor-id="preview-and-incremental-compilation"><span class="header-section-number">2.5</span> Preview and Incremental compilation</h2>
<p>Typst have a preview mode which is very good and powerful. There is a <a href="https://typst.app/assets/videos/mockup.webm">great video in Typst’s website</a> that demonstrates it.</p>
<p>When you use this preview mode, Typst create a new window that shows the preview of the output document of your source code, and any changes that you make to your source code are instantly reflected (pratically in real time) into the previewed document.</p>
<p>This preview in real time of the output document is very good when you are trying to refine the aesthetics of your document, but you are not very sure yet on how to do it properly, and you want to test different options.</p>
<p>This power from the preview mode is only possible, because Typst has an incremental compilation engine inside Typst compiler, which is capable of compiling just the section of your code your changed, instead of recompiling the entire source file, and regenerate the entire PDF output again.</p>
</section>
<section id="show-rules-are-awesome" class="level2" data-number="2.6">
<h2 data-number="2.6" class="anchored" data-anchor-id="show-rules-are-awesome"><span class="header-section-number">2.6</span> Show rules are awesome!</h2>
<p>Show rules with the <code>#show</code> directive are an amazing way of customizing specific elements of your document. But the true power of <code>#show</code> directives is that you can write more clear and organized code with them.</p>
<p>When you want some parts of your document to have, for example, font Inconsolata with size 14pt, and other parts of the same document to have completely different settings, like font Times New Roman size 12pt, and coloured red, you usually end up redefining these settings over and over again.</p>
<p>You might for example set a “default setting” to be applied over the entire document. Then, you overrule this default setting by setting specific settings every time that a specific element appears across the document. So you end up with a lot of duplicated code, that redefines the same settings over and over again, across the entire source file.</p>
<p>Show rules with the <code>#show</code> directive eliminates this necessitty by allowing you to specify a set of settings to be applied to every element of type <code>x</code> that appears in your document. As an example, if I want to use font Inconsolata size 14pt in any raw code that is exposed inside my document, I can set a show rule to be applied over any element of type <code>raw</code>, like this:</p>
<pre class="typst"><code>#show raw: code =&gt; {
   set text(font: "Inconsolata", size : 14pt)
   code
}

Testing if this `raw code element` uses the show rule.</code></pre>
<p>With the show rule that I created above, any raw code that I create across my Typst document will be rendered in the PDF output using font Inconsolata size 14pt. To some extent, show rules in Typst are almost like CSS code that uses CSS selectors to apply certain rules to specific HTML elements.</p>
</section>
<section id="reusing-code-is-much-easier" class="level2" data-number="2.7">
<h2 data-number="2.7" class="anchored" data-anchor-id="reusing-code-is-much-easier"><span class="header-section-number">2.7</span> Reusing code is much easier</h2>
<p>Reusing code or settings across different parts in your document in Typst is much more straightforward than it is in LaTex. Because is very easy to create functions in Typst, or show rules that can spread a piece of code over multiple locations of your document.</p>
<p>In other words, Typst looks like a real programming language. You can easily create functions in Typst to reuse the same piece of code. In contrast, in LaTex, there is no notion of functions per se, you have macros instead. When you want to reuse a piece of code , you normally you create new commands (with the <code>\newcommand</code> macro). This makes LaTex code harder to read and to comprehend in my opinion.</p>
</section>
<section id="csl-is-now-available-in-typst" class="level2" data-number="2.8">
<h2 data-number="2.8" class="anchored" data-anchor-id="csl-is-now-available-in-typst"><span class="header-section-number">2.8</span> CSL is now available in Typst!</h2>
<p>Typst is very young, and until very recently, the use of different citation styles was very limited. But on the most recent version of Typst, a CSL (Citation Style Language) processor was added! And as consequence, we can use now any possible citation style in Typst documents by providing a CSL file to the <a href="https://typst.app/docs/reference/model/bibliography/"><code>style</code> argument of the <code>bibliography()</code> function</a> to be processed in conjunction with the Typst source file.</p>
<p>For example, in Brazil, academia have very rigorous rules about how citation should be written in a scientific article, and these rules are specified by the norms produced by the ABNT (<em>Brazilian Agency of Technical Norms</em>) agency. Now, with the new additions to Typst, we can easily write citations using the brazilian ABNT citation style, by providing a CSL file like the <a href="https://insumo.ibict.br/produtos/csl-ibict/">CSL styles produced by IBICT - <em>Brazilian Institute for Science and Technology Information</em></a>.</p>
</section>
<section id="syntax-similar-to-markdown" class="level2" data-number="2.9">
<h2 data-number="2.9" class="anchored" data-anchor-id="syntax-similar-to-markdown"><span class="header-section-number">2.9</span> Syntax similar to Markdown</h2>
<p>Typst have a markup language whose syntax is similar to Markdown. And this is a great thing. Because the markup language in LaTex is…., well, it is not awfull to write, but it produces an awfull visual mess in the text you write.</p>
<p>For example, if your write some text in LaTex that have a lot of emphasized words, you need to add a lot of <code>\textbf{}</code> or <code>\emph{}</code> macros in it, and, as a result, your text looks very messy. In typst, you just surround each word by stars (<code>*</code>), and, as consequence, you leave much less visual noise in your text. In other words, your text looks cleaner (or clearer) in Typst.</p>
</section>
</section>
<section id="conclusion" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Conclusion</h1>
<p>Typst is now a really great alternative to LaTex to compose scientific articles, or just any type of good PDF document. I did not find anything about Typst that I don’t like yet. So, my fisrt impressions on the system are only positive, and I think Typst has a great future ahead of it.</p>
<p>If you use LaTex a lot, and are not familiar yet with Typst, I highly recommend you to at least try it, and see what you think. Peace✌️ !</p>


</section>

 ]]></description>
  <category>Typst</category>
  <category>Typesetting system</category>
  <category>Documents</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-12-31-introducing-typst/en/</guid>
  <pubDate>Sun, 31 Dec 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-12-31-introducing-typst/post-back.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>NeoVim commands and shortcuts cheatsheet</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-12-29-vim-cheatsheet/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><a href="./../cheatsheet.pdf"> <button type="button" class="btn btn-primary">Access Cheatsheet PDF</button></a></p>
<p>NeoVim is a highly extensible and “keyboard-based” text editor. Many consider NeoVim as an evolution of the famous Vim text editor, with focus on extensibility.</p>
<p>What really makes NeoVim (and also Vim) an extremely powerful editor are the Vim commands and keyboards shortcuts. To make my life easier, I decided to write a quick cheatsheet that contains all of the Vim commands and keyboard shortcuts that I use the most.</p>


</section>

 ]]></description>
  <category>NeoVim</category>
  <category>Vim</category>
  <category>Cheatsheet</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-12-29-vim-cheatsheet/en/</guid>
  <pubDate>Sat, 30 Dec 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-12-29-vim-cheatsheet/post-image.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>How strings work in Zig?</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-12-12-zig-strings/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Zig is a new general-purpose and low level programming language that is being very promising. The documentation of the language<sup>1</sup> is very good in quality, but I missed some more specific details about strings in there.</p>
<p>That is why, I decided to write this article, to discuss in more depth how strings work in Zig, and give you some more specific details about it.</p>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>

<script type="text/javascript" src="https://notabug.org/Ash/highlightjs-zig/raw/master/dist/zig.min.js"></script>


<script>hljs.highlightAll();</script>
</section>
<section id="what-strings-in-zig-are" class="level1">
<h1>What strings in Zig are?</h1>
<p>In Zig, a string literal (or a string object if you prefer) is a pointer to a null-terminated array of bytes. Each byte in this array is represented by an <code>u8</code> value, which is an unsigned 8 bit integer.</p>
<p>Zig always assumes that this sequence of bytes is UTF-8 encoded. This might not be true for every sequence of bytes you have it, but is not really Zig’s job to fix the encoding of your string (you can use <code>iconv</code> for that). Today, most of text data in our modern world should be UTF-8 encoded. So if your string literal is not UTF-8 encoded, then, you will probably have problems in Zig.</p>
<p>Let’s take for example the word “Hello”. In UTF-8, this sequence of characters (H, e, l, l, o) is represented by the sequence of decimal numbers 72, 101, 108, 108, 111. In xecadecimal, this is the sequence <code>0x48</code>, <code>0x65</code>, <code>0x6C</code>, <code>0x6C</code>, <code>0x6F</code>. So if I take this sequence of hexadecimal values, and ask Zig to print this sequence of bytes as a sequence of characters (i.e.&nbsp;a string), then, the text “Hello” will be printed into the terminal:</p>
<pre><code class="zig">const std = @import("std");

pub fn main() !void {
    const bytes = [_]u8{0x48, 0x65, 0x6C, 0x6C, 0x6F};
    std.debug.print("{s}\n", .{bytes});
}
</code></pre>
<pre class="text"><code>Hello</code></pre>
<p>If you want to see the actual bytes that represents a string in Zig, you can use a for loop to loop trough each byte in the string, and ask Zig to print each byte as an hexadecimal value to the terminal, using a <code>print()</code> statement with the <code>X</code> formatting specifier. Like this:</p>
<pre><code class="zig">const std = @import("std");

pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    std.debug.print("Bytes that represents the string object: ", .{});
    for (string_literal) |byte| {
        std.debug.print("{X} ", .{byte});
    }
    std.debug.print("\n", .{});
}
</code></pre>
<pre class="text"><code>Bytes that represents the string object: 54 68 69 73 20 69 73 20 61 6E 20 65 78 61 6D 70 6C 65 20 6F 66 20 73 74 72 69 6E 67 20 6C 69 74 65 72 61 6C 20 69 6E 20 5A 69 67 </code></pre>
</section>
<section id="strings-in-c" class="level1">
<h1>Strings in C</h1>
<p>This is very similar to how C treats strings as well. That is, string values in C are also treated internally as an array of bytes, and this array is also null-terminated.</p>
<p>But one key difference between a Zig string and a C string, is that Zig also stores the length of the array inside the string object. This small detail makes your code safer, because is much easier for the Zig compiler to check if you are trying to access an element out of bounds, or if your trying to access memory that does not belong to you.</p>
<p>To achieve this same kind of safety in C, you have to do a lot of work, that kind of seems pointless. So getting this kind of safety is not automatic and much harder to do in C. For example, if you want to track the length of your string troughout your program in C, then, you first need to loop through the array of bytes that represents this string, and find the null element (<code>'\0'</code>) position to discover where exactly the array ends, or, in other words, to find how much elements the array of bytes contain.</p>
<p>To do that, you would need something like this in C. In this example, the C string is 25 bytes long:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb3-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An example of string in C"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-9">        index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-11">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of elements in the array: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<pre class="text"><code>Number of elements in the array: 25</code></pre>
<p>But in Zig, you do not have to do this, because the object already contains a <code>len</code> field which stores the length information of the array. As an example, the <code>string_literal</code> object below is 43 bytes long:</p>
<pre><code class="zig">const std = @import("std");

pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    std.debug.print("{d}\n", .{string_literal.len});
}
</code></pre>
<pre class="text"><code>43</code></pre>
</section>
<section id="a-better-look-at-the-object-type" class="level1">
<h1>A better look at the object type</h1>
<p>Now, we can inspect better the type of objects that Zig create. To check the type of any object in Zig, you can use the <code>@TypeOf()</code> function.</p>
<p>If we look at the type of the <code>simple_array</code> object below, you will find that this object is a array of 4 elements. Each element is a signed integer of 32 bits (<code>i32</code>). That is what an object of type <code>[4]i32</code> is.</p>
<p>But if we look closely at the type of the <code>string_literal</code> object below, you will find that this object is a constant pointer (<code>*const</code>) to an array of 43 elements (or 43 bytes). Each element is a single byte (more precisely, an unsigned 8 bit integer), that is why we have the <code>[43:0]u8</code> portion of the type below. In other words, the string stored inside the <code>string_literal</code> object is 43 bytes long. That is why you have the type <code>*const [43:0]u8</code> below.</p>
<p>Now, if we create an pointer to the array object, then, we get a constant pointer to an array of 4 elements (<code>*const [4]i32</code>), which is very similar to the type of the <code>string_literal</code> object. This demonstrates that a string object (or a string literal) in Zig is already a pointer to an array.</p>
<p>Just remember that a “pointer to an array” is different than an “array”. So a string object in Zig is a pointer to an array of bytes, and not simply an array of bytes.</p>
<pre><code class="zig">const std = @import("std");
const print = std.debug.print;

pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    const simple_array = [_]i32{1, 2, 3, 4};


    print("Type of array object: {}\n", .{@TypeOf(simple_array)});
    print("Type of string object: {}\n", .{@TypeOf(string_literal)});
    print("Type of a pointer that points to the array object: {}\n", .{@TypeOf(&amp;simple_array)});
}
</code></pre>
<pre class="text"><code>Type of array object: [4]i32
Type of string object: *const [43:0]u8
Type of a pointer that points to the array object: *const [4]i32</code></pre>
</section>
<section id="byte-vs-unicode-points" class="level1">
<h1>Byte vs unicode points</h1>
<p>Is important to point out that each byte in the array is not necessarily a single character. This fact arises from the difference between a single byte and a single unicode point.</p>
<p>The encoding UTF-8 works by assigning a number (which is called a <em>unicode point</em>) to each character in the string. For example, the character “H” is stored in UTF-8 as the decimal number 72. This means that the number 72 is the unicode point for the character “H”. Each possible character that can appear in a UTF-8 encoded string have its own unicode point.</p>
<p>For example, the Latin Capital Letter A With Stroke (Ⱥ) is represented by the number (or the unicode point) 570. However, this decimal number (570) is higher than the maximum number stored inside a single byte, which is 255. In other words, the maximum decimal number that can be represented with a single byte is 255. That is why, the unicode point 570 is actually stored inside the computer’s memory as the bytes <code>C8 BA</code>.</p>
<pre><code class="zig">const std = @import("std");

pub fn main() !void {
    const string_literal = "Ⱥ";
    std.debug.print("Bytes that represents the string object: ", .{});
    for (string_literal) |char| {
        std.debug.print("{X} ", .{char});
    }
    std.debug.print("\n", .{});
}
</code></pre>
<pre class="text"><code>Bytes that represents the string object: C8 BA</code></pre>
<p>This means that to store the character Ⱥ in an UTF-8 encoded string, we need to use two bytes together to represent the number 570. That is why the relationship between bytes and unicode points is not always 1 to 1. Each unicode point is a single character in the string, but not always a single byte corresponds to a single unicode point.</p>
<p>All of this means that if you loop trough the elements of a string in Zig, you will be looping through the bytes that represents that string, and not through the characters of that string. In the Ⱥ example above, the for loop needed two iterations (instead of a single iteration) to print the two bytes that represents this Ⱥ letter.</p>
<p>Now, all english letters (or ASCII letters if you prefer) can be represented by a single byte in UTF-8. As a consequence, if your UTF-8 string contains only english letters (or ASCII letters), then, you are lucky. Because the number of bytes will be equal to the number of characters in that string. In other words, in this specific situation, the relationship between bytes and unicode points is 1 to 1.</p>
<p>But on the other side, if your string contains other types of letters… for example, you might be working with text data that contains, chinese, japanese or latin letters, then, the number of bytes necessary to represent your UTF-8 string will likely be much higher than the number of characters in that string.</p>
<p>If you need to iterate through the characters of a string, instead of its bytes, then, you can use the <code>std.unicode.Utf8View</code> struct to create an iterator that iterates through the unicode points of your string.</p>
<p>In the example below, we loop through the japanese characters “アメリカ”. Each of the four characters in this string is represented by three bytes. But the for loop iterates four times, one iteration for each character/unicode point in this string:</p>
<pre><code class="zig">const std = @import("std");

pub fn main() !void {
    var utf8 = (try std.unicode.Utf8View.init("アメリカ")).iterator();
    while (utf8.nextCodepointSlice()) |codepoint| {
        std.debug.print("got codepoint {}\n", .{std.fmt.fmtSliceHexUpper(codepoint)});
    }
}
</code></pre>
<pre class="text"><code>got codepoint E382A2
got codepoint E383A1
got codepoint E383AA
got codepoint E382AB</code></pre>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://ziglang.org/documentation/0.11.0/" class="uri">https://ziglang.org/documentation/0.11.0/</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Zig</category>
  <category>Strings</category>
  <category>Encoding</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-12-12-zig-strings/en/</guid>
  <pubDate>Tue, 12 Dec 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-12-12-zig-strings/zig-image.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>Developing a parser for Python with Python</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-11-18-python-parser/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>Me and my team are currently working in a massive migration (similar to a cloud migration). This migration involves many process, but one of them is to redirect every table reference that we find in more than <strong>130 thousand lines of Python code</strong>.</p>
<p>However, this task proved to be so complex that I had to develop a small parser for Python expressions. In this article, I want to use this experience to introduce the subject of parsing expressions to beginners.</p>
</section>
<section id="sec-context" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Context about what we have to do</h1>
<p>Most of these 130 thousand lines of Python code are <a href="https://spark.apache.org/docs/latest/api/python/index.html"><code>pyspark</code></a> code to extract, transform and load data using the <a href="https://spark.apache.org/">Apache Spark</a> engine.</p>
<p>Let’s consider the following example:</p>
<div id="lst-table" class="python listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-table-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;1: Example of pyspark code that we might find in our codebase
</figcaption>
<div aria-describedby="lst-table-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-table" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="lst-table-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SparkSession</span>
<span id="lst-table-2">spark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SparkSession.builder.getOrCreate()</span>
<span id="lst-table-3"></span>
<span id="lst-table-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blip.events"</span>)</span>
<span id="lst-table-5">df.show()</span></code></pre></div>
</div>
</figure>
</div>
<p>You can see at Listing&nbsp;1 that we have a <code>spark.table()</code> call to access the SQL table <code>blip.events</code>. In other words, we are basically making a <code>SELECT * FROM</code> query over this table. However, in our new infrastructure, all table references will change. As a result, me and my team need to rewrite every table reference that we find across our codebase.</p>
<p>For example, let’s suppose that the new table reference is <code>platform.blipraw.events</code>. This means that I need to alter the above snippet of code to:</p>
<div id="lst-table2" class="python listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-table2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;2: Example with the new reference
</figcaption>
<div aria-describedby="lst-table2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-table2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="lst-table2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SparkSession</span>
<span id="lst-table2-2">spark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SparkSession.builder.getOrCreate()</span>
<span id="lst-table2-3"></span>
<span id="lst-table2-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platform.blipraw.events"</span>)</span>
<span id="lst-table2-5">df.show()</span></code></pre></div>
</div>
</figure>
</div>
<section id="the-quick-and-dirty-approach" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="the-quick-and-dirty-approach"><span class="header-section-number">2.1</span> The quick and dirty approach</h2>
<p>This does not look so bad, right? I mean, considering the above example, I could just use a simple REGEX (<em>regular expression</em>) to find the places where I have an <code>spark.table()</code> call, capture the reference given as input, alter it to the new reference, and replace the text with the new reference.</p>
<p>This approach would involve some code similar to this:</p>
<div id="c7f1a663" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb1-2">notebook_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''from pyspark.sql import SparkSession</span></span>
<span id="cb1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">spark = SparkSession.builder.getOrCreate()</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">df = spark.table("blip.events")</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">df.show()</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">spark_table_regex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'spark[.]table[(][a-zA-Z0-9.\'\"]+[)]'</span></span>
<span id="cb1-10">new_table_call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark.table(</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">platform.blipraw.events</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb1-11">new_notebook_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(spark_table_regex, new_table_call, notebook_content)</span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(new_notebook_content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>from pyspark.sql import SparkSession
spark = SparkSession.builder.getOrCreate()

df = spark.table("platform.blipraw.events")
df.show()
</code></pre>
</div>
</div>
</section>
<section id="sec-challenge" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="sec-challenge"><span class="header-section-number">2.2</span> The size of the challenge</h2>
<p>It would be great if it was that simple, but unfortunately, it is not. What makes this problem so challenging is that the table reference used in <code>spark.table()</code> appears in too many different formats across the 130 thousand lines in our codebase. For example, we might use a <em>formatted string</em> to actually compute the table reference:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">database <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blip"</span></span>
<span id="cb3-2">table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"events"</span></span>
<span id="cb3-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.table(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>database<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>Or maybe, we call a variable that contains the computed reference:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">table_ref <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> database <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> table_name</span>
<span id="cb4-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.table(table_ref)</span></code></pre></div>
<p>These two examples demonstrates that too much variation exists in the use of a table reference. So much variation, that using multiple REGEX’s to solve this problem would be impractical, and probably too much complex.</p>
<p>Here is where the parser comes into place.</p>
</section>
</section>
<section id="introducing-the-parser" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Introducing the parser</h1>
<section id="what-is-a-parser" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="what-is-a-parser"><span class="header-section-number">3.1</span> What is a parser?</h2>
<p>Parsers (or the process of parsing expressions) are core components of every existing compiler, like <code>gcc</code> or <code>rustc</code>, as well as the R and Python compilers. In essence, a parser is a piece of software that analyzes expressions following the rules of a grammar. A parser is the main part of compilers responsible for analyzing and comprehend the structure of your source code.</p>
<p>The process of parsing is usually made in two steps, which are: 1) breaking (or “splitting”) the input expression into smaller pieces, building a list of tokens, or a list of small components; 2) analyzing this sequence of tokens to build a tree that is equivalent to the input expression. The first step above is usually made by a component called <em>lexer</em> or <em>tokenizer</em> (both names are commom to find), and the second step is made by the parser itself.</p>
<p>Basically, the process of parsing takes a string (which contains the expression, or the source code your want to parse) as input. Then, the lexer (or tokenizer) breaks the input string into smaller pieces, which are usually called <em>tokens</em>. Then, the parser receives this stream of tokens produced by the tokenizer as input, and starts to analyze this sequence of tokens, to understand the structure of the input expression (or source code). As output, the parser produces a tree that is equivalent to the input expression, which is usually called <em>abstract syntax tree</em> (or AST for short). Figure&nbsp;1 below exposes this process.</p>
<div id="fig-parser-pic" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-parser-pic-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-11-18-python-parser/parser-pic.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-parser-pic-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: The process of parsing
</figcaption>
</figure>
</div>
<p>So the process of parsing takes an expression as input, and builds a tree that is equivalent to that expression as output. This process of parsing is always one of the first operations that a compiler performs.</p>
<p>Because trees are a much more suitable and efficient data structure for the different tasks a compiler performs such as: type and syntax checking, evaluating the result of expressions and assignments, or compiling the input tree into machine code to be executed.</p>
<p>Probably, the most important data structures for every compiler are trees and stacks.</p>
</section>
<section id="sec-kind" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="sec-kind"><span class="header-section-number">3.2</span> What kind of expressions we want to parse?</h2>
<p>Just to be clear, we neither need (or want) to develop a complete parser capable of parsing every expression in the Python language. That would be a much larger task, that would involve a great amount of effort. We just want to build a small parser capable of parsing a very small and specific subset of Python expressions.</p>
<p>We are particularly interested in the expressions that are related to the table references that we find in our codebase. We already showed examples of these expressions at Section&nbsp;2 and Section&nbsp;2.2.</p>
<p>But just to state clearly, we want to build a parser capable of parsing:</p>
<ol type="1">
<li>expressions that involves only string constants (other types of constants or structures such as lists, integers, booleans are not important for us, so let’s ignore them). Example: <code>"platform.blipraw.events"</code>.</li>
<li>expressions that concatenate strings with the plus operator. Example: <code>"blip" + "." + "events"</code>.</li>
<li>expressions that contains identifiers (that is, variable names). Example: <code>database + "." + table_name</code>.</li>
<li>formatted strings which contain expressions that fit the above cases. Example: <code>f"{database}.{table_name}"</code>.</li>
</ol>
<p>Lets store these examples of expressions inside a list that we can easily access:</p>
<div id="91604672" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">EXPRESSION_EXAMPLES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'platform.blipraw.events'"</span>,</span>
<span id="cb5-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"blip" + "." + "events"'</span>,</span>
<span id="cb5-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database + </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> + table_name"</span>,</span>
<span id="cb5-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{database}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{table_name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'</span></span>
<span id="cb5-6">]</span></code></pre></div>
</div>
</section>
<section id="building-the-lexer-or-tokenizer" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="building-the-lexer-or-tokenizer"><span class="header-section-number">3.3</span> Building the Lexer (or Tokenizer)</h2>
<p>Lets begin by building a lexer (or tokenizer) for our parser. Just be aware that, from now on, I will use the term tokenizer instead of lexer (this is just a personal preference).</p>
<p>But how can we split our input string into small pieces? Well, there are different approaches to do this. However, one particular approach that fit’s perfectly our example here is to iterate through the characters of our input string, and look for single characters that represent “elegible break points”, or points where we can split the string.</p>
<p>This approach is probably the easiest of all to implement, and it fit’s perfectly our example here because we are interested in parsing just a very small subset of simple Python expressions. If we wanted to parse more complex expressions, then, it would probably be better to use another approach to break the input string.</p>
<p>So, the tokenizer will iterate through each character in the input string, and will mark any place that contains a single character the we interpret as an elegible place to break the string. Considering the type of expressions we stated at Section&nbsp;3.2, the characters <code>"</code>, <code>'</code>, <code>+</code>, <code>{</code>, <code>}</code> are good candidates for “elegible break points”. Also, the character <code>f</code> is important for identifying formatted strings, as a consequence, he is also a good candidate.</p>
<p>Let’s consider the following tokenizer:</p>
<div id="lst-tokenizer" class="python listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-tokenizer-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;3: The function that represents our tokenizer
</figcaption>
<div aria-describedby="lst-tokenizer-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-tokenizer" style="background: #f1f3f5;"><pre class="sourceCode code-annotation-code python code-with-copy"><code class="sourceCode python"><span id="lst-tokenizer-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="lst-tokenizer-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="lst-tokenizer-3"></span>
<span id="lst-tokenizer-4">is_not_blank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> re.search(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"^ +$"</span>, x)</span>
<span id="lst-tokenizer-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tokenizer(input_string: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="lst-tokenizer-6">    candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'}'</span>]</span>
<span id="lst-tokenizer-7">    break_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="lst-tokenizer-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(input_string)):</span>
<span id="lst-tokenizer-9">        current_char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_string[i]</span>
<span id="lst-tokenizer-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> current_char <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> candidates:</span>
<span id="lst-tokenizer-11">            break_points.append(i)</span>
<span id="lst-tokenizer-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> current_char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(input_string):</span>
<span id="lst-tokenizer-13">            next_char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_string[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="lst-tokenizer-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> next_char <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>]:</span>
<span id="lst-tokenizer-15">                break_points.append(i)</span>
<span id="lst-tokenizer-16"></span>
<span id="lst-tokenizer-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(break_points) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="lst-tokenizer-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [input_string]</span>
<span id="lst-tokenizer-19"></span>
<span id="lst-tokenizer-20">    tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="lst-tokenizer-21">    last_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="lst-tokenizer-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> break_points:</span>
<span id="lst-tokenizer-23">        tokens.append(input_string[last_index:index])</span>
<span id="lst-tokenizer-24">        tokens.append(input_string[index:(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="lst-tokenizer-25">        last_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="lst-tokenizer-26"></span>
<span id="lst-tokenizer-27">    tokens.append(input_string[last_index:])</span>
<span id="lst-tokenizer-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(is_not_blank, tokens))</span></code></pre></div>
</div>
</figure>
</div>
<ol type="1">
<li><p>If current character is <code>f</code> check if the next character is the beginning of a string (characters <code>"</code> and <code>'</code>), if it is the beginning of a string, then, it is a formatted string and should be included in the “break points”. If the next character is not the beginning of a string, then, we should not consider it as an elegible breakpoint, because it probably is just a letter “f” inside a variable name, such as <code>platform_database</code>.</p></li>
<li><p>If no break point position was found, then, the input expression is likely an expression with a single component. For example, a single string constant (e.g.&nbsp;<code>"blip.events"</code>) or a single variable name (<code>events_table</code>). In this case, the tokenizer should return this single component itself as the only token present in the input string.</p></li>
<li><p>Every iteration of the loop generates two different tokens, which are: 1) a token with the part of the string from the previous break point index until the current elegible break point index; 2) and another token containing the single character that identifies the current elegible breakpoint. For example, the text <code>database"</code> will generate the break point index <code>8</code>, so, in the first iteration of the loop, the tokens <code>'database'</code> and <code>'"'</code> will be generated.</p></li>
<li><p>Empty tokens (i.e.&nbsp;tokens that are empty strings, or, that contains only spaces) can be generated during the process. So we use <code>filter()</code> with a <code>lambda</code> function to eliminate them from the output.</p></li>
</ol>
<p>This <code>tokenizer()</code> function generates a list of tokens to be analyzed by the parser:</p>
<div id="3087c5da" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> example <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> EXPRESSION_EXAMPLES:</span>
<span id="cb6-2">    tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(example)</span>
<span id="cb6-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"================================================================"</span>)</span>
<span id="cb6-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  * Input expression: "</span>, example)</span>
<span id="cb6-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  * Tokens produced: "</span>, tokens)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>================================================================
  * Input expression:  'platform.blipraw.events'
  * Tokens produced:  ["'", 'platform.blipraw.events', "'"]
================================================================
  * Input expression:  "blip" + "." + "events"
  * Tokens produced:  ['"', 'blip', '"', '+', '"', '.', '"', '+', '"', 'events', '"']
================================================================
  * Input expression:  database + "." + table_name
  * Tokens produced:  ['database ', '+', '"', '.', '"', '+', ' table_name']
================================================================
  * Input expression:  f"{database}.{table_name}"
  * Tokens produced:  ['f', '"', '{', 'database', '}', '.', '{', 'table_name', '}', '"']</code></pre>
</div>
</div>
</section>
<section id="building-the-actual-parser" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="building-the-actual-parser"><span class="header-section-number">3.4</span> Building the actual parser</h2>
<p>Building the actual parser is definitely the hard part. Because a parser usually involves: 1) having a variable to store the current state of the parser, or, the current state of the AST; 2) and also some level of recursion to traverse the AST, or to decide which move or production rule should be applied. Making these two components working well together can be difficult depending on how you implement it.</p>
<section id="the-different-types-of-strategies" class="level3" data-number="3.4.1">
<h3 data-number="3.4.1" class="anchored" data-anchor-id="the-different-types-of-strategies"><span class="header-section-number">3.4.1</span> The different types of strategies</h3>
<p>Remember, the end goal of a parser, is to build an abstract syntax tree (AST) by analizing a sequence of tokens. There are different strategies to build this tree, and they are usually divided into two categories: 1) <em>top-down</em>. These are strategies that builds the tree from the root, and work they way to the bottom of the tree, which contains the “leaves of the tree”; 2) <em>bottom-up</em> (the inverse). These are strategies which starts to build the tree from the leaves, and work they way up until it hits the root of the tree.</p>
<p>In the subject of parsing, <em>top-down</em> strategies are the most popular (notice that this does not mean that <em>bottom-up</em> strategies are bad or not commom). The most popular strategy of all is the <em>Recursive Descent</em>, which is a <em>top-down</em> strategy. But I will not describe these strategy here, specially to avoid all the technical jargon that they bring with them. Anyway, just be aware that there are different strategies out there, and that in this article I’m only presenting one of them.</p>
</section>
<section id="the-smaller-components-of-a-parser" class="level3" data-number="3.4.2">
<h3 data-number="3.4.2" class="anchored" data-anchor-id="the-smaller-components-of-a-parser"><span class="header-section-number">3.4.2</span> The smaller components of a parser</h3>
<p>Every parser usually involves two smaller components: 1) a cache that holds the current state of the parser. This cache stores variables that are essential to the parsing process, such as the current state of the AST builded by the parser; 2) and a control (or “decision-making”) mechanism, which is usually a collection of methods or functions that decides which move the parser should make considering it’s current state (<span class="citation" data-cites="gries2008">Gries and Schneider (2008)</span>).</p>
<p>Some degree of recursion is found very frequently on some of these methods or functions that decides which move the parser should make. Although this recursion is not something mandatory, because there are some available strategies to build the AST that do not involves any recursion at all.</p>
</section>
<section id="the-cache-to-store-the-current-parsers-state" class="level3" data-number="3.4.3">
<h3 data-number="3.4.3" class="anchored" data-anchor-id="the-cache-to-store-the-current-parsers-state"><span class="header-section-number">3.4.3</span> The cache to store the current parser’s state</h3>
<p>Lets build a Python class to represent the cache of the parser. This <code>ParserCache</code> class will be responsible for storing all variables that are vital to the parsing process. These variables are:</p>
<ul>
<li><code>ast</code>: stores the current state of the AST.</li>
<li><code>tokens</code>: stores the full sequence of tokens that the parser needs to analyze.</li>
<li><code>index</code>: stores the index on the sequence of tokens that the parser is currently on.</li>
<li><code>token</code>: stores a copy of the current token that the parser is analyzing at the moment.</li>
</ul>
<p>It is not really vital to have the <code>token</code> variable, because we could easily access the current token by using <code>tokens[index]</code>. But… having a variable called <code>token</code> is easier to type, and it makes most of the parser’s code more readable, so, it is woth it.</p>
<p>While the parser is analyzing the sequence of tokens stored at the <code>tokens</code> variable, he will slowly grow (or complete) the AST, by replacing and adding elements to the <code>ast</code> variable. At the end, when the parser finishs the parsing process, the <code>ast</code> variable will store the complete AST that is equivalent to the input expression.</p>
<p>You can see below at the <code>__init__()</code> method that to initialize a new object of class <code>ParserCache</code>, you need to give the sequence of tokens to analyze as input. After that, all variables of the class are initialized, and you can start to use the two methods of the class, which are <code>len()</code>, <code>current_token()</code> and <code>next_token()</code>. The <code>len()</code> method returns the length of the tokens sequence that the parser is analyzing, <code>current_token()</code> method returns the current token that the parser is analyzing at the moment, and the <code>next_token()</code> method will effectively advance the parser to the next token in the sequence.</p>
<div id="9f13e297" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ParserCache:</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Class that represents a cache to store the current state of the parser.'''</span></span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tokens: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokens</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tokens) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb8-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokens[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index]</span>
<span id="cb8-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb8-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb8-12"></span>
<span id="cb8-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb8-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokens)</span>
<span id="cb8-15"></span>
<span id="cb8-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> current_token(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb8-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.token</span>
<span id="cb8-18"></span>
<span id="cb8-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> current_index(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb8-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index</span>
<span id="cb8-21"></span>
<span id="cb8-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> next_token(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokens):</span>
<span id="cb8-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokens[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index]</span>
<span id="cb8-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
</div>
</section>
<section id="the-main-function-or-entrypoint-for-the-parser" class="level3" data-number="3.4.4">
<h3 data-number="3.4.4" class="anchored" data-anchor-id="the-main-function-or-entrypoint-for-the-parser"><span class="header-section-number">3.4.4</span> The main function or entrypoint for the parser</h3>
<p>We need a main function for the parser, and that is the <code>parse()</code> function. In other words, this is the public API or the main entrypoint of the parser. That is the function that we should use to effectively parse any input and get the resulting AST.</p>
<p>You can see below that all of this function does is: get the input string; generate the tokens with <code>tokenizer()</code>; initialize the parser’s cache with these tokens; and then, it calls a private function called <code>_parse_input()</code> to initiate the parsing process.</p>
<p>Once <code>_parse_input()</code> is done with the parsing process, <code>parse()</code> gets the parsing results and simply return the complete AST produced, which is stored in the <code>ast</code> variable of the parser’s cache.</p>
<div id="78ce9e68" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dict, Any</span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parse(input_string: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]]:</span>
<span id="cb9-3">    tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(input_string)</span>
<span id="cb9-4">    parser_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ParserCache(tokens)</span>
<span id="cb9-5">    parsing_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_input(parser_cache)</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parsing_result.ast</span></code></pre></div>
</div>
</section>
<section id="building-the-main-logic-of-the-parser" class="level3" data-number="3.4.5">
<h3 data-number="3.4.5" class="anchored" data-anchor-id="building-the-main-logic-of-the-parser"><span class="header-section-number">3.4.5</span> Building the main logic of the parser</h3>
<p>The true magic starts with the private function <code>_parse_input()</code>. Basically, <code>_parse_input()</code> starts by looking at the current of token in the sequence that is being analyzed.</p>
<p>If this current token represents the beginning of a string (characters <code>"</code> and <code>'</code>), <code>_parse_string()</code> is called to effectively parse the next tokens in the sequence, which (very likely) are the contents of that string. If this current token is <code>f</code>, then, we have the beginning of a formatted string, so we just skip this <code>f</code> token with <code>parse_cache.next_token()</code>, and call <code>_parse_string()</code> to parse the formatted string. But if this token is a plus sign, then, he will call <code>_parse_addition()</code> to parse this token. If the current token is neither the beginning of a string or a plus sign, then, <code>_parse_input()</code> will assume that this current token is an identifier, and he will call <code>_parse_identifier()</code> to parse it.</p>
<p>Notice that all of these three parsing functions (<code>_parse_string()</code>, <code>_parse_addition()</code> and <code>_parse_identifier()</code>) returns the <code>ParserCache</code> object back as output. In other words, these functions receives the parser cache as input, they use this cache to parse the current token, and they add new elements (or replace the existing ones) to the AST, which is stored inside this cache object. Once they finished their businesses, they simply return this cache back as their output.</p>
<p>After we know that we parsed the current token, then, we ask the parser to advance to the next token, with <code>next_token()</code> method. Then, we check if there is really a next token in the sequence to parse/analyze, by checking if the current index is greater than the number of tokens in the sequence.</p>
<p>If there are still some remaining tokens in the sequence to analyze, then, <code>_parse_input()</code> will call itself recursively to parse the remaining tokens in the sequence. However, if there is not remaining tokens to analyze anymore, then, the function finally returns the parser cache (which contains the complete AST inside of the <code>ast</code> variable) as output.</p>
<div id="1b47fdea" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _parse_input(parser_cache: ParserCache) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ParserCache:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-8-2" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parser_cache.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="annotated-cell-8-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parser_cache</span>
<span id="annotated-cell-8-4"></span>
<span id="annotated-cell-8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parser_cache.current_token() <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>]:</span>
<span id="annotated-cell-8-6">        parser_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_string(parser_cache)</span>
<span id="annotated-cell-8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> parser_cache.current_token() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>:</span>
<span id="annotated-cell-8-8">        parser_cache.next_token()</span>
<span id="annotated-cell-8-9">        parser_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_string(parser_cache)</span>
<span id="annotated-cell-8-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> parser_cache.current_token() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>:</span>
<span id="annotated-cell-8-11">        parser_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_addition(parser_cache)</span>
<span id="annotated-cell-8-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="annotated-cell-8-13">        parser_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_identifier(parser_cache)</span>
<span id="annotated-cell-8-14"></span>
<span id="annotated-cell-8-15">    parser_cache.next_token()</span>
<span id="annotated-cell-8-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parser_cache.current_index() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> parser_cache.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="annotated-cell-8-17">        parser_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_input(parser_cache)</span>
<span id="annotated-cell-8-18"></span>
<span id="annotated-cell-8-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parser_cache</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="2" data-code-annotation="1">If the sequence of tokens is empty, then, we have no tokens to analyze, and the function should simply return right away.</span>
</dd>
</dl>
</div>
</div>
<p>Yes! I know what you are thinking. If the current token is neither the beginning of a string or a plus sign, then, he could be anything else. For example, he could be the beginning of a function call, or, a logic comparison, or it could be the beginning of an assignment expression. Anyway, it could be many things! So in theory, it is not safe to simply assume that it is an identifier.</p>
<p>However, you need to remember what we proposed at Section&nbsp;3.2. We want to parse only a very small subset of Python expressions. We do not want (or care) to parse other kinds of expressions. If you look at the expressions examples that fitted the description in Section&nbsp;3.2, you will see that the only components that appears in those expressions are identifiers, additions and string constants.</p>
<p>That is why we care only about these components. That is why, <strong>for this specific case</strong>, it is safe to assume that the last option has to be an identifier.</p>
</section>
<section id="parsing-identifiers" class="level3" data-number="3.4.6">
<h3 data-number="3.4.6" class="anchored" data-anchor-id="parsing-identifiers"><span class="header-section-number">3.4.6</span> Parsing identifiers</h3>
<p>Lets begin by discussing what the <code>_parse_identifier()</code> function should do. Because parsing an identifier component is by far the simplest of all three components. I mean… how would you parse an identifier? To answer this question, is probably best to think what an identifier is.</p>
<p>Well, an identifier is just a name to a variable, right? So, the value of an identifier object should be the identifier itself! In other words, the name of the variable is the identifier itself. So why not just simply add to the AST an object of type <code>IDENTIFIER</code> and the value of that object being the current token which is the identifier (or the variable name) itself? Right? That should be sufficient.</p>
<p>So we have the following body for <code>_parse_identifier()</code>:</p>
<div id="2895ea2c" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _parse_identifier(parser_cache: ParserCache) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ParserCache:</span>
<span id="cb10-2">    parser_cache.ast.append({</span>
<span id="cb10-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IDENTIFIER'</span>,</span>
<span id="cb10-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(parser_cache.current_token())</span>
<span id="cb10-5">    })</span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parser_cache</span></code></pre></div>
</div>
</section>
<section id="parsing-strings" class="level3" data-number="3.4.7">
<h3 data-number="3.4.7" class="anchored" data-anchor-id="parsing-strings"><span class="header-section-number">3.4.7</span> Parsing strings</h3>
<p>Now, things get worse when it is time to parse strings. Not because strings are complicated, but because we need to account for <em>formatted strings</em>. In other words, the string that we analyzing might contain expressions inside of it. And if it does have them, we need to parse these expressions in a separate process.</p>
<p>However, if you come back and look at the body of <code>_parse_input()</code> you will see that we call <code>_parse_string()</code> right after we encounter a <code>"</code> or <code>'</code> character. But we do not need to parse this single character exactly. We just know that these characters delimit the beginning of a string, so everything that goes after it should be tokens that together composes the actual content of the string. That is why, we start <code>_parse_string()</code> by calling the <code>next_token()</code> method, to skip this <code>"</code> or <code>'</code> character that we are not particularly interested in.</p>
<p>Now, after that, the next tokens in the sequence will very likely represent the contents of this string that we are currently parsing. So all we need to do, is to use a loop to iterate trough these next tokens and stop (or break) the loop in the moment that we hit a token that contains the <code>"</code> or <code>'</code> character, because these tokens will represent the end of the string.</p>
<p>We could use a stack to accumulate the tokens that represents the contents of the string while we are looping, and then, we analyze these tokens separately after we break the loop. Then, we could simply append to the AST a new object of type <code>STRING</code> containing this stack with all of the components of this string element. It would be a fair strategy. But it would also make the parsing of subexpressions inside of formatted strings harder.</p>
<p>As a result, I decided to opt for a placeholder strategy. Before we start to loop through the sequence of tokens that represents the contents of the string, we add a placeholder at the top level of the AST. At each iteration of the <code>while</code> loop we update the <code>value</code> field of this placeholder by adding the current token to it. By doing this, at the end of the <code>while</code> loop we will have a string object at the top of the AST, and its <code>value</code> field will contain the full/complete list of contents of that string.</p>
<p>Now… if we do find a opening bracket (<code>{</code>) inside the string, that likely means that the current string that we are analyzing now is a formatted string, and whatever sequence of tokens that is right after this opening bracket, they are a new expression to be parsed. That is why we call the <code>_parse_formatted_string()</code> in case we do find an opening bracket inside the string.</p>
<div id="3ef7343b" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="annotated-cell-10" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _parse_string(parser_cache: ParserCache) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ParserCache:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-10-2" class="code-annotation-target">    char_that_opens_the_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser_cache.current_token()</span>
<span id="annotated-cell-10-3">    parser_cache.next_token()</span>
<span id="annotated-cell-10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a placeholder in the top of the AST</span></span>
<span id="annotated-cell-10-5">    parser_cache.ast.append({</span>
<span id="annotated-cell-10-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STRING'</span>,</span>
<span id="annotated-cell-10-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="annotated-cell-10-8">    })</span>
<span id="annotated-cell-10-9"></span>
<span id="annotated-cell-10-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> parser_cache.current_index() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> parser_cache.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="annotated-cell-10-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parser_cache.current_token() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> char_that_opens_the_string:</span>
<span id="annotated-cell-10-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="annotated-cell-10-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parser_cache.current_token() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{'</span>:</span>
<span id="annotated-cell-10-14">            parser_cache.next_token()</span>
<span id="annotated-cell-10-15">            parser_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_formatted_string(parser_cache)</span>
<span id="annotated-cell-10-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="annotated-cell-10-17">        </span>
<span id="annotated-cell-10-18">        elem_ref <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser_cache.ast[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="annotated-cell-10-19">        elem_ref[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>].append(parser_cache.current_token())</span>
<span id="annotated-cell-10-20">        parser_cache.next_token()</span>
<span id="annotated-cell-10-21">    </span>
<span id="annotated-cell-10-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parser_cache</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="2" data-code-annotation="1">We copy the character (<code>'</code> or <code>"</code>) that openned the string that we are analyzing now, because then, we can search for a new occurence of this same character in the tokens sequence to detect the end of the string.</span>
</dd>
</dl>
</div>
</div>
<!-- 2. We add a placeholder at the top level of the AST. At each iteration of the `while` loop we update the `value` field of this placeholder by adding the current token to it. By doing this, at the end of the `while` loop we will have a string object at the top of the AST, and its `value` field will contain the full/complete list of contents of that string. -->
</section>
<section id="parsing-expressions-inside-formatted-strings" class="level3" data-number="3.4.8">
<h3 data-number="3.4.8" class="anchored" data-anchor-id="parsing-expressions-inside-formatted-strings"><span class="header-section-number">3.4.8</span> Parsing expressions inside <em>formatted strings</em></h3>
<p>We call <code>_parse_formatted_string()</code> if we find a <code>{</code> character inside sequence of tokens that are inside a string. Inside the pair of brackets (<code>{}</code>) we will always have an expression. And because this is a new expression, we need to parse it too, in a separate process.</p>
<p>First, we use a loop and a stack object to accumulate all the tokens in the sequence that are inside of the pair of brackets (<code>{}</code>). This way, we have inside the stack object all the tokens that represents the subexpression that is inside of the brackets that we need to parse.</p>
<div id="68a31cfe" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="annotated-cell-11" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _parse_formatted_string(parser_cache: ParserCache) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ParserCache:</span>
<span id="annotated-cell-11-2">    stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="annotated-cell-11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> parser_cache.current_index() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> parser_cache.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-11-4" class="code-annotation-target">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parser_cache.current_token() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'}'</span>:</span>
<span id="annotated-cell-11-5">            parser_cache.next_token()</span>
<span id="annotated-cell-11-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="annotated-cell-11-7">        stack.append(parser_cache.current_token())</span>
<span id="annotated-cell-11-8">        parser_cache.next_token()</span>
<span id="annotated-cell-11-9"></span>
<span id="annotated-cell-11-10">    parsed_subexpression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ParserCache(stack)</span>
<span id="annotated-cell-11-11">    parsed_subexpression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_input(parsed_subexpression)</span>
<span id="annotated-cell-11-12">    elem_ref <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser_cache.ast[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="annotated-cell-11-13">    elem_ref[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>].append({</span>
<span id="annotated-cell-11-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EXPR'</span>,</span>
<span id="annotated-cell-11-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: parsed_subexpression.ast</span>
<span id="annotated-cell-11-16">    })</span>
<span id="annotated-cell-11-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parser_cache</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-11" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="4" data-code-annotation="1">We break the loop, at the moment that we find a closing bracket in the sequence of tokens, because this character represents the end of the pair of brackets that contains the subexpression that we are analyzing.</span>
</dd>
</dl>
</div>
</div>
<p>After we accumulated the sequence of tokens that represents the subexpression that we are analyzing, we need to parse this subexpression separately. To do that, we create a new <code>ParserCache</code> object with this sequence of tokens that represents this subexpression, or, in other words, with all of the tokens that are between the openning and closing brackets. Then, we just call the <code>_parse_input()</code> over this expression to effectively parse this expression.</p>
<p>After that, we add to the top of the AST a new expression object (<code>EXPR</code>) that contains the AST of parsed subexpression inside of it.</p>
</section>
<section id="parsing-addition-operations" class="level3" data-number="3.4.9">
<h3 data-number="3.4.9" class="anchored" data-anchor-id="parsing-addition-operations"><span class="header-section-number">3.4.9</span> Parsing addition operations</h3>
<p>Now, things get a little bit more complicated when we find a plus sign in the middle of the sequence of tokens. Because if we do find a plus sign, that means that this plus sign is surrounded by operands in the original expression. In other words, this plus sign connects the left operand to the right operand of this addition operation.</p>
<p>In theory, the previous token in the sequence is the left operand of this addition, and the next token in the sequence is the right operand. That means that, just in theory, at the moment we find a plus sign in the sequence of tokens, we can collect the left operand of the addition operation by looking at the previous token, and, we could also collect the right operand by advancing the parser with <code>next_token()</code> and using <code>current_token()</code> to get the next token in the sequence.</p>
<section id="the-challenge" class="level4" data-number="3.4.9.1">
<h4 data-number="3.4.9.1" class="anchored" data-anchor-id="the-challenge"><span class="header-section-number">3.4.9.1</span> The challenge</h4>
<p>However, this is not really true, or, it would be too easy to be true. The real problem, is that the left and right operands could be splitten by the tokenizer into multiple tokens. In other words, there are very commom cases where single calls to <code>current_token()</code> would be insufficient to actually get the complete right or left operands.</p>
<p>That means that the tokenizer step might make the part of identifying where the left and right operands are in the sequence of tokens a difficult task. If you think about how the tokenizer works (see Listing&nbsp;3), you will probably be able to find examples where the left or right operands could be composed of multiple tokens, and not just a single token.</p>
<p>Take the expression <code>database + '.events'</code> as an example. Take a look at the tokenizer’s output over this expression. The left operand is the first token (<code>database</code>), but the right operand, is actually the three last tokens in the sequence (<code>['"', '.events', '"']</code>). This means that these three tokens together compose the right operand.</p>
<div id="7106a92e" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'database + ".events"'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['database ', '+', '"', '.events', '"']</code></pre>
</div>
</div>
<p>As a result, at the moment where the parser is at the plus sign, if we advance the parser with <code>next_token()</code>, and run <code>current_token()</code> we would get only the token <code>"</code>, so the right operand would be incomplete. How do we know that we need to accumulate the next three tokens instead of looking to just one token in the sequence?</p>
</section>
<section id="solving-the-issue-for-the-left-operand" class="level4" data-number="3.4.9.2">
<h4 data-number="3.4.9.2" class="anchored" data-anchor-id="solving-the-issue-for-the-left-operand"><span class="header-section-number">3.4.9.2</span> Solving the issue for the left operand</h4>
<p>For now, lets ignore the right operand and think about the left operand. The left operand is whatever sequence of tokens that are before the plus sign. But, as we saw in the previous section, in some cases, we might need to look 3, 4 or 5 tokens behind to actually get the full left operand, instead of looking at just 1 token behind.</p>
<p>But instead of looking at the previous tokens in the sequence, we could get the left operand by looking at the top of the AST. In other words, the last element in the AST is the previous token already parsed, and we can easily access this last element by calling <code>parser_cache.ast[-1]</code>.</p>
<p>Perfect, after we saved a copy of the left operand inside a <code>left_operand</code> variable, we can delete him from the AST in the parser cache, with <code>del parser_cache.ast[-1]</code>. If we do not delete him now, then, he would become duplicated in the AST at the moment that we add our object for the addition operation to the AST, which contains both left and right operands.</p>
<div id="45bd6c0f" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _parse_addition(parser_cache: ParserCache) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ParserCache:</span>
<span id="cb13-2">    left_operand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser_cache.ast[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> parser_cache.ast[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb13-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now that we managed the left operando, we will deal</span></span>
<span id="cb13-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with the right operand in the next section</span></span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parser_cache</span></code></pre></div>
</div>
</section>
<section id="solving-the-issue-for-the-right-operand" class="level4" data-number="3.4.9.3">
<h4 data-number="3.4.9.3" class="anchored" data-anchor-id="solving-the-issue-for-the-right-operand"><span class="header-section-number">3.4.9.3</span> Solving the issue for the right operand</h4>
<p>After we deleted the last element in the AST (which contained the left operand), we can now look for the right operand, which is whatever sequence of tokens that are after the plus sign.</p>
<p>But getting the right operand is unfortunately more complicated. Because of that, let’s concentrate the main logic of getting the right operand into a new separate function called <code>_parse_right_operand()</code>. After we get the right operand, we just return from <code>_parse_addition()</code> with an <code>ADDITION</code> object which contains both left and right operands.</p>
<div id="77e9b27b" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _parse_addition(parser_cache: ParserCache) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ParserCache:</span>
<span id="cb14-2">    left_operand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser_cache.ast[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb14-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> parser_cache.ast[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb14-4">    parser_cache.next_token()</span>
<span id="cb14-5">    right_operand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_right_operand(parser_cache)</span>
<span id="cb14-6">    parser_cache.ast.append({</span>
<span id="cb14-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ADDITION'</span>,</span>
<span id="cb14-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left_operand'</span>: left_operand,</span>
<span id="cb14-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right_operand'</span>: right_operand</span>
<span id="cb14-10">    })</span>
<span id="cb14-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parser_cache</span></code></pre></div>
</div>
<p>Now, what <code>_parse_right_operand()</code> should do? I think it should iterate through the sequence of tokens that is after the plus sign, parse this sequence of tokens and then, return the parsed AST of this sequence. That is basically what <code>_parse_right_operand()</code> is doing in the function definition below.</p>
<p>We start with a <code>while</code> loop which will use a new stack object to accumulate all the tokens after the plus sign. This loop stops in two situations:</p>
<ol type="1">
<li>If it hits the end of the stream of tokens that the parser is analyzing.</li>
<li>If it hits a new plus sign in the sequence of tokens, which basically means that, the loop found a new addition operation in the sequence of tokens.</li>
</ol>
<p>When the loop stops in situation 1, then, the stack object will contain all of the tokens that represents the right operand. Having that in mind, all we need to do is to create a new temporary <code>ParserCache</code> object with these tokens, and call <code>_parse_input()</code> over it to parse the right operand. Then, <code>_parse_right_operand()</code> will simply return the parsed AST from this operation.</p>
<p>In the other side, if the loop stops in situation 2, that means that, the right operand that we are currently trying to parse, is in fact, the left hand to a new addition operation. In other words, the tokens that we accumulated in the stack object until this very moment, are in fact, the tokens that represents the left operand of this new addition operation that we found.</p>
<p>At Figure&nbsp;2 we can see this idea visually. Everything that is marked by the light red rectangle is the left operand of that particular addition operation, and everything that is marked by the dark blue rectangle is the right operand of that particular addition operation.</p>
<div id="fig-addition" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-addition-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-11-18-python-parser/addition.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-addition-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Marking the right and left operands in each addition operation
</figcaption>
</figure>
</div>
<p>So, lets consider as an example, that the parser was parsing the expression <code>database + '.' + 'events'</code>. When <code>_parse_right_operand()</code> is parsing the right operand of the first addition (which is <code>'.'</code>), the function is looping through the sequence of tokens. The tokens <code>["'", '.', "'"]</code> are accumulated inside the stack object, until the loop hits the token <code>+</code>, which is second plus sign in the entire input expression. At this point the function understands that it hitted a new addition operation to be parsed.</p>
<p>That is why <code>_parse_right_operand()</code>, in this situation, will call itself recursively to parse the remaining tokens in the sequence, which are the right operand of this new/second addition it founded. The tokens that are accumulated in the stack object, are the left operand of this new/second addition, and they are parsed by <code>_parse_input()</code>.</p>
<p>So in this situation, to get the actual right operand of the first addition, <code>_parse_right_operand()</code> needs to parse this new/second addition operation that if founded. The right operand of the first addition, is the second addition in its entirety, or, you could also interpret that the right operand of the first addition is the second addition already parsed. That is why, in this situation, <code>_parse_right_operand()</code> will call both <code>_parse_input()</code> and itself recursively to parse the right and left operands of this new/second addition operation, and return the <code>ADDITION</code> object that represents this parsed new/second addition.</p>
<p>Having all of these aspects in mind, here is the source code for <code>_parse_right_operand()</code>:</p>
<div id="9f585493" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _parse_right_operand(parser_cache: ParserCache) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> ParserCache:</span>
<span id="cb15-2">    stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb15-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> parser_cache.current_index() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> parser_cache.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb15-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parser_cache.current_token() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>:</span>
<span id="cb15-5">            parser_cache.next_token()</span>
<span id="cb15-6">            second_addition_right_operand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_right_operand(parser_cache)</span>
<span id="cb15-7">            temp_parse_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ParserCache(stack)</span>
<span id="cb15-8">            second_addition_left_operand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_input(temp_parse_cache)</span>
<span id="cb15-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb15-10">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ADDITION'</span>,</span>
<span id="cb15-11">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left_operand'</span>: second_addition_left_operand.ast[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb15-12">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right_operand'</span>: second_addition_right_operand</span>
<span id="cb15-13">            }</span>
<span id="cb15-14"></span>
<span id="cb15-15">        stack.append(parser_cache.current_token())</span>
<span id="cb15-16">        parser_cache.next_token()</span>
<span id="cb15-17">    </span>
<span id="cb15-18">    temp_parse_cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ParserCache(stack)</span>
<span id="cb15-19">    parsed_right_operand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _parse_input(temp_parse_cache)</span>
<span id="cb15-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parsed_right_operand.ast[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="finally-the-parser-is-complete" class="level2" data-number="3.5">
<h2 data-number="3.5" class="anchored" data-anchor-id="finally-the-parser-is-complete"><span class="header-section-number">3.5</span> Finally! The parser is complete!</h2>
<p>Now our parser is finally complete! We can now test it, and see what AST’s are produced for each example of expressions we have:</p>
<div id="3dd8f2c3" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> example <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> EXPRESSION_EXAMPLES:</span>
<span id="cb16-2">    parsed_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(example)</span>
<span id="cb16-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"===================================="</span>)</span>
<span id="cb16-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  * Input expression: "</span>, example)</span>
<span id="cb16-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  * Parsed AST: "</span>, parsed_expr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>====================================
  * Input expression:  'platform.blipraw.events'
  * Parsed AST:  [{'type': 'STRING', 'value': ['platform.blipraw.events']}]
====================================
  * Input expression:  "blip" + "." + "events"
  * Parsed AST:  [{'type': 'ADDITION', 'left_operand': {'type': 'STRING', 'value': ['blip']}, 'right_operand': {'type': 'ADDITION', 'left_operand': {'type': 'STRING', 'value': ['.']}, 'right_operand': {'type': 'STRING', 'value': ['events']}}}]
====================================
  * Input expression:  database + "." + table_name
  * Parsed AST:  [{'type': 'ADDITION', 'left_operand': {'type': 'IDENTIFIER', 'value': 'database '}, 'right_operand': {'type': 'ADDITION', 'left_operand': {'type': 'STRING', 'value': ['.']}, 'right_operand': {'type': 'IDENTIFIER', 'value': ' table_name'}}}]
====================================
  * Input expression:  f"{database}.{table_name}"
  * Parsed AST:  [{'type': 'STRING', 'value': [{'type': 'EXPR', 'value': [{'type': 'IDENTIFIER', 'value': 'database'}]}, '.', {'type': 'EXPR', 'value': [{'type': 'IDENTIFIER', 'value': 'table_name'}]}]}]</code></pre>
</div>
</div>
<p>You can see in the above output, that parser I presented here produces an AST which is composed by a list of dict (or JSON) objects which describes the elements of the three. Now that we have this three, we might do a lot of different things with it. As I mentioned before, every compiler uses trees like this to do type checking, to identify dependencies of your source code, and also, to perform optimization processes.</p>
<p>But these operations are out of the scope of this article. Our objective here is complete, which was to show a basic example of a parser written in Python. If you want to take a closer look, you can see the full source code of the parser at <a href="./../parser.py"><code>parser.py</code></a>.</p>



</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-gries2008" class="csl-entry">
Gries, David, and Fred B. Schneider. 2008. <em>Parsing Techniques: A Practical Guide</em>. 2nd ed. Springer.
</div>
</div></section></div> ]]></description>
  <category>Python</category>
  <category>Parser</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-11-18-python-parser/en/</guid>
  <pubDate>Sat, 18 Nov 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-11-18-python-parser/image-pic.png" medium="image" type="image/png" height="51" width="144"/>
</item>
<item>
  <title>A small example on how to make better decisions with data</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>This article describes a real-world situation where me and my team used data to convince our client (which is one of the biggest companies in the brazilian financial market) at the time to make a better decision. Special thanks to <a href="https://www.linkedin.com/in/guilhermeggarcia/">Guilherme Goes</a> and <a href="https://www.linkedin.com/in/paulo-gon-oli/">Paulo Gonçalves</a>. They both help me to present these ideas and insights to our client.</p>
<p>In essence, <strong>making decisions is hard</strong>. But you always make a better decision when you have data to guide you into a safer and better outcome. When you do not have data to back you up, you are basically in the dark. That is, you make the decision, but you do not know upfront what are the possible outcomes of that decision. You just hope for the best, and this is always a hard position to be in.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>All data, graphs and images indicated in this article are for illustrative purposes only. Therefore, they do not represent the real data of Blip or the bank involved in any shape or form!</p>
</div>
</div>
</section>
<section id="a-data-analyst-should-focus-on-understanding-the-business" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> A Data Analyst should focus on understanding the business</h1>
<p>You will probably notice that a big part of this article is dedicated to give you context and explain the business behind this example.</p>
<p>This is intentional! Because, one of the real values of this article is to show that we come up with a good proposal to our client, because we understood his business, and we raised some good hypothesis about this business, and by analyzing these hypothesis we come up with a good new strategy.</p>
<p>If you do not understand the business you are analyzing, is less likely that you will come up with a good strategy, or, a good data analysis. In other words, by having a good understanding of the business, you will likely have much better ideas on “how” to analyze the data you have.</p>
</section>
<section id="context" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Context</h1>
<p>In essence, our client was a big brazilian bank, one of the largest in the market. The bank was using our digital plataform to sell different products and services through <a href="https://www.whatsapp.com/">WhatsApp</a>. Our job was to analyze the data generated by the platform to understand how the bank could increase their sales inside this channel.</p>
<section id="the-secured-loan-product" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="the-secured-loan-product"><span class="header-section-number">3.1</span> The secured loan product</h2>
<p>A secured loan was one of several products offered by the bank on WhatsApp. To acquire this product, the user needed to answer several questions, and also, fit into some criterias.</p>
<p>Depending on the type of industry you work in, you might call this as the <em>sales flow</em>, or, the <em>sales path</em>, which is the path (or the steps) that the user needs to follow to acquire the product you are selling.</p>
<p>Most companies want to make this path as short as possible so that the user gets to the product faster. However, we are talking about a loan, so the bank certainly needs a lot of personal and financial information about the user before it gives the loan.</p>
<p>So in this example, the user needed to answer a considerable amount of questions through WhatsApp to get to the final step of the sales path, that is, to acquire the loan.</p>
<p>Most of these questions were asking for some personal information, to check whether this particular user fitted or not into some important criterias. Most of these criterias were very standard for any type of loan, like… the person should not have any legal debts with the government. Some other criterias were purelly financial and assets related, and were also a very commom practice among banks, like… the person needs to be fully employed, he/she needs to have a car which is fully paid, and, this car needs to be a personal property of the person, i.e.&nbsp;it cannot be a borrowed car from another person.</p>
</section>
<section id="the-weird-criteria" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="the-weird-criteria"><span class="header-section-number">3.2</span> The weird criteria</h2>
<p>But one of the many criterias was a bit strange for us. Identify the exact criteria is not important for the content of this article. Let’s just say that, to be elegible for this loan, <strong>the user needed to be elegible to three different modalities</strong>.</p>
<p>Each modality corresponded to a different type of loan. If the user was not elegible to all of these three modalities (or types of loan), then, we would automatically rejected the user’s request for the loan.</p>
<p>In essence, we had a flow that worked a bit like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/flow-extended.png" class="img-fluid figure-img"></p>
<figcaption>A small representation of the sales path</figcaption>
</figure>
</div>
<p>Every time a user entered our flow, we collected the social ID of this user. Because with this social ID we can use the API to check multiple informations about this person. One of the many things we checked, was whether or not this user was elegible or not to these three modalities of loan.</p>
</section>
<section id="why-this-was-weird" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="why-this-was-weird"><span class="header-section-number">3.3</span> Why this was weird?</h2>
<p>This was a weird criteria, because… if an user called “Ana” is elegible to modality A, then, why not offer a loan of modality A to “Ana” ? As another example, if an user “Mike” is elegible to both modalities A and B, then, why not offer both of these modalities (A and B) to him? Let the user get whatever type of loan he is elegible to, right?</p>
<p>Why only users that are elegible to all three modalities (A, B and C) get to decide which loan they want to get? In our head, this criteria did not made much sense, because if an user is elegible to one modality of loan, he should be able to get a loan on this modality he is elegible to.</p>
</section>
<section id="why-this-criteria-existed" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="why-this-criteria-existed"><span class="header-section-number">3.4</span> Why this criteria existed?</h2>
<p>But let’s face it. Despite this being a weird criteria, there certainly is a reason for it. Nothing exists without a reason. We thought this weird criteria probably existed either because:</p>
<ol type="1">
<li>a MVP strategy.</li>
<li>or a “risk trade-off” strategy.</li>
</ol>
<p>The MVP strategy means that the bank included this weird criteria because it greatly simplified the development of the sales path. By simplifying the development, the bank could deliver a MVP (minimal viable product) as fast as possible, and, as a consequence, he could make a profit out of it faster.</p>
<p>On the other side, the “risk trade-off” means that the bank included this weird criteria, because it probably estimated that the risk is considerably higher for people that are not elegible to all three modalities. If the estimated risk is higher, then, the bank have a good reason to not offer this loan to people that are elegible to only one or two modalities.</p>
<p>Banks are constantly facing a trade-off between risk and profit. In other words, a secured loan like this is always a good profit opportunity. However, this profit opportunity always come at a cost, mostly in the form of risk.</p>
<p>That is why banks are usually very good at analysing and estimating risks. When a person looks to acquire a loan, the bank starts to analyze several factors in order to estimate how much risky is to give a loan to this person.</p>
</section>
</section>
<section id="what-we-discovered" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> What we discovered</h1>
<p>Regardless of which of the above options was the exact bank’s strategy, we had the hypothesis that this business rule (or this “weird criteria”) was severely affecting the sales result.</p>
<p>We created this hypothesis, because we notice a big loss of users at the step in the sales path where we do all the multiple validations through the API, checking wether the user fitted or not all the criterias and business rules.</p>
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/funnel-chart.png" class="img-fluid"></p>
<p>We did not know which specific criteria of the many was the real source of this loss. But we suspected that the “elegible to all 3 modalities” was this problematic criteria.</p>
<p>In other words, we suspected that this strategy of rejecting users that did not had all three modalities was not worth it, despite of what decisions the bank actually made to include this criteria into the sales path. But we needed to confirm this hypothesis.</p>
<p>Since we had the data returned from the API, we could potentially identify which users did have the three modalities, and which did not have. So I setted up a simple R script to collect the data of each user that visited our sales path in the last month from the API, and I putted this script to run through the night.</p>
<p>In the next day, I had all of the data locally, which looked a bit like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-2">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"username"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ana"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"socialid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12212212212"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_analysis"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:{</span></span>
<span id="cb1-6">         <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_modalities_elegible_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-8">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-9">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-10">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"username"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mike"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-11">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"socialid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"13313313313"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-12">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_analysis"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:{</span></span>
<span id="cb1-13">         <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_modalities_elegible_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb1-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-15">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-16">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-17">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"username"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arthur"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-18">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"socialid"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"14414414414"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_analysis"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:{</span></span>
<span id="cb1-20">         <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_modalities_elegible_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-23"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>We then started to analyze this data, investigating the metadata of each user, and potentially measuring the size of the hole that this business rule was creating.</p>
<p>As a result, we discovered that the bank was constantly <strong>losing a huge opportunity</strong> because of this weird criteria, or, this specific business rule. Doing some basic math, we identified that <strong>67% of the users that visited our channel were not elegible to all three modalities</strong>. This means that 67% of the users that entered our channel were automatically rejected. We were constantly losing a huge chunk of potential leads because they did not fitted into this criteria.</p>
<p>So, for example, if 13,000 users entered our channel, only (1 - 0.67) x 13,000 = 4,290 of these users could potentially finish the path and acquire the loan. The remaining 8,710 users were automatically lost. They were just rejected because they did not had these three modalities.</p>
<p>This discovery generated some important possibilities for us:</p>
<ul>
<li>Are we reaching the right audience?</li>
<li>Maybe we should focus in attract only people that do have the three modalities to our channel?</li>
<li>Is this criteria or business-rule worth it?</li>
</ul>
</section>
<section id="using-data-to-get-a-better-outcome" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Using data to get a better outcome</h1>
<p>Our job was to use the data we collected, to show the bank that the potential gains of selling different types of loans to these users that did not had the three modalities, were much higher than the potential risk they offered, or than the effort to develop some improvements over the sales path to use the new strategy.</p>
<p>By using data, we can show the bank (in numbers) the size of the opportunity they were losing. And that is exactly what we did. Our argument was basically divided into two separate parts:</p>
<ol type="1">
<li>The size of the lost;</li>
<li>The size of the potential gain;</li>
</ol>
<p>The first part of our presentation focused on the 67% number. We shown the bank that 67% of the users (which is a huge number) were constantly rejected in the flow. But this number alone does not have much flavor. As long as they are maximizing their profit, the bank does not care if he is saying “no” to 60%, 70%, 80% of the users or whatever.</p>
<p>That is why in the second part, we did some more basic math to estimate the potential gains they were losing by not selling to this 67% of users.</p>
</section>
<section id="the-new-strategy" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> The new strategy</h1>
<p>A quick recap. Each individual user that entered inside our sales path, wants to get a loan. But, this user needed to be elegible to three different types of loan to actually acquire the loan he wanted through our channel.</p>
<p>But, what if we change the sales path, so that:</p>
<ul>
<li>An user does not need to be elegible to all three modalities to acquire a loan;</li>
<li>If an user is elegible to one modality, then, we should offer a loan of this modality he is elegible to;</li>
<li>If an user is elegible to more than one modality, then, we should offer multiple options of loans for the user, one for each modality he is elegible to;</li>
</ul>
<p>Using the same API data that we used to get to the 67% number, we estimated that, if we changed the sales path so that it would fit the descriptions above, then, we would increase the users coverage to 96.8%! This means that we could sell a loan to 96.8% of the users that entered our sales path, instead of only 33%.</p>
<p>Now, if you are thinking that 33% + 67% should be equal to 100% instead, you are forgetting that the user needs to fit into some other criterias that I did not mentioned here. In other words, 96.8 - 100 = 3.2% of users would still be rejected because they did not fit into other necessary criterias.</p>
</section>
<section id="the-end-result" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> The end result</h1>
<p>The time and effort necessary to develop this new strategy into the sales path was relatively low, and the potential gains of it were quite high! By increasing the users coverage from 33% to 96.8%, we estimated that the sales could have a potential 193% increase. Spoiler! This estimate was way low compared to the end result we got. But that is what estimates are right? They are just estimates.</p>
<p>So the bank was very happy with the proposal. The managers quickly accepted the idea. A low effort for a potentail high gain.</p>
<p>If you think about it, this new strategy we come up with was very simple. It just provided more options to the users that did not fitted into the ideal scenario for the bank. But despite it being simple, we wroted a very short, clear and effective proposal (it was just 4 slides basically). We showed the size of the hole to the bank, and we showed the size of the opportunity we could get if we implemented our new strategy, and we also showed that this new strategy was relatively easy and quick to implement.</p>
<p>However, the end result was enormous. On the first month after we implemented this new strategy on production, the sales increased approximately 142%, and on the second month, 400%. The sales of this specific loan have a strong seasonal component to it, that is why you have such a big variation from 142% to 400%. But nevertheless, this demonstrates the positive impact of our new strategy. This end result of <strong>400% sales increase</strong> from our proposal was humongous.</p>
</section>
<section id="conclusion" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Conclusion</h1>
<p>We identified a weird criteria that our client included on the sales path. We raised some simple hypothesis about this weird criteria, and we used data to confirm or test this hypothesis.</p>
<p>By analysing this data, we identified a huge opportunity for our client. We then builded a simple presentation with a proposal to our client, with the numbers that we calculated from the data analysis that did.</p>
<p>At the end, this proposal was a huge success for our team, and for our client too that got a huge sales increase after we implemented the improvements that we proposed.</p>


</section>

 ]]></description>
  <category>Data Storytelling</category>
  <category>Data Science</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/en/</guid>
  <pubDate>Sat, 28 Oct 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/decision.avif" medium="image" type="image/avif"/>
</item>
<item>
  <title>Um pequeno exemplo sobre como utilizar dados para tomar melhores decisões</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/pt/</link>
  <description><![CDATA[ 





<section id="introdução" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introdução</h1>
<p>Este artigo descreve um exemplo real em que eu e meu time usamos dados para convencer o nosso cliente na época (que é um dos maiores bancos do mercado brasileiro) a tomar uma melhor decisão. Agradecimentos especiais ao <a href="https://www.linkedin.com/in/guilhermeggarcia/">Guilherme Goes</a> e ao <a href="https://www.linkedin.com/in/paulo-gon-oli/">Paulo Gonçalves</a>. Ambos me ajudaram a montar e apresentar essas ideias e <em>insigths</em> para o nosso cliente.</p>
<p>Em resumo, <strong>tomar decisões é difícil</strong>. Mas você sempre toma uma decisão melhor quando você tem dados para guiá-lo em direção a um resultado melhor e mais seguro. Quando você não tem dados para te defender, você está basicamente no escuro. Ou seja, você toma a decisão, mas não sabe antecipadamente quais são os possíveis resultados dessa decisão. Você apenas espera o melhor, e esta é sempre uma posição difícil de se estar.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Todos os dados, gráficos e imagens mostrados neste artigo são meramente ilustrativos. Portanto, eles não representam os dados reais de Blip ou do banco envolvido de nenhuma forma ou dimensão!</p>
</div>
</div>
</section>
<section id="um-analista-de-dados-deveria-focar-em-entender-o-negócio" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Um analista de dados deveria focar em entender o negócio</h1>
<p>Você provavelmente vai notar que grande parte deste artigo é dedicado a contextualizar e explicar o negócio por trás deste exemplo.</p>
<p>Isso é intencional! Porque, um dos reais valores deste artigo é mostrar que chegamos a uma boa proposta para o nosso cliente, porque nós entendemos o negócio desse cliente, e levantamos algumas hipóteses boas sobre esse negócio, e ao analisarmos essas hipóteses nós conseguimos chegar a uma boa nova estratégia.</p>
<p>Se você não entende o negócio que está analisando, é menos provável que você encontre uma boa estratégia ou uma boa análise de dados. Em outras palavras, ao ter um bom entendimento do negócio, você provavelmente terá ideias muito melhores sobre “como” analisar os dados que possui.</p>
</section>
<section id="contexto" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Contexto</h1>
<p>Em resumo, o nosso cliente era um grande banco brasileiro, um dos maiores do mercado. O banco estava utilizando nossa plataforma digital para vender diversos produtos e serviços pelo <a href="https://www.whatsapp.com/">WhatsApp</a>. Nosso trabalho foi analisar os dados gerados pela plataforma para entender como o banco poderia aumentar suas vendas dentro deste canal.</p>
<section id="o-produto-de-empréstimo-com-garantia" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="o-produto-de-empréstimo-com-garantia"><span class="header-section-number">3.1</span> O produto de empréstimo com garantia</h2>
<p>O empréstimo com garantia era um dos diversos produtos oferecidos pelo banco no WhatsApp. Para adquirir este produto, o usuário precisava responder diversas perguntas, e também, se enquadrar em alguns critérios.</p>
<p>Dependendo do tipo de setor em que você atua, você pode chamar isso de “fluxo de vendas”, ou “caminho de vendas”, que nada mais é do que o caminho (ou as etapas) que o usuário precisa seguir para adquirir o produto que você está vendendo.</p>
<p>A maioria das empresas deseja tornar esse caminho o mais curto possível para que o usuário chegue ao produto com mais rapidez. Porém, estamos falando de um empréstimo, então o banco certamente precisa de muitas informações pessoais e financeiras do usuário antes de conceder o empréstimo.</p>
<p>Ou seja, neste exemplo, o usuário precisava responder uma quantidade considerável de perguntas pelo WhatsApp para chegar à etapa final do caminho de vendas para adquirir o empréstimo.</p>
<p>A maioria dessas perguntas solicitava algumas informações pessoais, para verificar se esse usuário específico se enquadrava ou não em alguns critérios importantes. A maioria desses critérios eram bastante comuns (ou o <em>standard</em>) para qualquer tipo de empréstimo. Por exemplo, a pessoa não deveria ter nenhuma dívida legal com o governo. Alguns outros critérios eram puramente financeiros e patrimoniais, e também eram uma prática muito comum entre os bancos, como… a pessoa precisa estar totalmente empregada, precisa ter um carro totalmente pago, e, esse carro precisa ser uma propriedade pessoal da pessoa, ou seja, não poderia ser um carro emprestado de outra pessoa.</p>
</section>
<section id="um-critério-estranho" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="um-critério-estranho"><span class="header-section-number">3.2</span> Um critério estranho</h2>
<p>Porém um dos vários critérios era um pouco estranho para nós. Identificar exatamente qual critério era esse não é importante para o conteúdo deste artigo. Portanto, vamos dizer apenas que, para que um usuário consiga adquirir esse empréstimo, <strong>ele precisava necessariamente ser elegível para três modalidades diferentes</strong>.</p>
<p>Cada modalidade correspondia a um tipo diferente de empréstimo. Se o usuário não fosse elegível a todas essas três modalidades (ou tipos de empréstimo), nós automaticamente rejeitamos a solicitação de empréstimo desse usuário.</p>
<p>Em essência, tínhamos um fluxo que funcionava mais ou menos assim:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/flow-pt.png" class="img-fluid figure-img"></p>
<figcaption>Uma pequena representação do fluxo de vendas</figcaption>
</figure>
</div>
<p>Cada vez que um usuário entrava em nosso fluxo, nós coletamos o CPF desse usuário. Pois com esse CPF podemos usar a API para verificar múltiplas informações sobre essa pessoa de uma vez só. Uma das muitas coisas que nós verificávamos nessa chamada de API, era se esse usuário se encaixava no critério estranho que descrevemos. Isto é, nós conferíamos se esse usuário era elegível ou não às três modalidades de empréstimo.</p>
</section>
<section id="por-que-esse-critério-era-estranho" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="por-que-esse-critério-era-estranho"><span class="header-section-number">3.3</span> Por que esse critério era estranho?</h2>
<p>Na nossa cabeça, este era um critério muito estranho, porque… se uma usuária chamada “Ana” por exemplo for elegível para a modalidade A, então, por que não oferecer um empréstimo da modalidade A para a “Ana”? Como um outro exemplo, se um o usuário “Mike” é elegível para ambas as modalidades A e B, então por que não oferecer ambas as modalidades (A e B) para ele? Ou seja, por que não oferecer ao usuário qualquer tipo de empréstimo ao qual ele é elegível?</p>
<p>Por que apenas usuários que são elegíveis para todas as três modalidades (A, B e C) podem adquirir o empréstimo? Na nossa cabeça esse critério não fazia muito sentido, pois se um usuário for elegível a uma modalidade de empréstimo, ele deveria ser capaz de obter um empréstimo nesta modalidade ao qual ele tem direito.</p>
</section>
<section id="por-que-esse-critério-existia" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="por-que-esse-critério-existia"><span class="header-section-number">3.4</span> Por que esse critério existia?</h2>
<p>Mas vamos encara um fato. Apesar de este ser um critério estranho, certamente existe uma razão para ele existir. Nada existe sem uma razão. Nós imaginamos que esse critério estranho existia provavelmente por causa de:</p>
<ol type="1">
<li>uma estratégia MVP.</li>
<li>ou de uma estratégia de risco, em outras palavras, por causa de um <em>trade-off</em>.</li>
</ol>
<p>Uma estratégia MVP significa que o banco decidiu incluir esse critério estranho porque incluí-lo reduziria muito a complexidade do desenvolvimento do fluxo de vendas, e, portanto, ao simplificar o desenvolvimento, o banco poderia entregar um MVP (<em>minimal viable product</em>, ou, produto mínimo viável) o mais rápido possível e, como consequência, ele poderia começar a lucrar com esse produto mais rapidamente.</p>
<p>Por outro lado, uma estratégia de risco significa que o banco decidiu incluir este critério estranho, porque ele provavelmente estimou que o risco é consideravelmente maior para pessoas que não são elegíveis para as três modalidades. Se o risco estimado for muito alto, então o banco tem um bom motivo para não oferecer esse empréstimo a pessoas que são elegíveis a apenas uma ou duas modalidades diferentes.</p>
<p>Os bancos enfrentam constantemente uma escolha (ou uma balança) entre risco e lucro. Ou seja, um empréstimo de qualquer tipo é sempre uma boa oportunidade de lucro para o banco. No entanto, esta oportunidade de lucro tem sempre um custo atrelado a ela. Esse custo aparece principalmente na forma de risco para o banco.</p>
<p>É por isso que os bancos são normalmente muito bons em analisar e estimar riscos. Quando uma pessoa busca adquirir um empréstimo, o banco passa a analisar diversos fatores para estimar o quanto arriscado é conceder um empréstimo a essa pessoa.</p>
</section>
</section>
<section id="o-que-nós-descobrimos" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> O que nós descobrimos</h1>
<p>Independentemente de qual das opções acima tenha sido realmente a estratégia exata adotada pelo banco, nós tínhamos a hipótese de que esta regra de negócio (ou este “critério estranho”) estava afetando severamente o resultado das vendas.</p>
<p>Criamos essa hipótese, pois nós percebemos uma grande perda de usuários na etapa do fluxo de vendas onde fazemos todas as múltiplas validações através da API, verificando se o usuário se enquadrava ou não em todos os critérios e regras de negócio.</p>
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/funnel-chart-pt.png" class="img-fluid"></p>
<p>Nós não sabíamos qual dos muitos critérios específicos era a verdadeira fonte desta perda. Mas nós tínhamos a suspeita de que o critério “elegível para todas as 3 modalidades” era o critério problemático que gerava essa enorme perda.</p>
<p>Em outras palavras, nós suspeitamos que essa estratégia de rejeitar usuários que não possuíam as três modalidades não valia a pena, independente de quais decisões o banco tenha realmente tomado para incluir esse critério no fluxo de vendas. Mas precisávamos confirmar esta hipótese.</p>
<p>Nós tínhamos acesso aos dados retornados pela API (a que usamos para puxar várias informações do usuário), e com esses dados, nós poderíamos potencialmente identificar quais usuários possuíam as três modalidades e quais não possuíam. Então eu montei um script de R simples para coletar através da API os dados de cada usuário que visitou o nosso fluxo de vendas no último mês, e coloquei esse script para rodar durante a noite.</p>
<p>No dia seguinte, eu tinha todos os dados localmente na minha máquina, que tinham um formato parecido com esse:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-2">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"username"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ana"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cpf"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12212212212"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_analysis"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:{</span></span>
<span id="cb1-6">         <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_modalities_elegible_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-8">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-9">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-10">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"username"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mike"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-11">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cpf"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"13313313313"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-12">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_analysis"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:{</span></span>
<span id="cb1-13">         <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_modalities_elegible_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb1-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-15">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-16">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-17">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"username"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arthur"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-18">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cpf"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"14414414414"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_analysis"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:{</span></span>
<span id="cb1-20">         <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loan_modalities_elegible_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-23"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>Começamos então a analisar esses dados, investigando os metadados de cada usuário e potencialmente medindo o tamanho do buraco que essa regra de negócio estava criando.</p>
<p>Como resultado, descobrimos que o banco estava constantemente <strong>perdendo uma grande oportunidade</strong> por causa desse critério estranho, ou, dessa regra de negócio específica. Fazendo algumas contas básicas, identificamos que <strong>67% dos usuários que visitaram nosso canal não eram elegíveis às três modalidades</strong>. Isso significa que 67% dos usuários que entravam em nosso canal eram automaticamente rejeitados. Estávamos constantemente perdendo uma grande quantidade de potenciais <em>leads</em> porque eles não se enquadravam nesse critério.</p>
<p>Tendo isso em mente, por exemplo, se 13.000 usuários entrassem em nosso canal, apenas (1 - 0,67) x 13.000 = 4.290 desses usuários poderiam potencialmente terminar o fluxo e adquirir o empréstimo. Os 8.710 usuários restantes eram automaticamente perdidos. Eles eram rejeitados porque não tinham essas três modalidades.</p>
<p>Essa descoberta gerou algumas possibilidades importantes para nós:</p>
<ul>
<li>Estamos alcançando o público certo?</li>
<li>Talvez devêssemos focar em atrair apenas pessoas que possuem as três modalidades para o nosso canal?</li>
<li>Este critério ou regra de negócio vale a pena?</li>
</ul>
</section>
<section id="usando-dados-para-atingir-um-resultado-melhor" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Usando dados para atingir um resultado melhor</h1>
<p>Nosso trabalho foi usar os dados que coletamos da API para mostrar ao banco que, os ganhos potenciais de vendermos diferentes tipos de empréstimos para esses usuários que não tinham as três modalidades eram muito maiores do que o risco que esses usuários ofereciam, ou muito maiores que o esforço necessário para desenvolver essa nova estratégia de vendas no fluxo.</p>
<p>Ou seja, usando dados, nós podiamos mostrar ao banco (em números) o tamanho da oportunidade que ele estava perdendo. E foi exatamente isso que fizemos. Nosso argumento foi basicamente dividido em duas partes distintas:</p>
<ol type="1">
<li>o tamanho do buraco, ou da perda que estávamos tendo;</li>
<li>o tamanho do ganho potencial que poderíamos ter.</li>
</ol>
<p>A primeira parte da nossa apresentação estava focada nos 67%. Nós mostramos ao banco que 67% dos usuários (que é um número enorme) eram constantemente rejeitados no fluxo. Mas este número por si só não tem muito significado. Desde que o banco esteja maximizando o seu lucro, ele não se importa se ele está recusando 60%, 70%, ou 80% dos usuários.</p>
<p>É por isso que na segunda parte da apresentação fizemos algumas contas básicas para estimar os ganhos potenciais que eles estavam perdendo por não venderem para esses 67% de usuários.</p>
</section>
<section id="a-nova-estratégia-de-vendas" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> A nova estratégia de vendas</h1>
<p>Uma rápida recapitulação. Cada usuário que entrava no nosso fluxo de vendas desejava obter um empréstimo. Porém, esse usuário precisava ser elegível a três tipos diferentes de empréstimo para realmente ser capaz de adquirir o empréstimo que desejava por meio do nosso canal.</p>
<p>Mas, e se mudarmos esse fluxo de vendas, para que:</p>
<ul>
<li>O usuário não precise ser elegível às três modalidades para adquirir um empréstimo;</li>
<li>Se um usuário for elegível a uma modalidade específica, então devemos oferecer um empréstimo dessa modalidade a que ele é elegível;</li>
<li>Caso um usuário seja elegível a mais de uma modalidade, então, devemos oferecer múltiplas opções de empréstimos para ele, uma para cada modalidade a que ele é elegível;</li>
</ul>
<p>Usando os mesmos dados da API que usamos para chegar aos 67%, nós também estimamos que, se alterássemos o fluxo de vendas para que ele se ajustasse às condições acima, aumentaríamos a cobertura de usuários para 96,8%! Isto significa que poderíamos vender um empréstimo a 96,8% dos usuários que entrassem no nosso fluxo de vendas, em vez de apenas 33%.</p>
<p>Caso você esteja pensando que 33% + 67% deveria ser igual a 100%, você está se esquecendo de que o usuário precisa se enquadrar em alguns outros critérios que não mencionei aqui. Ou seja, 96,8 - 100 = 3,2% dos usuários ainda seriam rejeitados por não se enquadrarem em outros critérios necessários.</p>
</section>
<section id="o-resultado-final" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> O resultado final</h1>
<p>O tempo e o esforço necessários para desenvolver esta nova estratégia no fluxo de vendas eram relativamente baixos e os ganhos potenciais dela eram bastante elevados! Ao aumentar a cobertura de usuários de 33% para 96,8%, estimamos que as vendas poderiam ter um aumento potencial de 193%. Spoiler! Essa estimativa foi muito baixa em comparação com o resultado final que obtivemos. Mas é assim que estimativas funcionam, não é mesmo? São apenas estimativas.</p>
<p>Então os gerentes do banco ficaram muito felizes com a proposta. Os gestores rapidamente aceitaram a ideia. Um baixo esforço para um ganho potencial alto.</p>
<p>Se você pensar sobre, essa nova estratégia que criamos era muito simples. Ela apenas incluía mais opções para os usuários que não se enquadravam no cenário ideal do banco. Mas apesar dessa estratégia ser simples, nós escrevemos uma proposta bem curta, clara e eficaz (eram basicamente apenas 4 slides). Nós mostramos o tamanho do buraco ao banco e também mostramos o tamanho da oportunidade que poderíamos obter se implementássemos essa nossa nova estratégia, e também mostrámos que esta nova estratégia era relativamente fácil e rápida de ser implementada no fluxo.</p>
<p>No entanto, o resultado final foi enorme. No primeiro mês após implementarmos esta nova estratégia no ambiente de produção, as vendas aumentaram aproximadamente 142%, já no segundo mês, o aumento chegou a 400%. As vendas deste empréstimo específico têm uma forte componente sazonal, por isso temos uma variação tão grande de 142% a 400%. Mas de qualquer modo, isto demonstra o impacto positivo que a nossa nova estratégia obteve. O resultado final de <strong>400% de aumento de vendas</strong> com a nossa proposta foi enorme.</p>
</section>
<section id="conclusão" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Conclusão</h1>
<p>Identificamos um critério estranho que nosso cliente incluiu no fluxo de vendas. Levantamos algumas hipóteses simples sobre esse critério estranho e usamos dados para confirmar ou testar essa hipótese.</p>
<p>Ao analisar esses dados, identificamos uma grande oportunidade para o nosso cliente. Construímos então uma apresentação simples com uma proposta ao nosso cliente, com os números que calculamos a partir da análise dos dados que fizemos.</p>
<p>No final, esta proposta foi um grande sucesso para a nossa equipe, e também para o nosso cliente que obteve um grande aumento de vendas após implementarmos as melhorias que propusemos.</p>


</section>

 ]]></description>
  <category>Data Storytelling</category>
  <category>Data Science</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/pt/</guid>
  <pubDate>Sat, 28 Oct 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-08-31-data-decisions/decision.avif" medium="image" type="image/avif"/>
</item>
<item>
  <title>Improving decision making with Git and why you should care</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Last week, me and my team encountered a situation where we need to find out why and how a certain problem occurred. We needed to understand which decisions led to this problem, and why they were made. Pretty normal stuff right?</p>
<p>But understanding what happened was only possible for us because we track every change and every decision that we make with Git, by signing commits and writing Pull Requests (or PRs for short). This article uses this real world situation that we faced to showcase how Git and formal processes to register changes in the codebase (like PRs) are a critical part for improving decision making and understanding how your past decisions are affecting you in the present.</p>
<p>I begin the article describing what problem occurred, and in sequence, I explain what mistakes were made, and how Git helped us to identify those mistakes.</p>
</section>
<section id="what-is-the-argument-in-this-article" class="level1">
<h1>What is the argument in this article?</h1>
<p>To improve your decision making process, you need to actually remember what decisions you made in the first place. Sometimes, that remembering is actually hard.</p>
<p>Different people use different strategies to keep track of the decisions they made. Some people keep various notes about each decision, others, like to document their decisions inside the cards created in the kanban board. But regardless of what strategy you choose, it will always involve some kind (or level) of tracking and documenting the decisions you make along the way.</p>
<p>In this article, I show an real world example where Git and formal Pull Request played this role. In other words, this article seeks to show how Git and Pull Requests can help you to keep track of the decisions that are being made in your team. Who and why they made these decisions? When these decisions took place? etc.</p>
</section>
<section id="the-data-pipeline-where-the-problem-occurred" class="level1">
<h1>The data pipeline where the problem occurred</h1>
<p>The problem occurred in one of the many data pipelines<sup>1</sup> that we manage and support. This specific data pipeline was a “aggregate the data and send the results to client” type of pipeline. In more technical details, this pipeline was a JSON file that cointained all metadata that described what this pipeline was, what steps it performed, what were the dependencies and settings for each task, which specific time of the day these tasks should be performed, etc.</p>
<p>The main step (or task) performed in this pipeline was triggering the execution of a Python notebook. This notebook was perfoming the following steps:</p>
<ol type="1">
<li>aggregates the raw data to get the total sales made per channel.</li>
<li>saves the result in a CSV or Excel file.</li>
<li>send this CSV or Excel file by email to the client.</li>
</ol>
<p>The following diagram show these steps in a visual manner:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/diagrams-en.png" class="img-fluid figure-img"></p>
<figcaption>A diagram that summarises the data pipeline were the problem occurred</figcaption>
</figure>
</div>
</section>
<section id="what-problem-occurred" class="level1">
<h1>What problem occurred ?</h1>
<p>Our client notified us saying that they were not receiving the CSV files for about a week. So we started to search for this data pipeline, to look at it’s execution logs. But we did not find anything! Both the Python notebook and the JSON file that described the data pipeline itself disappeared! Is like they never existed.</p>
<p>Not having the Python notebook, is the same as not having any pipeline at all. Both Python and JSON files had simply disapeared from our repository. But the client did received some files a few weeks ago, so, we were positive that this pipeline did existed at some point in the past. But where did it go? Why it disappeared?</p>
</section>
<section id="investigating-the-commmits" class="level1">
<h1>Investigating the commmits</h1>
<p>We use Git to store and track any changes in all of our data pipelines. In other words, all changes that we make to the JSON files that describes each one of our data pipelines are tracked by Git. As you well know, a file do not simply disappear from a Git repository. When a file is removed from a Git repository, is because someone intentionally deleted the file and committed the change to the repository.</p>
<p>Since we knew that this data pipeline existed at some point in the time, I started to investigate, and follow the history of commits. Took around 30 minutes to find the exact commit that deleted the data pipeline, and, oops! The commit was created by me! I deleted the data pipeline from our repository. Ok… now Why? Why did I deleted this data pipeline?</p>
<p>At this point, Git already helped me to answer two very important questions which were: 1. Who deleted the pipeline? 2. When it was deleted? Because every commit you create in Git have a timestamp associated with it, and the name of the author of that commit, we knew at that point that it was me that deleted the pipeline, a few weeks ago.</p>
</section>
<section id="why-i-made-this-decision" class="level1">
<h1>Why I made this decision?</h1>
<p>But that alone does not answers another part of the problem. We still need to know why I made that decision. Why did I intentionally deleted this pipeline? This is the point where Pull Requests<sup>2</sup> can help us.</p>
<p>Every time we want to publish some changes that we made to a data pipeline, we need to document these changes in a PR. We describe what changes we made, and why we made them. I found the associated PR that contained the commit I made, and in the description of that PR I found the reason why I deleted the pipeline.</p>
<p>The pipeline was constantly failing with a “notebook not found” error. In other words, the pipeline was trying to trigger the execution of the Python notebook that I mentioned before. But the notebook itself was not found, and because of that, it was throwing this error. This means that the pipeline was basically useless, it was creating execution costs without delivering any value. It also means, that the Python notebook disappeared before the pipeline was deleted.</p>
<p>So I deleted the pipeline. This way we were not spending our resources trying to execute something that we know is going to throw an error, and will not give any value.</p>
</section>
<section id="another-part-of-the-problem" class="level1">
<h1>Another part of the problem</h1>
<p>Ok, now we know why I deleted the pipeline. But that in itself raises some new questions for us. Why did the Python notebook disappeared? The reality is that… we didn’t know why. Unfortunately, our Python notebooks were not hosted inside a Git repository. This means that we did not traced any changes that were made to the notebook.</p>
<p>To be fair, our Python notebooks are hosted inside a Databricks instance, and, if you are familiar with Databricks, you know that actually the Databricks platform do track (to some extent) every change that is made to the notebook, with the <a href="https://docs.databricks.com/pt/notebooks/notebooks-code.html#version-control">Revisions pannel</a>.</p>
<p>So yes, we do have some level of monitoring over the changes made to these notebooks. But not enough to actually understand why that particular notebook was missing. In other words, this “Revision” pannel of Databricks is not capable of tracking removal actions over notebooks.</p>
<p>We were only able to figure it out what was happening in the week after, when we discover that other Python notebooks were also missing. Was a set of three notebooks, called <code>Job_ClientX_Opened_Sessions</code>, <code>Job_ClientX_Sales_per_Channel</code> and <code>Job_ClientX_Opened_Tickets</code>. These three notebooks were located at the folder <code>ClientX</code>. So we had a file structure like this:</p>
<pre><code>├───📁 ClientX
│    ├───Job_ClientX_Opened_Sessions.py
│    ├───Job_ClientX_Sales_per_Channel.py
│    └───Job_ClientX_Opened_Tickets.py
│ 
├───📁 ClientY
├───📁 ClientW
└───📁 ClientZ
...</code></pre>
<p>At that specific day, we found in the execution logs that , close to 08:00 AM, this set of notebooks was avaialable, in other words, they did existed in our Databricks environment close to 08:00 AM. But on that same day, when we searched again at 11:00 AM for these same notebooks in the Databricks environment, we did not found them anymore.</p>
<p>We knew at that point, that these notebooks disappeared within the last 3 hours. It was very recent. But a detail called our attention. The folder <code>ClientX</code>, where these notebooks were supposed to be, was filled with other notebooks with similar names, like this:</p>
<pre><code>├───📁 ClientX
│    ├───[ClientX] Opened sessions.py
│    ├───[ClientX] Sales per Channel.py
│    └───[ClientX] Opened Tickets.py
│ 
├───📁 ClientY
├───📁 ClientW
└───📁 ClientZ
...</code></pre>
<p>That looks weird, because it go against our naming conventions. Me and my team do not name files like this. Than, we raised the question: “wait! I think someone is renaming these notebooks”. Later that day, our suspicions were confirmed. A colleague outside of our team was intentionally renaming the Python notebooks that were published in the production environment. That is why we were not finding the notebooks, because their names were modified.</p>
<p>The immediate consequence of this renaming action was that the link between the Python notebooks and the data pipelines was lost. That is, the data pipelines were trying to execute these notebooks, but they did not find these notebooks, because their original names were lost.</p>
<p>If we did used Git to track every change made to these python notebooks, we would have discovered this problem much earlier, and could acted to fix it. But the damage was already made. As next steps, we had to:</p>
<ol type="1">
<li>rename the notebooks back to their original names;</li>
<li>remove some of the privileges of our colleague in the Databricks environment;</li>
<li>advise this colleague about what happened, and how his actions caused harm.</li>
</ol>
</section>
<section id="what-mistakes-were-made" class="level1">
<h1>What mistakes were made?</h1>
<p>Below we have the timeline of important events we described:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/timeline.png" class="img-fluid figure-img"></p>
<figcaption>The timeline of events</figcaption>
</figure>
</div>
<p>In my head, there was at least three mistakes that were made across this timeline:</p>
<ol type="1">
<li>I did not communicated the removal of the pipeline properly;</li>
<li>Our colleague renamed a notebook in a production environment;</li>
<li>Not using Git to track changes in the notebooks at production environment.</li>
</ol>
<p>Deleting the pipeline was not a mistake. But my mistake was to not <strong>communicate my action</strong> properly. I mean, I did communicated the removal of the pipeline to my peers, but I did not communicate it to my colleague outside of my team that was also involved with this specific client, the same colleague that started to rename multiple notebooks.</p>
<p>In other words, if I had communicated to him that I deleted the pipeline, we would probably have a dialog similar to this:</p>
<ul>
<li><p>Colleague: “wait! Our client is still using this data pipeline, why did you removed it?”</p></li>
<li><p>Me: “because the pipeline was not finding the notebook”</p></li>
<li><p>Colleague: “but why is it not finding the notebook?”</p></li>
<li><p>Me: “well, the pipeline is looking for a notebook called ‘X’, but this notebook disappeared. It does not exist in our environment.”</p></li>
<li><p>Colleague: “wait! I remember of this notebook! I think I just renamed it a few days ago”</p></li>
<li><p>Me: “wait! You renamed a notebook in production?”</p></li>
<li><p>Colleague: “yes, I think so”</p></li>
</ul>
<p>With this dialog we could probably solved the puzzle much quicker, and we could fix the mistakes before any more harm could be created. So if I did communicated to this colleague that I deleted the pipeline, we would probably reach the core of the problem more quickly.</p>
<p>Everything started when our colleague decided to rename a notebook directly in the production environment without us knowing. This was certainly a mistake, but who does not mistakes sometimes right? As we described in the article, the “Revision system” of Databricks is limited, and did not tracked this very important change, and because of that, we initially had no idea what have happened with the notebook.</p>
<p>We took one week to actually figure it out what was causing the “disappearance” of the notebooks. If we did use Git to track all changes made to the notebooks published in the production environment, we would spot the “renaming action” made much, much, much quicker. So not using Git over these notebooks was a mistake too.</p>
</section>
<section id="how-git-helped-us-to-solve-the-issue" class="level1">
<h1>How Git helped us to solve the issue</h1>
<p>Git is an extremely powerful tool, and by having a centrallized server that register all changes you make to the project, you can look at the past, understand what changes you made. You can actually see the evolution or the timeline of your project, and perceive how much features, or, how much improvements you made to the project. You can also spot the decisions you made in the past. This gives you the ability to re-think your decision making process.</p>
<p>One fact we knew from the beggining: a data pipeline and a Python notebook simply disappeared from our environment. With Git we manage to track down and understand how, when and why did the data pipeline disappeared, and we were able to locate the data pipeline again, and restore it to it’s previous state, and re-send the files. If we did used Git on the notebooks, we could also track down the renaming operations made to these notebooks as well.</p>
<p>Not only did we fixed the issue, but also, by understanding what happened, and what decisions were made that led to the dissapeareance of the data pipeline, we could identify the flaws in our decision making process. And by identifying these issues, we can now address them, so we do not make these mistakes again.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>What is a pipeline? A pipeline is just a sequence of steps (or tasks) to be performed at a specific time of the day (or a specific day of the week or of the month, etc.). And a data pipeline is a pipeline that contains tasks that load, transform, send, or ingest data in some form.↩︎</p></li>
<li id="fn2"><p>In essence, a Pull Request (or PR) is a <strong>proposal</strong> to perform a <code>git merge</code> operation. In other words, you create a PR when you want to merge the changes you made in a branch into another branch (most of the times the main branch). The “proposal” aspect of a PR means that it needs be approved to be effectively performed. A PR is not a feature from Git. It is actually a standard feature from most Git service providers. So you create a PR inside a Git services platform such as GitHub, GitLab and Azure DevOps, and not inside Git itself. If you are not familiar with PRs, the <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">GitHub documentation has an excellent article about it</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Git</category>
  <category>Decisions</category>
  <category>Documentation</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/en/</guid>
  <pubDate>Mon, 31 Jul 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/git-logo.png" medium="image" type="image/png" height="70" width="144"/>
</item>
<item>
  <title>Melhorando a tomada de decisão com Git e porquê você deveria se importar</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/pt/</link>
  <description><![CDATA[ 





<section id="introdução" class="level1">
<h1>Introdução</h1>
<p>Na semana passada, eu e minha equipe nos deparamos com uma situação em que precisávamos descobrir por que e como ocorreu um determinado problema. Precisávamos entender quais decisões levaram a esse problema. Algo bem normal, não é?</p>
<p>Mas entender o que aconteceu só foi possível para nós porque rastreamos cada mudança e cada decisão que tomamos com o Git, assinando commits e escrevendo Pull Requests (ou PRs para abreviar). Este artigo usa essa situação do mundo real que enfrentamos para mostrar como o Git e os processos formais para registrar alterações na base de código (como PRs) são uma parte crítica para melhorar a tomada de decisões e entender como suas decisões passadas estão afetando você no presente.</p>
<p>Começo o artigo descrevendo qual foi o problema que nós enfrentamos e, na sequência, explico quais erros foram cometidos e como o Git nos ajudou a identificar esses erros.</p>
</section>
<section id="qual-é-o-argumento-deste-artigo" class="level1">
<h1>Qual é o argumento deste artigo?</h1>
<p>Para melhorar o seu processo de tomada de decisão, você precisa primeiro se lembrar de quais foram as decisões que você tomou. Às vezes, essa lembrança se torna uma tarefa realmente difícil.</p>
<p>Diferentes pessoas adotam estratégias diferentes para acompanhar as decisões que tomaram. Algumas pessoas mantêm várias anotações sobre cada decisão, outros, gostam de documentar suas decisões dentro dos cartões (ou <em>cards</em>) criados dentro do quadro kanban de sua equipe. Mas independentemente de qual seja a estratégia que você escolher, ela sempre vai envolver algum tipo (ou nível) de rastreamento e também de documentação dessas decisões que você faz ao longo do caminho.</p>
<p>Neste artigo, mostro um exemplo do mundo real em que o Git e o Pull Request formal desempenharam esse papel. Em outras palavras, este artigo busca mostrar como Git e Pull Requests podem te ajudar a acompanhar as decisões que estão sendo feitas em sua equipe. Quem e por que eles tomaram essas decisões? Quando essas decisões aconteceram? etc.</p>
</section>
<section id="o-pipeline-de-dados-onde-ocorreu-o-problema" class="level1">
<h1>O pipeline de dados onde ocorreu o problema</h1>
<p>O problema ocorreu em um dos muitos pipelines de dados<sup>1</sup> que gerenciamos e oferecemos suporte. Esse pipeline de dados específico era um pipeline do tipo “agregar os dados e enviar os resultados ao cliente”. Em detalhes mais técnicos, esse pipeline era um arquivo JSON que continha todos os metadados que descreviam o que era esse pipeline, quais etapas deveriam ser executavas, quais eram as dependências e configurações de cada tarefa, em que horário específico do dia essas tarefas deveriam ser executadas, etc.</p>
<p>A principal etapa (ou tarefa) executada nesse pipeline era a execução de um notebook de Python. Este notebook estava executando as seguintes etapas:</p>
<ul>
<li>agregar os dados brutos para obter o total de vendas feitas por canal.</li>
<li>salva o resultado em um arquivo CSV ou Excel.</li>
<li>enviar este arquivo CSV ou Excel por e-mail para o cliente.</li>
</ul>
<p>O diagrama a seguir mostra essas etapas de maneira visual:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/diagrams-pt.png" class="img-fluid figure-img"></p>
<figcaption>Um diagrama que resume o pipeline de dados onde o problema ocorreu</figcaption>
</figure>
</div>
</section>
<section id="qual-foi-o-problema-que-ocorreu" class="level1">
<h1>Qual foi o problema que ocorreu?</h1>
<p>Um dia, nosso cliente nos notificou dizendo que não estava recebendo os arquivos CSV há cerca de uma semana. Então começamos a procurar por esse pipeline de dados, com o objetivo de verificar os seus logs de execução. Contudo, nós simplesmente não encontramos nada! Tanto o notebook Python quanto o arquivo JSON que descrevia o próprio pipeline de dados desapareceram! É como se eles nunca tivessem existido.</p>
<p>Não ter o notebook Python era a mesma coisa que não ter pipeline nenhum. Os arquivos Python e JSON simplesmente desapareceram de nosso repositório. Mas nós sabíamos que o cliente tinha recebido alguns arquivos a algumas semanas atrás, portanto, tínhamos certeza de que esse pipeline existia em algum momento no passado. Mas para onde ele foi? Por que ele desapareceu?</p>
</section>
<section id="investigando-os-commits" class="level1">
<h1>Investigando os commits</h1>
<p>Usamos o Git para armazenar e rastrear quaisquer alterações feitas em todos os nossos pipelines de dados. Em outras palavras, todas as alterações que fazemos nos arquivos JSON que descrevem cada um de nossos pipelines de dados são rastreadas pelo Git. Como você bem sabe, um arquivo simplesmente não desaparece de um repositório Git. Quando um arquivo é removido de um repositório Git, é porque alguém excluiu intencionalmente o arquivo, e criou o commit da alteração no repositório.</p>
<p>Como sabíamos que esse pipeline de dados existia em algum momento, eu comecei a investigar e seguir o histórico de commits. Demorou cerca de 30 minutos para encontrar o commit exato que excluiu o pipeline de dados e, oops! O commit foi criado por mim! Eu excluí o pipeline de dados do nosso repositório. Ok… agora, por quê? Por que eu excluí esse pipeline de dados?</p>
<p>A essa altura, o Git já me ajudou a responder duas questões muito importantes que eram: 1. Quem deletou o pipeline? 2. Quando foi excluído? Pois todo commit que você cria no Git tem um carimbo de data/hora associado a ele e o nome do autor desse commit, sabíamos naquele momento que fui eu quem excluiu o pipeline, a algumas semanas atrás.</p>
</section>
<section id="por-que-tomei-essa-decisão" class="level1">
<h1>Por que tomei essa decisão?</h1>
<p>Mas isso por si só não responde a outra parte do problema. Ainda precisamos saber o porquê tomei essa decisão. Por que excluí intencionalmente este pipeline? Este é o ponto onde Pull Requests<sup>2</sup> podem nos ajudar.</p>
<p>Sempre que quisermos publicar alguma alteração que fizemos em um pipeline de dados, precisamos documentar essa alteração em um PR. Descrevemos quais mudanças foram feitas e por que as fizemos. Encontrei o PR associado que continha o commit que fiz e, na descrição desse PR, descobri o motivo pelo qual excluí o pipeline.</p>
<p>O pipeline estava constantemente falhando com um erro de “notebook não encontrado”. Em outras palavras, o pipeline estava tentando acionar a execução do notebook Python que mencionei anteriormente. Porém o notebook em si não foi encontrado, e por conta disso, estava dando esse erro. Isso significa que o pipeline era basicamente inútil, ele estava criando custos de execução sem entregar nenhum valor. Isso também significa que o notebook Python desapareceu antes que o pipeline fosse excluído.</p>
<p>Então eu apaguei o pipeline. Dessa forma, nós deixamos de gastar nossos recursos tentando executar algo que sabemos que vai gerar um erro de execução, e, consequentemente, não vai gerar nenhum valor.</p>
</section>
<section id="a-outra-parte-do-problema" class="level1">
<h1>A outra parte do problema</h1>
<p>Ok, agora sabemos o porquê de eu ter excluído o pipeline. Mas isso por si só levanta algumas novas questões. Por que o notebook Python desapareceu? Todavia, a realidade é que… não sabíamos o porquê. Infelizmente, nossos notebooks Python não estavan hospedados em um repositório Git. Isso significa que não nenhuma alteração feita no notebook era rastreada.</p>
<p>Porém, para ser justo, nossos notebooks Python são hospedados dentro de uma instância do Databricks e, se você estiver familiarizado com o Databricks, saberá que, na verdade, a plataforma Databricks rastreia sim (até certo ponto) alterações feitas no notebook, através do <a href="https://docs.databricks.com/pt/notebooks/notebooks-code.html#version-control">painel de “Revisions”</a>.</p>
<p>Então, sim, temos algum nível de monitoramento sobre as alterações feitas nesses notebooks. Mas não temos um nível suficiente para realmente entendermos por que aquele caderno em particular estava faltando. Em outras palavras, esse painel de “Revisions” do Databricks não é capaz de rastrear ações de remoção em notebooks.</p>
<p>Nós só conseguimos descobrir o que estava acontecendo na semana seguinte, quando identificamos que outros notebooks de Python também haviam sumido misteriosamente da pasta do mesmo cliente. Era um conjunto de três notebooks, chamados <code>Job_ClientX_Opened_Sessions</code>, <code>Job_ClientX_Sales_per_Channel</code> e <code>Job_ClientX_Opened_Tickets</code>. Esses três notebooks estavam localizados na pasta <code>ClientX</code>. Então, tínhamos uma estrutura de arquivo como esta:</p>
<pre><code>├───📁 ClientX
│    ├───Job_ClientX_Opened_Sessions.py
│    ├───Job_ClientX_Sales_per_Channel.py
│    └───Job_ClientX_Opened_Tickets.py
│ 
├───📁 ClientY
├───📁 ClientW
└───📁 ClientZ
...</code></pre>
<p>Nesse dia específico, descobrimos através dos logs de execução que, por volta das 08:00 AM, esse conjunto de notebooks estava sim disponíveis (ou seja, eles existiam de fato) em nosso ambiente Databricks por volta das 08:00. Mas nesse mesmo dia, quando nós procuramos novamente às 11:00 por esses mesmos notebooks no ambiente Databricks, não os encontramos mais.</p>
<p>Sabíamos naquele momento que esses notebooks haviam desaparecido nas últimas 3 horas. Era algo muito recente. Contudo, um detalhe chamou a nossa atenção. A pasta <code>ClientX</code>, que era onde deveriam estar esses notebooks, estava preenchida com outros notebooks que possuíam nomes semelhantes aos que estávamos procurando, como estes:</p>
<pre><code>├───📁 ClientX
│    ├───[ClientX] Opened sessions.py
│    ├───[ClientX] Sales per Channel.py
│    └───[ClientX] Opened Tickets.py
│ 
├───📁 ClientY
├───📁 ClientW
└───📁 ClientZ
...</code></pre>
<p>A princípio, isso parecia muito estranho para nós, pois esses nomes iam contra as nossas convenções de nomenclatura. Ou seja, eu e minha equipe não nomeamos arquivos dessa forma. Então, novas desconfiança surgiram, e levantamos a seguinte hipótese: “espere! Acho que alguém está renomeando esses notebooks”. Mais tarde naquele dia, nossas suspeitas foram confirmadas. Um colega de fora de nossa equipe estava renomeando intencionalmente os notebooks de Python desse cliente que foram publicados no ambiente de produção. Por isso não estávamos encontrando mais os notebooks, pois os seus nomes foram modificados.</p>
<p>A consequência imediata dessa ação de nosso colega foi que a conexão entre os notebooks de Python e os pipelines de dados foi perdida. Ou seja, os pipelines de dados estavam tentando executar esses notebooks, mas esses pipelines não estavam encontrando mais esses notebooks, pois os seus nomes originais foram perdidos.</p>
<p>Se usássemos o Git para rastrear todas as alterações feitas nesses notebooks de Python, talvez nós teríamos descoberto esse problema muito mais cedo, e, com isso, poderíamos agir para corrigi-lo. Porém o estrago já havia sido feito. Como próximos passos, o nosso time teve que:</p>
<ul>
<li>renomear os notebooks de volta para os seus nomes originais;</li>
<li>remover alguns dos privilégios de nosso colega no ambiente Databricks;</li>
<li>aconselhar este colega sobre o que aconteceu e como as suas ações causaram danos.</li>
</ul>
</section>
<section id="quais-erros-foram-cometidos" class="level1">
<h1>Quais erros foram cometidos?</h1>
<p>Abaixo temos a linha do tempo dos eventos importantes que descrevemos até aqui:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/timeline-pt.png" class="img-fluid figure-img"></p>
<figcaption>Uma timeline dos eventos</figcaption>
</figure>
</div>
<p>Na minha cabeça, existem pelo menos três erros que foram cometidos ao longo desta linha do tempo:</p>
<ul>
<li>Eu não comuniquei a retirada do pipeline de forma adequada;</li>
<li>Nosso colega estava renomeando notebooks em um ambiente de produção;</li>
<li>Não usamos o Git para rastrear alterações nos notebooks no ambiente de produção.</li>
</ul>
<p>Excluir o pipeline não foi um erro. Na realdiade, o meu erro foi não comunicar a minha ação da forma adequada. Quer dizer, eu comuniquei a remoção do pipeline aos meus colegas, mas eu não comuniquei essa remoção ao meu colega de fora da minha equipe que também estava envolvido com esse cliente específico, o mesmo colega que começou a renomear vários notebooks em produção.</p>
<p>Em outras palavras, se eu tivesse comunicado a ele que excluí o pipeline, provavelmente o seguinte diálogo teria acontecido:</p>
<ul>
<li><p>Colega: “espere! Nosso cliente ainda está usando esse pipeline de dados, por que você o removeu?”</p></li>
<li><p>Eu: “porque o pipeline não estava encontrando o notebook”</p></li>
<li><p>Colega: “mas porque ele não estava achando o notebook?”</p></li>
<li><p>Eu: “bom, o pipeline está procurando um notebook chamado ‘X’, mas esse notebook sumiu. Não existe em nosso ambiente”.</p></li>
<li><p>Colega: “espere! Eu me lembro deste caderno! Acho que acabei de renomeá-lo há alguns dias”</p></li>
<li><p>Eu: “espere! Você renomeou um notebook em produção?”</p></li>
<li><p>Colega: “sim, acho que sim”</p></li>
</ul>
<p>Com este diálogo, provavelmente poderíamos ter resolvido o quebra-cabeça muito mais rapidamente e corrigido os erros antes que mais danos pudessem ser criados. Portanto, se eu tivesse comunicado a esse colega que excluí o pipeline, provavelmente atingiríamos o cerne do problema mais rapidamente.</p>
<p>Tudo começou quando esse nosso colega decidiu renomear um notebook diretamente no ambiente de produção sem que soubéssemos. Isso com certeza foi um erro, mas quem não erra as vezes né? Além disso, como descrevemos no artigo, o sistema de “Revisions” do Databricks é limitado e não foi capaz de gravar essa mudança tão importante no notebook e, por causa disso, nós inicialmente ficamos no escuro. Nós não tínhamos ideia do que havia acontecido com o notebook.</p>
<p>Levamos uma semana para realmente descobrir o que estava causando o “desaparecimento” dos notebooks. Se usássemos o Git para rastrear todas as alterações feitas nos notebooks publicados no ambiente de produção, nós teríamos identificado a “ação de renomear” muito, muito, muito mais rápido. Portanto, não usar o Git nesses notebooks também foi um erro.</p>
</section>
<section id="como-o-git-nos-ajudou-a-resolver-o-problema" class="level1">
<h1>Como o Git nos ajudou a resolver o problema</h1>
<p>O Git é uma ferramenta extremamente poderosa. Ao termos um servidor centralizado que registra todas as mudanças que cada pessoa faz no projeto, conseguimos olhar para o passado, e entender quais mudanças foram feitas. Você pode realmente ver a evolução ou a linha do tempo do seu projeto e perceber quantos recursos ou melhorias você fez no projeto. Você também pode identificar as decisões que tomou no passado. Isso lhe dá a capacidade de repensar o seu processo de tomada de decisão.</p>
<p>Um fato que sabíamos desde o início: um pipeline de dados e um notebook de Python simplesmente desapareceram de nosso ambiente. Com o Git conseguimos rastrear e entender como, quando e por que o pipeline de dados desapareceu, e conseguimos localizar o pipeline de dados novamente, restaurá-lo ao seu estado anterior e reenviar os arquivos que o nosso cliente precisava. Se usássemos o Git nos notebooks, também poderíamos rastrear as operações de “renomear” que haviam sido feitas nesses notebooks.</p>
<p>Nós não apenas corrigimos o problema, mas também, ao entender o que aconteceu e quais decisões foram tomadas que levaram ao desaparecimento do pipeline de dados, pudemos identificar as falhas em nosso processo de tomada de decisão. E ao identificar esses problemas, agora podemos resolvê-los, para não cometermos esses erros novamente.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>O que é um pipeline? Um pipeline é apenas uma sequência de etapas (ou tarefas) a serem realizada em uma hora específica do dia (ou em um dia específico da semana ou do mês, etc.). E um pipeline de dados é um pipeline que contém tarefas que carregam, transformam, enviam ou ingerem dados de alguma forma.↩︎</p></li>
<li id="fn2"><p>Em resumo, um Pull Request (ou PR) é uma <strong>proposta</strong> para realizar uma operação <code>git merge</code>. Em outras palavras, você cria um PR quando deseja mesclar as alterações feitas em uma branch em outra branch (na maioria das vezes a main branch). O aspecto de “proposta” de uma PR significa que este PR precisa ser aprovado para ser efetivamente executado. Um PR não é um recurso do Git. Na verdade, é um recurso padrão da maioria dos provedores de serviços Git. Então você cria um PR dentro de uma plataforma de serviços Git como GitHub, GitLab e Azure DevOps, e não dentro do próprio Git. Se você não está familiarizado com PRs, a <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">documentação do GitHub tem um excelente artigo sobre isso</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Git</category>
  <category>Decisions</category>
  <category>Documentation</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/pt/</guid>
  <pubDate>Mon, 31 Jul 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-07-31-git-mark-decisions/git-logo.png" medium="image" type="image/png" height="70" width="144"/>
</item>
<item>
  <title>A case study about Data Storytelling at some of the largest brazilian banks</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>This article discusses how I improved my <em>Data Storytelling</em> process within my presentations and reports delivered to two of the largest commercial banks in the Brazilian market. I try to share what I learned in this process, and I give some tips that will possibly help you to build more intuitive, captivating, clear and effective data reports.</p>
<p>In summary, we will discuss in this article the following tips:</p>
<ul>
<li><em>Data Storytelling</em> is about telling stories through data;</li>
<li>Stories have structure, use these structures in your favor;</li>
<li>Avoid sharing too much attention with long texts on your slides;</li>
<li>Trace relationships between your data;</li>
<li>Build your story around a main message;</li>
<li>Deliver your story at small pieces;</li>
</ul>
<p>Most of this knowledge was built through intense research, reflection and planning about my presentations, and later, getting feedback, and making small adjustments here and there.</p>
<p>As you might expect with every great work like this, it also involved other peoples. During this process, I received help and feedback from my co-workers. Specially from <a href="https://www.linkedin.com/in/andressa-de-souza-freitas-697195177/">Andressa de Souza Freitas</a> and <a href="https://www.linkedin.com/in/guilhermeggarcia/">Guilherme Gomes</a>. I also had great help from the UX Designer <a href="https://www.linkedin.com/in/alefernandesbranding/">Alê Fernandes</a>. Most of the knowledge presented here, I learned in practice with Alê. This knowledge revolutionized the way I build my presentations, and for that I am immensely grateful to her ❤️.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>All data, charts and images shown in this article are merely illustrative. All numbers shown were randomly generated by a computer! Therefore, they do not represent the actual data of TakeBlip or the comercial banks involved in any way or dimension!</p>
</div>
</div>
</section>
<section id="summary-of-the-structure-of-this-article" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Summary of the structure of this article</h1>
<p>In Section&nbsp;3 I provide more context about these reports that I delivered to two of the largest comercial banks in the Brazilian market. What was the usual format of these reports ? What were their main problems and limitations ?</p>
<p>But from Section&nbsp;4 and on, I start to discuss about how I improved these reports. You will notice that most of these improvements are concentrated in two areas:</p>
<ol type="1">
<li>build a presentation that is simple and clear;</li>
<li>build a presentation that has a good structure, that is, a structure that helps you to tell a story through your data;</li>
</ol>
<p>Section&nbsp;4.1 provides two tips that help you bring simplicity and clarity to your presentation, in addition to discussing why long texts on slides are so perverse for your viewers’ attention.</p>
<p>At Section&nbsp;4.2 I discuss some tips on how to form the content of the presentation, more specifically, content that helps you build a story in your presentation.</p>
<p>At Section&nbsp;5, we take the tips that we discussed so far in the article, and we try to apply them to the slide shown in Figure&nbsp;3, with the objective of demonstrating how these tips can improve your presentation.</p>
<p>Lastly, at Section&nbsp;6, we discuss structure a lot. More specifically, I discuss two examples of frameworks that can serve as guides. They provide a simple foundation that you can use to build your story.</p>
<p>Anyway, let’s move on…</p>
</section>
<section id="sec-como-era-antes" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> How was this report before ?</h1>
<p>At the time, we were building a monthly report containing several indicators and graphs that showed the current status and recent evolution of the banks services and products offered within the WhatsApp channel.</p>
<p>However, the format of this presentation was problematic. We brought a <strong>monumental amount</strong> of information to the bank. The presentation usually had around 40 different slides, with approximately 36 charts and 70 different indicators. Furthermore, we tried to present all this volume of information in a meeting of just 1 hour.</p>
<p>The end result was a presentation that brought a monumental volume of information, however, which also brought a <strong>very small volume of insights and new business ideas for managers</strong>.</p>
<p>In Figure&nbsp;1 we have a representation of one of the several slides of this presentation<sup>1</sup>. Imagine that this presentation had around 40 slides similar to this one:</p>
<div id="fig-print-report1" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-print-report1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/print-report1-en.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-print-report1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: A single slide from the old version of the report
</figcaption>
</figure>
</div>
<p>Note that this slide looks more like a dashboard page than a report showing the latest trends in the products and services of the bank, or, on the financial market as a whole.</p>
<p><strong>This is very important!</strong> If your presentation has a lot of different indicators scattered around the page, without contextualizing them, without relating them to each other, without bringing out what they mean together, this presentation will likely look very similar to the dashboards you already produce for your client.</p>
<p>With that in mind, what is your customer’s incentive/motive/reason for attending your presentation? In other words, if your presentation shows the same graphs/indicators that your dashboards show, your client has no incentive/reason to watch your presentation. Because <strong>there is nothing in your presentation that is new</strong>, or any information that your client does not already have direct access to.</p>
</section>
<section id="sec-como-melhorar" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> How can we improve?</h1>
<p>Now that you have a sense of the size of the problem that the previous versions of these reports represented, over the next sections of this article, I will discuss some essential tips that demonstrate how we can improve the presentation model shown in Figure&nbsp;1.</p>
<p>In my understanding, a good part of the success in <strong>data storytelling</strong> can be summarized in two actions, or two main objectives:</p>
<ol type="1">
<li>Avoid items that distract our viewers’ attention;</li>
<li>Build a captivating story for your presentation;</li>
</ol>
<p>The first item above is more related to the <strong>clarity and simplicity</strong> of the presentation, while the second item is more related to the <strong>content and structure</strong> of the presentation.</p>
<p>Let’s start with the first item…</p>
<section id="sec-guerra-atencao" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="sec-guerra-atencao"><span class="header-section-number">4.1</span> A constant war for attention</h2>
<p>When we’re presenting something, we’re constantly battling for our viewers attention. This is a hard battle, not only because we can (unintentionally) attract attention to the wrong places, but also, because there are so many sources of distraction in the modern world (e.g.&nbsp;cell phones, emails, etc.)!</p>
<p>A good <strong>data storytelling</strong> depends on telling a captivating story that manages to capture the attention of your viewers. Therefore, the next sections will focus a lot on tips that contribute to this capture, or that help you not to dissipate, reduce or disturb the attention of these spectators.</p>
<section id="sec-long-text" class="level3" data-number="4.1.1">
<h3 data-number="4.1.1" class="anchored" data-anchor-id="sec-long-text"><span class="header-section-number">4.1.1</span> Why you should avoid long text on your slides?</h3>
<p>Try to be parsimonious in your slides! That is, try to include as little information as possible within it. If you need to convey a lot of information on a single slide, then try to incorporate most of this content into your speech, and as little of it as possible in written form on this slide. In general, avoid including very long texts in your slides as much as possible.</p>
<p>It’s weird to think about, but generally, managers will jump in and watch your presentation because they’re interested in what <strong>you</strong> have to say about their business. Therefore, your slides are only support material, they must be secondary, a supporting element of your presentation. Because the main piece of the presentation should always be your speech and the story you want to tell through it.</p>
<p>See the slide at Figure&nbsp;2 as an example. The main problem with this slide is that it <strong>divides the viewer’s attention a lot</strong>.</p>
<div id="fig-texto-longo" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-texto-longo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/texto-longo-en.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-texto-longo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Slide with a long paragraph
</figcaption>
</figure>
</div>
<p>When presenting a slide, your viewers have to pay attention to your speech. That is, what you are verbally communicating during the presentation. And at the same time, they also need to pay attention to the slide content. However, that long paragraph in the left corner of the slide shown in Figure&nbsp;2 is problematic. <strong>Because he draws too much attention!</strong></p>
<p>The long paragraph element arouses our curiosity so much that, when you saw the above slide, you (the reader of this article) probably tried to read that long paragraph, even before reading what I am describing right now in this paragraph. The same will happen with the viewers of your presentation. Meaning your viewers will immediately try to read that long paragraph.</p>
<p>However, reading and interpreting a long text requires some effort and a lot of attention. As a result, while your viewers are trying to read that text, they won’t be able to pay attention to other elements of your presentation. For example, in your speech.</p>
<p>This can be crucial, as you may bring extra information, or an extremely important connection in your speech, and they may end up missing it while they are trying to read this text. Therefore, avoid as much as possible including very long texts in your slides.</p>
</section>
<section id="deliver-your-story-in-small-pieces" class="level3" data-number="4.1.2">
<h3 data-number="4.1.2" class="anchored" data-anchor-id="deliver-your-story-in-small-pieces"><span class="header-section-number">4.1.2</span> Deliver your story in small pieces</h3>
<p>The human brain can process a limited amount of information at once. As a result, if you try to explain a lot of information to your viewers, in a single slide, they will end up hitting that limit 🤯, and they simply won’t be able to reason, understand or assimilate what you’re explaining.</p>
<p>So <strong>deliver your story in small pieces</strong>. Avoid condensing a lot of information into a single slide! Divide the content into parts, and explain one part at a time!</p>
<p>This helps make the content simpler, and as a result, it helps your viewers better understand what you’re talking about.</p>
<p>Think about this for a while. When you’re looking to learn about a complex subject (e.g.&nbsp;linear regression), you’re likely to divide the content into many small pieces, and learn one piece at a time. Isn’t that how you do it? So bring that strategy into your presentations as well.</p>
</section>
</section>
<section id="sec-historia-conteudo" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="sec-historia-conteudo"><span class="header-section-number">4.2</span> Discussing stories and content</h2>
<p>Now that we’ve seen two basic rules about keeping your viewers attention (i.e.&nbsp;avoid long texts and deliver your story at small pieces), let’s discuss some tips about the content of your presentation, and how to build stories with data.</p>
<section id="data-storytelling-is-not-about-choosing-the-best-chart" class="level3" data-number="4.2.1">
<h3 data-number="4.2.1" class="anchored" data-anchor-id="data-storytelling-is-not-about-choosing-the-best-chart"><span class="header-section-number">4.2.1</span> <em>Data Storytelling</em> is not about choosing “the best chart”</h3>
<p>A few analysts understand “<em>data storytelling</em>” as a visualization problem, or, as the science of “choosing the best chart” for your presentation, or how to design innovative, beautiful, and complex graphic designs.</p>
<p>However, <em>data storytelling</em> is about <strong>telling stories with data</strong>. Not about building charts/graphics. Choosing the right visualization to present your data, making it better, prettier and cleaner is only part of the process. A very important part, as this will help you tell your story more clearly and effectively, and thus reach a larger audience.</p>
</section>
<section id="sec-relacoes" class="level3" data-number="4.2.2">
<h3 data-number="4.2.2" class="anchored" data-anchor-id="sec-relacoes"><span class="header-section-number">4.2.2</span> Trace relationships between indicators</h3>
<p>Now, let’s analyze the slide shown in Figure&nbsp;3. Notice that this slide, again, is very reminiscent of a dashboard page. The slide doesn’t look so captivating at first glance, as it only shows the indicators, it doesn’t build a relationship, or <strong>a story</strong>, between them.</p>
<div id="fig-divisao2" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-divisao2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/divisao2-en.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-divisao2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Lack of relationship between indicators
</figcaption>
</figure>
</div>
<p>If we pay attention to these indicators, we can identify some effects that are happening along them. And if we think about these effects a little more, we will realize that these effects are relatable! And that together, they can tell a story.</p>
<p>For example, notice that there is a significant increase in sales. Both in the number of proposals sold and in the total value that these proposals generated. However, notice that this growth in sales did not occur in the “Payroll Loan” product, but in the “Vehicle secured loan” product. In other words, the product “Loan Payroll” had a drop in sales at that month, however, the product “Loan with vehicle guarantee” obtained a big result that surpassed this drop by a lot, and in the end, managed to increase the bank sales as a whole.</p>
<p>In addition, we can also see other effects like the increases in both conversion rate and in the API (<em>Application Programming Interface</em>) success rate. These are also factors that contributed to the increase in sales. Because an increase in the conversion rate means that a larger portion of our customers are purchasing our products. And an increase in the success rate in the API means that we have fewer errors in the registration of sales on the platform, and this is obviously positive, as we have a smaller loss of sales due to crashes and errors in this registration system.</p>
<p>Note that all these relationships together help us to <strong>build a story</strong> about how sales increased at this specific month, and that’s exactly what we want to achieve. So always try to build relationships between your metrics to form a story about a key result that you perceived.</p>
</section>
<section id="sec-key-message" class="level3" data-number="4.2.3">
<h3 data-number="4.2.3" class="anchored" data-anchor-id="sec-key-message"><span class="header-section-number">4.2.3</span> Build your story around a key message</h3>
<p>Just to make this idea clear, when we identify the various effects that we described at Section&nbsp;4.2.2, on the slide shown in Figure&nbsp;3, it is interesting to ask ourselves: which of these various effects is the main result? In other words, which one of these effects is of most interest to the bank managers who are watching your presentation?</p>
<p>Certainly the increase in sales is the <strong>main effect</strong>. It is the <strong>key result</strong>. It’s the effect that most interests managers watching your presentation. So try to build your story around this result, or this main message. Use the other indicators to explain how this key result came about.</p>
<p>This is also very important! Every manager is very fond of hearing the word “increase in sales”. However, he is also always interested in knowing the <strong>“how was this increase generated?”</strong>. That is, he needs to know what actions were taken that generated this positive impact.</p>
<p>Because by identifying these actions, this manager has the ability to apply these actions to other parts of his business, and, hopefully, he can end up spreading this positive effect that you described to other areas, and, as a result, he can end up further increasing the company’s sales.</p>
</section>
</section>
</section>
<section id="sec-pratica" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Putting some tips into practice</h1>
<p>So far, we’ve discussed the following tips:</p>
<ol type="1">
<li>Avoid long texts on your slides;</li>
<li>Trace relationships between the indicators;</li>
<li>Build your story around a main message;</li>
<li>Deliver your story slowly, at small pieces;</li>
</ol>
<p>Let’s put these tips into practice, and redesign the slide shown in Figure&nbsp;3. Do you remember the relationships we described in Section&nbsp;4.2.2? Remember how these relationships tell a story about increased sales? Let’s take advantage of this story to apply the tips above.</p>
<p>First, we established that our story should always be built around a core message. So let’s start our presentation by focusing on a single slide that makes this main message clear.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/mensagem-principal-en.png" class="img-fluid figure-img"></p>
<figcaption>The main message of the presentation</figcaption>
</figure>
</div>
<p>Now that we know what the main subject of the presentation is, we can start to dig deeper, and describe that subject in more detail. As a next step, we can answer the question “where did this increase in sales came from?”.</p>
<p>This question can be very relevant for your presentation, especially if: 1) you are presenting to several managers from different areas at the same time; 2) or also, if you are presenting to a manager higher in the hierarchy, who oversees several areas/products at the same time. Because in these cases, these managers will logically wonder where this increase in sales occurred. Was it in product x? Or was it in product y? Or area z? Etc.</p>
<p>Anyway, let’s answer this question on a new slide. With this slide, we make it clear to viewers that a new bank product (car loan with guarantee on vehicles) was the big star of the month, generating around $12 thousand in sales in the first month, even surpassing the sales value of the already consolidated product (payroll loan).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/onde-vendemos-en.png" class="img-fluid figure-img"></p>
<figcaption>Where did we sell more?</figcaption>
</figure>
</div>
<p>The next question we need to answer is “how?”. How was this super result in sales generated? We discussed this in Section&nbsp;4.2.3 that after discovering such an important result, managers will certainly be interested in understanding how this result was generated, so that they can spread this positive effect to other areas of the business.</p>
<p>Remember that we have two main effects discussed in Section&nbsp;4.2.2 that explain how this improvement in sales occurred. Let’s list them clearly and succintly on a new slide:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/porque-vendemos-en.png" class="img-fluid figure-img"></p>
<figcaption>Why did we sell more?</figcaption>
</figure>
</div>
<p>Please, try to use your speech to elaborate the two effects above (“What was the problem with the API, and how did we overcome it?”, “How is this an improvement?”, “What is a conversion rate? And how does it affect the process of sale?”). Remember, try to avoid putting long texts in your presentations as much as possible, and try to give more details or answer your viewers questions through speech.</p>
<p>With these three slides we have a much more interesting structure and content for our presentation as we are telling a story about how we sold more in a given month.</p>
<p>Note that the structure of the presentation (1: main message, 2: where? , 3: how?) helps us to cohesively create the content and this story. In the next sections of this article, I’ll discuss two other frameworks that can help you structure and cohesively tell your stories.</p>
</section>
<section id="sec-historias-tem-estrutura" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Stories have structure, use these structures to your advantage</h1>
<p>Over the next sections, I’ll show you two examples of structures that are quite common in stories. These structures serve as a guide as you build your story. They will help you a lot to organize your ideas in a clear and effective format.</p>
<section id="the-four-cs-model" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="the-four-cs-model"><span class="header-section-number">6.1</span> The four C’s model</h2>
<p>The four C’s model refers to these four words in Portuguese:</p>
<blockquote class="blockquote">
<p>Contexto, Conflito, Consequência, Conselho.</p>
</blockquote>
<p>These four words can be translated into <em>Context, Conflict, Consequence, Advice</em>, and they help you bring a consistent structure to your story. In addition, these words also help you to stir up your viewers’ emotions a little, and, with that, capture their attention more.</p>
<p>By following this model, your story will always break down into four parts: context, conflict, consequence, and advice. Precisely in this order. This framework revolves around a major problem or conflict that you have identified in your client’s business.</p>
<p>The interesting thing about this structure is that you can stake several problems in sequence. As a result, you have a block of 4 C’s (context, conflict, consequence and advice), followed by another block with 4 more C’s (context, conflict, consequence and advice). Or, you can start the presentation with a context, and then two blocks of 3 C’s (conflict, consequence and advice) in sequence.</p>
<p>Anyway, enough talking, and let’s describe in more detail each one of these four parts of this structure.</p>
<section id="start-with-a-context" class="level3" data-number="6.1.1">
<h3 data-number="6.1.1" class="anchored" data-anchor-id="start-with-a-context"><span class="header-section-number">6.1.1</span> Start with a context</h3>
<p>Therefore, when following this model, your story will always start with a context. Something just to contextualize the viewer on what the current state of the business is.</p>
<p>Remember, the 4 C’s model is built around a conflict, or a core problem. Bearing this in mind, if, for example, the conflict that you are going to discuss in your story is a problem that affects the service for selling card machines, it is important that you focus on giving an <em>overview</em> about the service for selling card machines.</p>
<p>In other words, avoid bringing contexts in this part that are not related to the problem/conflict that you will talk in the next section. Because this conflict is the central part of the story.</p>
</section>
<section id="present-a-conflictproblemchallenge-to-be-overcome" class="level3" data-number="6.1.2">
<h3 data-number="6.1.2" class="anchored" data-anchor-id="present-a-conflictproblemchallenge-to-be-overcome"><span class="header-section-number">6.1.2</span> Present a conflict/problem/challenge to be overcome</h3>
<p>Then you must show a conflict. That is, a problem, challenge or barrier that you have identified in the product/service you are looking at. This is where we’re going to play with the viewer’s emotions a bit, and use that to our advantage to capture their attention.</p>
<p>Let’s reflect on this a little. By putting words like “problem”, “care”, “challenge”, “alert”, especially in bold letters, in addition to including emojis that convey this purpose, such as ⚠️ and ⛔. This quickly draws anyone’s attention, as it gives you a sense of danger, and you enter a state of alert.</p>
<p>If you think about it a little more, you’ll probably realize that you have that same instinct when you’re watching a movie, or a series, and the hero of that story suddenly gets into a dangerous situation. You quickly pay more attention to what is happening, because you want to see how the hero is going to get out of this hole, or you are really rooting for him to survive and overcome this problem.</p>
<p>When we present an issue about the product/service you are reviewing, we want to cause the same effect on our viewers. When we say that we have a challenge/problem that is affecting the company’s sales, managers quickly start to pay more attention to what you are saying, as they want to know how they can get out of this hole!</p>
</section>
<section id="hiding-the-problems-is-a-bad-idea" class="level3" data-number="6.1.3">
<h3 data-number="6.1.3" class="anchored" data-anchor-id="hiding-the-problems-is-a-bad-idea"><span class="header-section-number">6.1.3</span> Hiding the problems is a bad idea</h3>
<p>This is very important! Some analysts are afraid or apprehensive of shedding light on existing problems, and therefore, end up hiding them or omitting them from their presentations. However, you are not delivering any value to your customer that way! You are not helping your customer to solve their problems and to grow their business!</p>
<p>And if the problems are not solved, if they continue to exist, they will grow, and grow, until they explode, thus generating generalized chaos. The sooner you identify the problem, notify managers about it, and present possible solutions for it, the better for managers, who already leave with an action plan to solve this problem, and it is better for you too, because you are delivering value and solutions to your customer.</p>
<p>Therefore, a good presentation, or a good data report, is one that delivers value to your customer! By showing new business opportunities (e.g.&nbsp;reaching a new portion of the public with a product), and also by presenting solutions to current problems that are limiting or preventing business growth.</p>
<p>However, a presentation that only comments on positive points, that says that everything is fine… does not bring any value to managers. Managers didn’t hire you to tell you everything is fine. They hired you to help them discover and solve problems in their business through data analysis.</p>
</section>
<section id="present-the-consequences-of-the-conflictproblemchallenge-you-have-identified" class="level3" data-number="6.1.4">
<h3 data-number="6.1.4" class="anchored" data-anchor-id="present-the-consequences-of-the-conflictproblemchallenge-you-have-identified"><span class="header-section-number">6.1.4</span> Present the consequences of the conflict/problem/challenge you have identified</h3>
<p>Therefore, after presenting a conflict/problem/challenge that is affecting the business, it is important that you present the consequence of this problem right away. This helps managers to have a dimension of the size that this problem represents for their business.</p>
<p>It’s okay if you can’t measure in numbers the size of the impact that this conflict had on the business. Try to measure that impact as best you can. An approximate value of the impact can already bring enough clarity about the size of the danger that this conflict represents for the business.</p>
<p>You can also provide a <em>range</em>, or a possible range of the impact if you can (e.g.&nbsp;the estimated impact is between $20 thousand and $340 thousand). This is also a valid way of exposing the size of the problem.</p>
<p>If it is really impossible to measure this impact in numbers, then explain in this part, which are the points of the product/service sales process that are affected by this problem. In other words, present which are the places in the business that are being, in theory, affected by this conflict.</p>
</section>
<section id="advise-your-customer-present-possible-solutions-to-the-problem" class="level3" data-number="6.1.5">
<h3 data-number="6.1.5" class="anchored" data-anchor-id="advise-your-customer-present-possible-solutions-to-the-problem"><span class="header-section-number">6.1.5</span> Advise your customer, present possible solutions to the problem</h3>
<p>Okay, we present a problem, or a conflict for our viewers. We also discussed the impacts of this conflict on our client’s business. Now, we need to present possible solutions to this problem.</p>
<p>Therefore, understand the problem/conflict you are presenting, and try to list what would be the main solutions for this problem, and include these solutions in this part of your presentation. It’s worth explaining and discussing this issue with other co-workers as well, as they might also come up with interesting solutions that were off your radar.</p>
<p>It is also interesting to include a list of <em>trade-offs</em> for each solution, especially in terms of complexity and effort for each solution. Managers are constantly interested in this relationship, and always want to choose the solution that is simpler and faster to implement.</p>
</section>
</section>
<section id="character-evolution-as-another-alternative" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="character-evolution-as-another-alternative"><span class="header-section-number">6.2</span> Character evolution as another alternative</h2>
<p>Character evolution (or the “hero’s journey”) is a popular story structure. You start with a character, or a hero for the story, which in our case here, could be our client’s business, or a specific product of this business.</p>
<p>Our mission is to show how this character/hero has evolved in recent months. Therefore, this evolution structure is very suitable for year-end reports. Because these reports are interesting to show the evolution of the business (or the evolution of the character) over the last year.</p>
<section id="the-beginning-and-end-of-the-journey" class="level3" data-number="6.2.1">
<h3 data-number="6.2.1" class="anchored" data-anchor-id="the-beginning-and-end-of-the-journey"><span class="header-section-number">6.2.1</span> The beginning and end of the journey</h3>
<p>If you prefer, you can start your presentation by showing how your character was at the beginning of the journey, and end this presentation by showing how that character ended that journey.</p>
<p>This is an option, however, I prefer to start the presentation by showing the start and end at the same time. In this way, viewers begin the presentation with an idea of how much the business has evolved during the year. Therefore, I start by showing how the character (or the business/product) started the year, and then how he ended the year.</p>
</section>
<section id="presenting-the-challenges-and-pitfalls" class="level3" data-number="6.2.2">
<h3 data-number="6.2.2" class="anchored" data-anchor-id="presenting-the-challenges-and-pitfalls"><span class="header-section-number">6.2.2</span> Presenting the challenges and pitfalls</h3>
<p>In every business/product, whatever it may be, we always face major challenges that can threaten the success, or limit the evolution of this business/product.</p>
<p>Therefore, along any journey, we always face challenges and setbacks, and we apply actions to try to overcome these challenges. By overcoming these challenges, we can hopefully generate the evolution and improvement of this business/product. That is, reaching the end of this journey with a better, more robust and more profitable business/product.</p>
<p>All of this means that “how we get through the middle of the journey” can be much more important/interesting than the beginning or end of that journey. Therefore, reserve a part of your presentation to present the main challenges we faced during this journey, and how we overcame them.</p>
</section>
<section id="if-possible-take-the-opportunity-to-value-your-teams-work" class="level3" data-number="6.2.3">
<h3 data-number="6.2.3" class="anchored" data-anchor-id="if-possible-take-the-opportunity-to-value-your-teams-work"><span class="header-section-number">6.2.3</span> If possible, take the opportunity to value your team’s work</h3>
<p>At this particular point in the presentation, you usually have a very interesting opportunity! Because you can deliver value to your customer and, at the same time, also value the work of your team, especially if this was the team that discovered the challenges, and applied the actions that overcame the challenges you are describing.</p>
<p>This is a golden opportunity! Therefore, if you have this opportunity in your hands, take advantage of it! Remember that you don’t work alone. You’re almost always working within a team of people, and it’s always important to know how to value your colleagues’ work.</p>
<p>However, this opportunity will not always appear for you. Perhaps the challenges you are presenting were overcome in another way, by another team that you do not know, or that you do not have a direct connection with.</p>
</section>
<section id="reinforce-the-results-achieved" class="level3" data-number="6.2.4">
<h3 data-number="6.2.4" class="anchored" data-anchor-id="reinforce-the-results-achieved"><span class="header-section-number">6.2.4</span> Reinforce the results achieved</h3>
<p>It is also useful to end your presentation by showing a summary of the results achieved during the year. This could be a simple <em>bulletpoint</em> summarizing the main results. This helps to jog your viewers’ memory, showing them not only how we ended last year’s journey, but also, how we begin next year’s journey 😉.</p>
</section>
<section id="a-summary-of-the-structure" class="level3" data-number="6.2.5">
<h3 data-number="6.2.5" class="anchored" data-anchor-id="a-summary-of-the-structure"><span class="header-section-number">6.2.5</span> A summary of the structure</h3>
<p>Therefore, over the previous sections we discussed an idea of structure that would be similar to a “character evolution”. In the end, we have a story that follows the sequence below:</p>
<ul>
<li>quickly present how we started and how we ended the journey;</li>
<li>present the main challenges we faced during the year;</li>
<li>what were the solutions we applied to solve the problems;</li>
<li>reinforce the evolution of the character, by showing again the results achieved with the solutions above;</li>
</ul>


</section>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It is worth remembering that the numbers and graphs presented in this image are merely illustrative, and were defined in a completely random way.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Storytelling</category>
  <category>Data Storytelling</category>
  <category>Data Science</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/en/</guid>
  <pubDate>Mon, 22 May 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/mapa-featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Um estudo de caso sobre Data Storytelling em alguns dos maiores bancos brasileiros</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/pt/</link>
  <description><![CDATA[ 





<section id="introdução" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introdução</h1>
<p>Este artigo discute como eu melhorei o meu processo de <em>Data Storytelling</em> dentro das minhas apresentações e relatórios entregues para dois dos maiores bancos comerciais do mercado brasileiro. Busco compartilhar o que aprendi nesse processo, e dou algumas dicas que possivelmente vão ajudá-lo a construir relatórios de dados mais intuitivos, cativantes, claros e efetivos.</p>
<p>Em resumo, vamos discutir neste artigo as seguintes dicas:</p>
<ul>
<li><em>Data Storytelling</em> é sobre contar histórias através de dados;</li>
<li>Histórias tem estrutura, use essas estruturas ao seu favor;</li>
<li>Evite dividir muito a atenção com textos longos em seus slides;</li>
<li>Trace relações entre os seus dados;</li>
<li>Construa sua história em torno de uma mensagem principal;</li>
<li>Entregue sua história aos poucos;</li>
</ul>
<p>A maior parte desses conhecimentos foram construídos através de intensa pesquisa, reflexão e planejamento sobre as minhas apresentações, e, posteriormente, adquirindo feedbacks, e realizando pequenos ajustes aqui e ali.</p>
<p>Como você pode esperar de todo grande trabalho como este, ele também envolveu outras pessoas. Durante esse processo, eu recebi ajuda e feedbacks de meus colegas de trabalho, <a href="https://www.linkedin.com/in/andressa-de-souza-freitas-697195177/">Andressa de Souza Freitas</a> e <a href="https://www.linkedin.com/in/guilhermeggarcia/">Guilherme Gomes</a>. Eu também tive uma grande ajuda da UX Designer <a href="https://www.linkedin.com/in/alefernandesbranding/">Alê Fernandes</a>. Vários dos conhecimentos apresentados aqui, eu aprendi na prática com a Alê. Esses conhecimentos revolucionaram a maneira como eu construo minhas apresentações, e, por isso, eu sou imensamente grato a ela ❤️.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Todos os dados, gráficos e imagens mostrados neste artigo são meramente ilustrativos. Todos os números apresentados foram gerados de forma aleatória por um computador! Portanto, eles não representam os dados reais de TakeBlip ou dos bancos comerciais brasileiros envolvidos de nenhuma forma ou dimensão!</p>
</div>
</div>
</section>
<section id="resumo-da-estrutura-deste-artigo" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Resumo da estrutura deste artigo</h1>
<p>Na Seção&nbsp;3, eu forneço contexto sobre esses relatórios que eu apresentava para dois dos maiores bancos comerciais brasileiros, qual era o formato desses relatórios e quais eram os seus principais problemas e limitações.</p>
<p>Mas a partir da Seção&nbsp;4, nós começamos a discutir sobre como melhorei esses relatórios. Você vai perceber que boa parte dessas melhorias estão concentradas em dois pontos:</p>
<ol type="1">
<li>construir uma apresentação que seja simples e clara;</li>
<li>construir uma apresentação que tenha uma boa estrutura, isto é, uma estrutura que te ajude a contar uma história através de seus dados;</li>
</ol>
<p>A Seção&nbsp;4.1 fornece duas dicas que te ajudam a trazer simplicidade e clareza para sua apresentação, além de discutir o porquê de textos longos em slides serem tão perversos para a atenção de seus espectadores.</p>
<p>Na Seção&nbsp;4.2 discuto algumas dicas sobre como formar o conteúdo da apresentação, mais especificamente, um conteúdo que te ajude a construir uma história em sua apresentação.</p>
<p>Já na Seção&nbsp;5, nós pegamos as dicas que discutimos até então no artigo, e tentamos aplicar elas sobre o slide mostrado em Figura&nbsp;3, com o objetivo de demonstrar como essas dicas podem melhorar sua apresentação.</p>
<p>Por último, na Seção&nbsp;6, nós discutimos bastante sobre estrutura. Mais especificamente, eu discuto dois exemplos de estruturas que podem servir como um guia, ao fornecer uma base simples que você pode utilizar para construir a sua história.</p>
<p>Enfim, vamos prosseguir…</p>
</section>
<section id="sec-como-era-antes" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Como era esse relatório antes ?</h1>
<p>Na época, estávamos construindo um relatório mensal contendo vários indicadores e gráficos que mostravam o estado atual e a evolução recente dos serviços e produtos dos bancos ofertados dentro do canal do WhatsApp.</p>
<p>Contudo, o formato dessa apresentação era problemático. Nós trazíamos uma <strong>quantidade monumental</strong> de informações para o banco. A apresentação usualmente trazia em torno de 40 slides diferentes, com aproximadamente 36 gráficos e 70 indicadores diferentes. Para mais, nós tentávamos apresentar todo esse volume de informações em uma reunião de apenas 1 hora.</p>
<p>O resultado final disso tudo era uma apresentação que trazia um volume monumental de informações, porém, que também trazia um <strong>volume muito pequeno de insights e novas ideias de negócio para os gestores</strong>.</p>
<p>Em Figura&nbsp;1 temos uma representação de um dos vários slides dessa apresentação<sup>1</sup>. Imagine que essa apresentação trazia em torno de 40 slides semelhantes a esse:</p>
<div id="fig-print-report1" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-print-report1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/print-report1.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-print-report1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figura&nbsp;1: Representação de um slide da versão antiga do relatório
</figcaption>
</figure>
</div>
<p>Perceba que esse slide se parece mais com uma página de um dashboard, do que de um relatório apresentando as últimas tendências do mercado ou do negócio do banco.</p>
<p><strong>Isso é muito importante!</strong> Se a sua apresentação traz vários indicadores diferentes espalhados pela página, sem contextualizá-los, sem relacioná-los uns com os outros, sem trazer o que eles significam em conjunto, essa apresentação vai muito provavelmente se parecer com os dashboards que você já produz para o seu cliente.</p>
<p>Tendo isso em mente, qual é o incentivo/motivo/razão que o seu cliente tem para assistir à sua apresentação? Em outras palavras, se a sua apresentação mostra os mesmos gráficos/indicadores que os seus dashboards apresentam, o seu cliente não tem incentivo/motivo nenhum para assistir à sua apresentação. Pois <strong>não há nada na sua apresentação que seja novo</strong>, ou nenhuma informação da qual o seu cliente não tenha já acesso diretamente.</p>
</section>
<section id="sec-como-melhorar" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Como podemos melhorar ?</h1>
<p>Agora que você possui uma noção do tamanho do problema que as versões anteriores desses relatórios representavam, nas próximas seções deste artigo, vou discutir algumas dicas essenciais que demonstram como nós podemos melhorar o modelo de apresentação mostrado em Figura&nbsp;1.</p>
<p>No meu entendimento, boa parte do sucesso em <strong>data storytelling</strong> pode ser resumido em duas ações, ou dois objetivos principais:</p>
<ol type="1">
<li>Evitar itens que dispersam a atenção dos nossos espectadores;</li>
<li>Construir uma história cativante para a nossa apresentação;</li>
</ol>
<p>O primeiro item acima está mais relacionado à <strong>clareza e simplicidade</strong> da apresentação, enquanto o segundo item está mais relacionado ao <strong>conteúdo e estrutura</strong> da apresentação.</p>
<p>Vamos começar pelo primeiro item…</p>
<section id="sec-guerra-atencao" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="sec-guerra-atencao"><span class="header-section-number">4.1</span> Uma guerra constante pela atenção</h2>
<p>Quando estamos apresentando algo, estamos constantemente batalhando pela atenção dos nossos espectadores. Essa é uma batalha difícil, não apenas porque nós podemos (sem querer) atrair a atenção para os lugares errados, mas também porque existem muitas fontes de distração no mundo moderno (e.g.&nbsp;celulares, emails, etc.)!</p>
<p>Um bom <strong>data storytelling</strong> depende de você contar uma história cativante, que consiga capturar a atenção de seus espectadores. Por isso, as próximas seções vão focar bastante em dicas que contribuam para essa captura, ou que te ajudam a não dissipar, reduzir ou atrapalhar a atenção desses espectadores.</p>
<section id="sec-texto-longo" class="level3" data-number="4.1.1">
<h3 data-number="4.1.1" class="anchored" data-anchor-id="sec-texto-longo"><span class="header-section-number">4.1.1</span> Por que evitar textos longos em seus slides?</h3>
<p>Tente ser parsimonioso nos seus slides! Isto é, tente incluir o mínimo possível de informação dentro dele. Se você precisa repassar várias informações em um slide, tente incorporar o máximo possível desse conteúdo em sua fala, e o mínino possível dele em forma escrita neste slide. Em geral, evite ao máximo incluir textos muito longos em seus slides.</p>
<p>É estranho pensar nisso, mas geralmente, os gestores vão participar e assistir à sua apresentação porque eles estão interessados no que <strong>você</strong> tem a dizer sobre o negócio deles. Portanto, os seus slides são apenas um material de suporte, eles devem ser secundários, um coadjuvante de sua apresentação. Pois a peça principal da apresentação deve ser sempre a sua fala e a história que você quer contar através dela.</p>
<p>Veja o slide em Figura&nbsp;2 como exemplo. O problema principal desse slide, é que ele <strong>divide muito a atenção de seu espectador</strong>.</p>
<div id="fig-texto-longo" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-texto-longo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/texto-longo.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-texto-longo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figura&nbsp;2: Slide com um parágrafo longo
</figcaption>
</figure>
</div>
<p>Ao apresentar um slide, os seus espectadores tem que prestar atenção na sua fala. Isto é, no que você está comunicando verbalmente durante a apresentação. E ao mesmo tempo, eles também precisam prestar atenção no conteúdo do slide. Contudo, esse longo parágrafo no canto esquerdo do slide mostrado em Figura&nbsp;2 é problemático. <strong>Pois ele chama atenção demais!</strong></p>
<p>Esse elemento desperta tanto a nossa curiosidade, que ao ver esse slide, você (leitor deste artigo) provavelmente tentou ler esse texto longo antes mesmo de ler o que estou descrevendo agora neste parágrafo. O mesmo vai acontecer com os espectadores de sua apresentação. Ou seja, os seus espectadores vão imediatamente tentar ler esse parágrafo longo.</p>
<p>Contudo, ler e interpretar um texto longo, exige certo esforço e muita atenção. Como resultado, enquanto os seus espectadores leêm esse texto, eles não vão conseguir prestar atenção em outros elementos de sua apresentação. Por exemplo, na sua fala.</p>
<p>Isso pode ser crucial, pois talvez você traga uma informação a mais, ou uma conexão extremamente importante na sua fala, e eles podem acabar perdendo isso enquanto estão tentando ler esse texto. Portanto, evite ao máximo incluir textos muito longos em seus slides.</p>
</section>
<section id="entregue-sua-história-aos-poucos" class="level3" data-number="4.1.2">
<h3 data-number="4.1.2" class="anchored" data-anchor-id="entregue-sua-história-aos-poucos"><span class="header-section-number">4.1.2</span> Entregue sua história aos poucos</h3>
<p>O cérebro humano consegue processar uma quantidade limitada de informações de uma vez só. Como resultado, se você tentar explicar várias informações para os seus espectadores, em um único slide, eles vão acabar atingindo esse limite 🤯, e simplesmente não vão conseguir raciocinar, compreender ou assimilar o que você está explicando.</p>
<p>Portanto, <strong>entregue a sua história aos poucos</strong>. Evite condensar várias informações em um único slide! Divida o conteúdo em partes, e explique uma parte de cada vez!</p>
<p>Isso ajuda a tornar o conteúdo mais simples, e, como resultado, isso ajuda os seus espectadores a entenderem melhor sobre o que você está falando.</p>
<p>Pense um pouco sobre isso. Quando você busca aprender sobre um assunto complexo (e.g.&nbsp;regressão linear), você provavelmente divide o conteúdo em várias partes pequenas, e, vai aprendendo uma parte de cada vez. Não é assim que você faz? Então traga essa experiência também para as suas apresentações.</p>
</section>
</section>
<section id="sec-historia-conteudo" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="sec-historia-conteudo"><span class="header-section-number">4.2</span> Discutindo histórias e conteúdo</h2>
<p>Agora que vimos duas regras básicas sobre a atenção de seus espectadores (i.e.&nbsp;evite textos longos e entregue sua história aos poucos), vamos discutir algumas dicas sobre o conteúdo de sua apresentação, e, sobre como construir histórias com dados.</p>
<section id="data-storytelling-não-é-sobre-escolher-o-melhor-gráfico" class="level3" data-number="4.2.1">
<h3 data-number="4.2.1" class="anchored" data-anchor-id="data-storytelling-não-é-sobre-escolher-o-melhor-gráfico"><span class="header-section-number">4.2.1</span> <em>Data Storytelling</em> não é sobre escolher “o melhor gráfico”</h3>
<p>Alguns poucos analistas entendem “<em>data storytelling</em>” como um problema de visualização, ou, como a ciência de “escolher os melhores gráficos” para sua apresentação, ou como projetar gráficos inovadores, bonitos e complexos.</p>
<p>Contudo, <em>data storytelling</em> é sobre <strong>contar histórias com dados</strong>. Não sobre como construir visualizações. Escolher a visualização certa para apresentar os seus dados, torná-la melhor, mais bonita e mais limpa, é apenas uma parte do processo. Uma parte muito importante, pois isso vai te ajudar a contar sua história de uma maneira mais clara e eficaz, e, com isso, atingir um público maior.</p>
</section>
<section id="sec-relacoes" class="level3" data-number="4.2.2">
<h3 data-number="4.2.2" class="anchored" data-anchor-id="sec-relacoes"><span class="header-section-number">4.2.2</span> Trace relações entre os indicadores</h3>
<p>Agora, vamos analisar o slide mostrado em Figura&nbsp;3. Perceba que esse slide, novamente, lembra muito uma página de um dashboard. O slide não parece tão cativante à primeira vista, pois ele só mostra os indicadores, ele não constrói uma relação, ou <strong>uma história</strong> entre eles.</p>
<div id="fig-divisao2" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-divisao2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/divisao2.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-divisao2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figura&nbsp;3: Falta de relação entre os indicadores
</figcaption>
</figure>
</div>
<p>Se prestarmos atenção nesses indicadores, podemos identificar alguns efeitos que estão acontecendo ao longo deles. E se refletirmos um pouco mais sobre esses efeitos, vamos perceber que esses efeitos são relacionáveis! E que em conjunto, eles podem contar uma história.</p>
<p>Por exemplo, perceba que há um aumento significativo nas vendas. Tanto no número de propostas vendidas quanto no valor total em si que essas propostas geraram. Porém, perceba que esse crescimento nas vendas não ocorreu no produto “Empréstimo Consignado”, e sim, no produto “Empréstimo com garantia de veículos”. Ou seja, o produto “Empréstimo Consignado” teve uma queda de vendas nesse mês, porém, o produto “Empréstimo com garantia de veículos” obteve um super resultado que conseguiu cobrir e muito essa queda, e no fim, conseguiu aumentar as vendas como um todo do banco.</p>
<p>Além disso, outros efeitos que podemos perceber são os aumentos na taxa de conversão e na taxa de sucesso de API. Esses também são fatores que contribuíram para o aumento nas vendas. Pois um aumento na taxa de conversão significa que uma parcela maior dos nossos clientes está adquirindo os nossos produtos. Já um aumento na taxa de sucesso na API, significa que temos menos erros nos registros das vendas na plataforma, e isso é obviamente positivo, pois nós temos uma perda de vendas menor por causa de travamentos e erros nesse sistema de registro.</p>
<p>Perceba que todas essas relações nos ajudam a <strong>construir uma história</strong> sobre como as vendas aumentaram nesse mês, e é justamente isso que queremos atingir. Portanto, tente sempre construir relações entre os seus indicadores, de modo a formar uma história sobre um resultado principal.</p>
</section>
<section id="sec-mensagem-principal" class="level3" data-number="4.2.3">
<h3 data-number="4.2.3" class="anchored" data-anchor-id="sec-mensagem-principal"><span class="header-section-number">4.2.3</span> Construa sua história em torno de uma mensagem principal</h3>
<p>Apenas para deixar claro essa ideia, ao identificar os vários efeitos que descrevemos em Seção&nbsp;4.2.2, sobre o slide mostrado em Figura&nbsp;3, é interessante nos questionarmos: qual desses vários efeitos é o principal resultado? Em outras palavras, qual desses efeitos é o que mais interessa os gerentes do banco que estão assistindo à sua apresentação?</p>
<p>Certamente o aumento sobre as vendas é o <strong>efeito principal</strong>. É o efeito que mais interessa os gerentes que estão assistindo à sua apresentação. Portanto, tente construir a sua história em torno desse resultado, ou dessa mensagem principal. Use os outros indicadores para explicar como esse resultado principal aconteceu.</p>
<p>Isso também é muito importante! Todo gerente gosta muito de ouvir a palavra “aumento nas vendas”. Porém, ele também está sempre interessado em saber o <strong>“como esse aumento foi gerado?”</strong>. Ou seja, ele precisa saber quais foram as ações realizadas que geraram esse impacto positivo.</p>
<p>Pois ao identificar essas ações, esse gerente tem a capacidade de aplicar essas ações em outras partes de seu negócio, e, com certa esperança, ele pode acabar disseminando esse efeito positivo que você descreveu para outras áreas, e, como resultado, ele pode acabar aumentando ainda mais as vendas da empresa.</p>
</section>
</section>
</section>
<section id="sec-pratica" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Colocando algumas dicas em prática</h1>
<p>Até aqui, nós discutimos as seguintes dicas:</p>
<ol type="1">
<li>Evite textos longos em seus slides;</li>
<li>Trace relações entre os indicadores;</li>
<li>Construa sua história em torno de uma mensagem principal;</li>
<li>Entregue sua história aos poucos;</li>
</ol>
<p>Vamos botar essas dicas em prática, e reformular o slide mostrado em Figura&nbsp;3. Você lembra das relações que descrevemos em Seção&nbsp;4.2.2? Lembra que essas relações traçam uma história sobre o aumento de vendas? Vamos aproveitar essa história para aplicarmos as dicas acima.</p>
<p>Primeiro, estabelecemos que nossa história deve sempre ser construída em torno de uma mensagem principal. Portanto, vamos começar a nossa apresentação nos concentrando em um único slide que mostra essa mensagem principal de forma clara.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/mensagem-principal.png" class="img-fluid figure-img"></p>
<figcaption>A mensagem principal da apresentação</figcaption>
</figure>
</div>
<p>Agora que sabemos qual é o assunto principal da apresentação, podemos começar a cavar mais fundo, e descrever esse assunto em mais detalhes. Como um próximo passo, podemos responder à pergunta “onde esse aumento de vendas ocorreu?”.</p>
<p>Essa pergunta pode ser bastante relevante para sua apresentação, especialmente se: 1) você está apresentando para vários gerentes de diferentes áreas ao mesmo tempo; 2) ou também, se você estiver apresentando para um gerente mais alto na hierarquia, que supervisiona várias áreas/produtos ao mesmo tempo. Pois nestes casos, esses gerentes vão logicamente se perguntar onde esse aumento de vendas ocorreu. Será que foi no produto x? Ou foi no produto y? Etc.</p>
<p>Enfim, vamos responder essa pergunta em um novo slide. Com esse slide, deixamos claro para os espectadores, que um novo produto do banco (empréstimo com garantia sobre veículos) foi a grande estrela do mês, ao gerar R$ 12 Mil em vendas logo no primeiro mês, superando inclusive o valor de vendas do produto já consolidado (empréstimo consignado).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/onde-vendemos.png" class="img-fluid figure-img"></p>
<figcaption>Onde vendemos mais?</figcaption>
</figure>
</div>
<p>A próxima pergunta que precisamos responder é “como?”. Como esse super resultado nas vendas foi gerado? Nós discutimos isso na Seção&nbsp;4.2.3, que após descobrirem um resultado tão importante, os gerentes vão certamente estar interessados em entender como esse resultado foi gerado, para que eles possam difundir esse efeito positivo para outras áreas do negócio.</p>
<p>Lembre-se que temos dois efeitos principais discutidos em Seção&nbsp;4.2.2 que explicam como essa melhoria nas vendas ocorreu. Vamos listá-los de maneira clara e curta em um novo slide:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/porque-vendemos.png" class="img-fluid figure-img"></p>
<figcaption>Por que vendemos mais?</figcaption>
</figure>
</div>
<p>Deixe os detalhes mais específicos dos dois efeitos acima (“qual era o problema na API, e como superamos ele?”, “como isso é uma melhoria?”, “o que é uma taxa de conversão? E como isso afeta o processo de venda?”) para a sua fala. Lembre-se, tente evitar ao máximo colocar textos longos em suas apresentações, e tente dar mais detalhes ou responder às perguntas dos seus espectadores através da fala.</p>
<p>Portanto, com esses três slides nós temos uma estrutura e um conteúdo muito mais interessantes para a nossa apresentação, pois estamos contando uma história sobre como vendemos mais em um determinado mês.</p>
<p>Perceba que a estrutura da apresentação (1: mensagem principal, 2: onde? , 3: como?) nos ajuda a criar o conteúdo e essa história de forma coesa. Nas próximas seções deste artigo, vou discutir duas outras estruturas que podem te ajudar a estruturar e a contar sua histórias de maneira coesa.</p>
</section>
<section id="sec-historias-tem-estrutura" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Histórias tem estrutura, use essas estruturas ao seu favor</h1>
<p>Nas próximas seções, vou mostrar dois exemplos de estruturas bastante comuns em histórias. Essas estruturas servem como um guia durante a construção de sua história. Elas te ajudam muito a organizar as suas ideias em um formato claro e efetivo.</p>
<section id="o-modelo-dos-quatro-cs" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="o-modelo-dos-quatro-cs"><span class="header-section-number">6.1</span> O modelo dos quatro C’s</h2>
<p>O modelo dos quatro C’s se refere a estas quatro palavras:</p>
<blockquote class="blockquote">
<p>Contexto, Conflito, Consequência, Conselho.</p>
</blockquote>
<p>Estas quatro palavras, te ajudam a trazer uma estrutura consistente para a sua história. Além disso, essas palavras também te ajudam a mexer um pouco com as emoções de seus espectadores, e, com isso, capturar mais a atenção deles.</p>
<p>Ao seguir esse modelo, sua história vai sempre se dividir em quatro partes: contexto, conflito, consequência e conselho. Precisamente nesta ordem. Esse estrutura gira em torno de um problema, ou um conflito principal que você identificou no negócio de seu cliente.</p>
<p>O interessante dessa estrutura, é que você pode estacar vários problemas em sequência. Como resultado, você tem um bloco de 4 C’s (contexto, conflito, consequência e conselho), seguido de um outro bloco com mais 4 C’s (contexto, conflito, consequência e conselho). Ou também, você pode começar a apresentação por um contexto, e, em seguida, dois blocos de 3 C’s (conflito, consequência e conselho) em sequência.</p>
<p>Enfim, chega de papo, e vamos descrever em mais detalhes cada uma das partes dessa estrutura.</p>
<section id="começe-por-um-contexto-geral" class="level3" data-number="6.1.1">
<h3 data-number="6.1.1" class="anchored" data-anchor-id="começe-por-um-contexto-geral"><span class="header-section-number">6.1.1</span> Começe por um contexto geral</h3>
<p>Portanto, ao seguir esse modelo, a sua história vai sempre se iniciar por um contexto geral. Algo apenas para contextualizar o espectador sobre qual é o estado atual do negócio.</p>
<p>Lembre-se que, o modelo dos 4 C’s é construído em torno de um conflito, ou de um problema central. Tendo isso em mente, se, por exemplo, o conflito que você for discutir na sua história, for um problema que afeta o serviço de venda de maquininhas de cartão, é importante que você foque nessa parte do contexto, em dar um <em>overview</em> sobre o produto “maquininhas de cartão”.</p>
<p>Em outras palavras, evite trazer contextos nesta parte que não estão relacionados ao problema/conflito que você vai apresentar na seção seguinte. Pois esse conflito é a parte central de sua história.</p>
</section>
<section id="apresente-um-conflitoproblemadesafio-a-ser-superado" class="level3" data-number="6.1.2">
<h3 data-number="6.1.2" class="anchored" data-anchor-id="apresente-um-conflitoproblemadesafio-a-ser-superado"><span class="header-section-number">6.1.2</span> Apresente um conflito/problema/desafio a ser superado</h3>
<p>Em seguida, você deve apresentar um conflito. Isto é, um problema, um desafio ou uma barreira que você tenha identificado no produto/serviço que você está analisando. É aqui que vamos mexer um pouco com a emoção do espectador, e usar isso ao nosso favor para capturar a sua atenção.</p>
<p>Vamos refletir um pouco sobre isso. Ao colocarmos palavras como “problema”, “cuidado”, “desafio”, “alerta”, especialmente em letras garrafais, além de incluir emojis que transmitem esse intuito, como ⚠️ e ⛔. Isso rapidamente chama a atenção de qualquer pessoa, pois te dá uma sensação de perigo, e você entra em um estado de alerta.</p>
<p>Se você refletir mais um pouco sobre isso, você provavelmente vai perceber que você tem esse mesmo instinto quando você está assistindo a um filme, ou a uma série, e o herói dessa história de repente entra em uma situação de perigo. Você rapidamente presta mais atenção no que está acontecendo, pois você quer ver como o herói vai sair dessa enrascada, ou você está torcendo muito para que ele sobreviva e supere esse problema.</p>
<p>Ao apresentarmos um problema sobre o produto/serviço que você está analisando, estamos querendo causar esse mesmo efeito em nossos espectadores. Ao dizermos que temos um desafio/problema que está afetando as vendas da empresa, os gerentes rapidamente começam a prestar mais atenção no que você está dizendo, pois eles querem saber como eles podem sair dessa enrascada!</p>
</section>
<section id="esconder-os-problemas-é-uma-péssima-ideia" class="level3" data-number="6.1.3">
<h3 data-number="6.1.3" class="anchored" data-anchor-id="esconder-os-problemas-é-uma-péssima-ideia"><span class="header-section-number">6.1.3</span> Esconder os problemas é uma péssima ideia</h3>
<p>Isso é muito importante! Alguns analistas tem medo ou receio de jogar luz sobre os problemas existentes, e, por isso, acabam escodendo eles ou omitindo de suas apresentações. Porém, você não está entregando valor nenhum para o seu cliente dessa forma! Você não está ajudando o seu cliente a resolver os problemas e a crescer o negócio dele!</p>
<p>E se os problemas não são solucionados, se eles continuam existindo, eles vão crescer, e crescer, até que eles explodirem, gerando assim um caos generalizado. Em vista disso, quanto mais cedo você identificar esse problema, avisar os gerentes sobre ele, e apresentar possíveis soluções para ele, melhor para os gerentes, que já saem com um plano de ação para resolver esse problema, e é melhor para você também, pois estamos entregando valor e soluções para o cliente.</p>
<p>Portanto, uma boa apresentação, ou um bom relatório de dados, é aquele que entrega valor para o seu cliente! Ao mostrar novas oportunidades de negócio (e.g.&nbsp;atingir uma nova parcela do público com um produto), e também, apresentar soluções para problemas atuais que estão limitando ou impedindo o crescimento do negócio.</p>
<p>Porém, uma apresentação que apenas comenta pontos positivos, que fala que está tudo bem… não traz valor nenhum para os gerentes. Os gerentes não te contrataram para falar que está tudo bem. Eles te contrataram para que você ajude eles a descobrir e solucionar problemas no negócio deles, através da análise de dados.</p>
</section>
<section id="apresente-as-consequências-do-conflitoproblemadesafio-que-você-identificou" class="level3" data-number="6.1.4">
<h3 data-number="6.1.4" class="anchored" data-anchor-id="apresente-as-consequências-do-conflitoproblemadesafio-que-você-identificou"><span class="header-section-number">6.1.4</span> Apresente as consequências do conflito/problema/desafio que você identificou</h3>
<p>Portanto, após apresentar um conflito/problema/desafio que está afetando o negócio para o seu espectador, é importante que você apresente logo em seguida a consequência desse problema. Isso ajuda os gerentes a terem uma dimensão do tamanho que esse problema representa para o negócio deles.</p>
<p>Tudo bem se você não conseguir mensurar em números o tamanho do impacto que esse conflito gerou no negócio. Tente medir esse impacto da melhor forma que você puder. Um valor aproximado do impacto já pode trazer bastante clareza sobre o tamanho do perigo que esse conflito representa para o negócio de seus espectadores.</p>
<p>Você também pode fornecer um <em>range</em>, ou um intervalo possível do impacto se você puder (e.g.&nbsp;o impacto estimado está entre R$ 20 mil e R$ 340 mil). Essa também é uma forma válida de expor o tamanho do problema.</p>
<p>Caso for realmente impossível de mensurar esse impacto em números, então, explique nesta parte, quais são os pontos do processo de venda do produto/serviço que são afetados por esse problema. Em outras palavras, apresente quais são os lugares do negócio que estão sendo, em teoria, afetados por esse conflito.</p>
</section>
<section id="aconselhe-o-seu-cliente-apresente-possíveis-soluções-para-o-problema" class="level3" data-number="6.1.5">
<h3 data-number="6.1.5" class="anchored" data-anchor-id="aconselhe-o-seu-cliente-apresente-possíveis-soluções-para-o-problema"><span class="header-section-number">6.1.5</span> Aconselhe o seu cliente, apresente possíveis soluções para o problema</h3>
<p>Ok, apresentamos um problema, ou um conflito para os nossos espectadores. Também discutimos os impactos desse conflito sobre o negócio de nosso cliente. Agora, precisamos apresentar possíveis soluções para esse problema.</p>
<p>Portanto, entenda o problema/conflito que você está apresentando, e tente listar quais seriam as principais soluções para esse problema, e inclua essas soluções nesta parte de sua apresentação. Vale a pena explicar e discutir esse problema com outros colegas de trabalho também, pois eles também podem sugerir soluções interessantes que estavam fora de seu radar.</p>
<p>É interessante também incluir uma relação dos <em>trade-offs</em> de cada solução, principalmente em questão de complexidade e esforço de cada solução. Gerentes estão constantemente interessados nessa relação, e querem sempre escolher a solução que seja mais simples e mais rápida de ser implementada.</p>
</section>
</section>
<section id="evolução-do-personagem-como-uma-outra-alternativa" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="evolução-do-personagem-como-uma-outra-alternativa"><span class="header-section-number">6.2</span> Evolução do personagem como uma outra alternativa</h2>
<p>A evolução do personagem (ou a “jornada do herói”) é uma estrutura de história bem popular. Você começa por um personagem, ou, um herói para a história, que no nosso caso aqui, pode ser o negócio do nosso cliente, ou um produto específico dele.</p>
<p>Nossa missão é mostrar como esse personagem/herói evoluiu nos últimos meses. Por isso, essa estrutura de evolução é bastante apropriada para relatórios no final do ano. Pois esses relatórios são interessantes para mostrarmos a evolução do negócio (ou a evolução do personagem) no último ano.</p>
<section id="o-início-e-o-fim-da-jornada" class="level3" data-number="6.2.1">
<h3 data-number="6.2.1" class="anchored" data-anchor-id="o-início-e-o-fim-da-jornada"><span class="header-section-number">6.2.1</span> O início e o fim da jornada</h3>
<p>Se você preferir, você pode começar a sua apresentação apresentando como o seu personagem estava no início da jornada, e, terminar essa apresentação mostrando como esse personagem terminou essa jornada.</p>
<p>Essa é uma opção, porém, eu prefiro começar a apresentação mostrando o início e o fim ao mesmo tempo. Desse modo, os espectadores já começam a apresentação tendo uma noção do quanto o negócio evoluiu durante o ano. Portanto, eu começo apresentando como o personagem (ou o negócio/produto) começou o ano, e, logo em seguida, como ele terminou o ano.</p>
</section>
<section id="apresentando-os-desafios-e-percalços" class="level3" data-number="6.2.2">
<h3 data-number="6.2.2" class="anchored" data-anchor-id="apresentando-os-desafios-e-percalços"><span class="header-section-number">6.2.2</span> Apresentando os desafios e percalços</h3>
<p>Em todo negócio/produto, qualquer que ele seja, nós sempre enfrentamos grandes desafios que podem ameaçar o sucesso, ou, limitar a evolução deste negócio/produto.</p>
<p>Portanto, ao longo de qualquer jornada, nós sempre enfrentamos desafios e percalços, e aplicamos ações para tentar superar esses desafios. Ao superar esses desafios, nós podemos com certa esperança gerar a evolução e melhoria desse negócio/produto. Isto é, chegar ao final dessa jornada com um negócio/produto melhor, mais robusto e mais rentável.</p>
<p>Tudo isso significa que o “como percorremos o meio da jornada” pode ser muito mais importante/interessante que o início ou o final dessa jornada. Sendo assim, reserve uma parte de sua apresentação para apresentar os principais desafios que enfrentamos durante essa travessia, e como superamos eles.</p>
</section>
<section id="se-possível-aproveite-para-valorizar-o-trabalho-de-sua-equipe" class="level3" data-number="6.2.3">
<h3 data-number="6.2.3" class="anchored" data-anchor-id="se-possível-aproveite-para-valorizar-o-trabalho-de-sua-equipe"><span class="header-section-number">6.2.3</span> Se possível, aproveite para valorizar o trabalho de sua equipe</h3>
<p>Nesse ponto específico da apresentação, você geralmente tem uma oportunidade muito interessante! Pois você pode, entregar valor ao seu cliente, e, ao mesmo tempo, também valorizar o trabalho de sua equipe, especialmente se foi essa a equipe que descobriu os desafios, e, aplicou as ações que superaram esses desafios que você está descrevendo.</p>
<p>Isso é uma oportunidade de ouro! Portanto, se você tiver essa oportunidade em suas mãos, aproveite ela! Lembre-se que você não trabalha sozinho. Você quase sempre está trabalhando dentro de uma equipe de pessoas, e é sempre importante saber como valorizar o trabalho de seus colegas.</p>
<p>Contudo, essa oportunidade nem sempre vai aparecer para você. Talvez os desafios que você está apresentando, foram superados de outra forma, por uma outra equipe que você não conhece, ou que não possui conexão direta.</p>
</section>
<section id="reforce-os-resultados-alcançados" class="level3" data-number="6.2.4">
<h3 data-number="6.2.4" class="anchored" data-anchor-id="reforce-os-resultados-alcançados"><span class="header-section-number">6.2.4</span> Reforce os resultados alcançados</h3>
<p>Também é útil terminar a sua apresentação, mostrando um resumo dos resultados alcançados ao longo do ano. Isto pode ser um <em>bulletpoint</em> simples, resumindo os principais resultados. Isso ajuda a refrescar a memória de seus espectadores, mostrando a eles não apenas sobre como terminamos a jornada do ano passado, mas também, sobre como nós começamos a jornada do próximo ano 😉.</p>
</section>
<section id="um-resumo-da-estrutura" class="level3" data-number="6.2.5">
<h3 data-number="6.2.5" class="anchored" data-anchor-id="um-resumo-da-estrutura"><span class="header-section-number">6.2.5</span> Um resumo da estrutura</h3>
<p>Portanto, nas seções anteriores discutimos uma ideia de estrutura que seria similar à uma “evolução do personagem”. No final, temos uma história que segue a seguinte sequência:</p>
<ul>
<li>apresente rapidamente como começamos e como terminamos a jornada;</li>
<li>apresente os principais desafios que enfrentamos durante o ano;</li>
<li>quais foram as soluções que aplicamos para solucionar os problemas;</li>
<li>reforce a evolução do personagem, ao mostrar novamente os resultados atingidos com as soluções acima;</li>
</ul>


</section>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Vale relembrar que os números e gráficos apresentados nessa imagem são meramente ilustrativos, e, foram definidos de forma completamente aleatória.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Storytelling</category>
  <category>Data Storytelling</category>
  <category>Data Science</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/pt/</guid>
  <pubDate>Mon, 06 Mar 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-03-06-storytelling/mapa-featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introducing the {ggfunnel} R package</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-02-11-funnel-pkg-v010/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>At my work, I use a lot of funnel charts. Because they are a very effective visualization to see losses trough a sequence of steps in a sales process (or a “sales path”). I usually build these funnel charts in a very popular Microsoft tool called Power BI.</p>
<p>This tool is very popular to build interactive dashboards, and it offers many different native visuals and type of charts to build your visualizations. One visual in particular, is the native funnel chart visual which you can use to visualize your data in a funnel chart, like in the example below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-02-11-funnel-pkg-v010/power-bi.png" class="img-fluid figure-img"></p>
<figcaption>A funnel chart at Power BI</figcaption>
</figure>
</div>
<p>But after working a lot with these charts in Power BI, I tought to myself: “could I make a funnel chart in R?”. The answer is obviously yes! You could definitely drawn a funnel chart with frameworks such as the <code>ggplot2</code> package. However, there was no packages in the community that could build such visualization out of the box.</p>
<p>So I decided to develop a small and experimental R package that could drawn this type of chart. This is how <code>{ggfunnel}</code> was born. In essence, with <code>{ggfunnel}</code>, you can build Power BI like funnel charts in R. The <code>{ggfunnel}</code> package uses the <code>{ggplot2}</code> package (or, more specifically, the <code>ggplot2::geom_tile()</code> geom) to build the funnel chart.</p>
<p><a href="https://github.com/pedropark99/ggfunnel"> <button type="button" class="btn btn-primary">Official repository</button></a> <a href="https://pedropark99.github.io/ggfunnel/"> <button type="button" class="btn btn-primary">Package website</button></a></p>
</section>
<section id="how-to-get-it" class="level1">
<h1>How to get it ?</h1>
<p>For now, <code>{ggfunnel}</code> is available only at GitHub. You can download and install the package with the <code>devtools::install_github()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pedropark99/ggfunnel"</span>)</span></code></pre></div>
</div>
</section>
<section id="a-small-example-of-use" class="level1">
<h1>A small example of use</h1>
<p>The main functionality of the package is at a function called <code>ggfunnel::funnel()</code>, which is responsible for producing the plot. You usually define 3 arguments in this function, which are:</p>
<ul>
<li><code>data</code>: the data.frame with the data you want to use in the plot;</li>
<li><code>values</code>: the column name where are the values you want to display in your funnel chart. In other words, the numerical data that you want to visualize in the chart;</li>
<li><code>levels</code>: the column name with the “levels” (or the “groups”) you want to display in your funnel chart. In other words, the categorical data that identifies each level in the funnel;</li>
</ul>
<p>In the example below, we are using the <code>ggfunnel::aggregates</code> data.frame to build a basic funnel chart:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggfunnel)</span>
<span id="cb2-2">ggfunnel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>aggregates</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 2
  Step  N_users
  &lt;chr&gt;   &lt;dbl&gt;
1 A        4389
2 B        3100
3 C        2005
4 D         500
5 E         120</code></pre>
</div>
</div>
<p>The <code>N_users</code> column is the column with numerical data, so I give it to the <code>values</code> argument of the function. This way, these values will be used to determine the widths of each rectangle in the funnel chart.</p>
<p>In contrast, the <code>Step</code> column contains the categorical data of the dataset. That is why I gave this column to the <code>levels</code> argument of the function. As a result, the values of this column will be used to determine the “levels” of the funnel chart.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggfunnel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funnel</span>(</span>
<span id="cb4-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> ggfunnel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>aggregates,</span>
<span id="cb4-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> N_users, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> Step</span>
<span id="cb4-4">  )</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(plot)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-02-11-funnel-pkg-v010/en/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The above plot is very simple. However, since the output of <code>ggfunnel::funnel()</code> is a native <code>ggplot</code> object, you can customize and extend the plot greatly with the <code>{ggplot2}</code> package. I give examples and details on how you can customize this output at the main vignette (<code>vignette("funnel")</code>) of the package, which you can <a href="https://pedropark99.github.io/ggfunnel/articles/funnel.html">read at the website of the package</a>.</p>
<p>Just as a small demonstration, I can add titles to the plot, adjust the theme, and add some notes and arrows to emphasize some parts of the plot. I can also use other packages which extends <code>{ggplot2}</code> to add more custom outputs to the plot, such as the <code>{ggtext}</code> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggfunnel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>aggregates <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  ggfunnel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funnel</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> N_users, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> Step,</span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_specs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nudge_x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb5-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb5-7">    )</span>
<span id="cb5-8">  )</span>
<span id="cb5-9"></span>
<span id="cb5-10">note <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We lost **75% of the users**&lt;br&gt;from step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">C</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> to step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">plot <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-13">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb5-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Funnel of users in each step of the sales path"</span>,</span>
<span id="cb5-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The biggest loss of users is at the </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> step"</span>,</span>
<span id="cb5-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb5-17">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-18">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb5-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb5-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot"</span></span>
<span id="cb5-21">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-22">  ggtext<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_richtext</span>(</span>
<span id="cb5-23">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>,</span>
<span id="cb5-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> note),</span>
<span id="cb5-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label.color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-26">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-27">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb5-28">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.07</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>), </span>
<span id="cb5-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(</span>
<span id="cb5-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>)</span>
<span id="cb5-31">    )</span>
<span id="cb5-32">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2023/2023-02-11-funnel-pkg-v010/en/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="a-simple-but-far-from-perfect-approach" class="level1">
<h1>A simple (but far from perfect) approach</h1>
<p><code>{ggfunnel}</code> is a very simple (and kind of experimental) package, and it is far from perfect. This means that, currently, <code>{ggfunnel}</code> gives you the minimal code necessary to produce a decent funnel chart. But it does not give you much more functionality than that.</p>
<p>It also makes some assumptions about your data that might not hold, and it does not contain some features that you might find at Power BI (e.g.&nbsp;percentage labels).</p>
<p>But, even being a very simple package, <code>ggfunnel::funnel()</code> always returns the raw <code>ggplot</code> object that describes the funnel chart. This means that the package gives you a lot of freedom to customize (or to complement) the output in the way you might need. See <a href="https://pedropark99.github.io/ggfunnel/articles/funnel.html"><code>vignette("funnel")</code></a> for more details on how to customize/complement the <code>ggfunnel::funnel()</code> output.</p>
<p>However, the package needs some work to be a more robust and complete piece of code, for sure. If you think you can make <code>{ggfunnel}</code> better I would be happy to review a PR from you!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Package</category>
  <category>Power BI</category>
  <category>Funnel charts</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-02-11-funnel-pkg-v010/en/</guid>
  <pubDate>Sat, 11 Feb 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-02-11-funnel-pkg-v010/background-ggfunnel.png" medium="image" type="image/png" height="84" width="144"/>
</item>
<item>
  <title>What I learned from developing my first Python package</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-02-06-python-pckg/en/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>In 2022, I developed my first Python package called <a href="https://github.com/pedropark99/spark_map"><code>spark_map</code></a>, and published it at PyPI. If you want to know more about this package 😉, you can check <a href="https://pedro-faria.netlify.app/posts/2022/2022-12-21-spark-map-v0.2.3/en/">a previous post here</a>, where I introduced the package, and described it’s main features, and showed a small use case.</p>
<p>Now, although <code>spark_map</code> is a small Python package, I had a hard time developing it. More specifically, the Python code was not hard at all to develop. But packaging it into a proper package 📦 was hard. In this post, I want to share a few things that I learned about Python package development in this process.</p>
<p>I hope these tips help you in some way 😉. In summary, the main tips discussed here are:</p>
<ul>
<li><p>Do not change the <code>sys.path</code> or <code>PYTHONPATH</code> variable inside your package ⚠️;</p></li>
<li><p>Differences between a package and a module;</p></li>
<li><p>Nailing the structure 🏛️ of your package can be one the hardest parts;</p></li>
<li><p>If you use <code>setuptools</code> to build your package, avoid <code>setup.py</code> and use <code>pyproject.toml</code> instead;</p></li>
<li><p>Check if your Python modules are included on the built versions of your package;</p></li>
</ul>
</section>
<section id="before-i-say-anything-some-references" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Before I say anything, some references</h1>
<p>The development of this package involved reading several articles 📓, and doing some practical tests 🧪. Here I share some of the best resources I discovered along the way.</p>
<p>First, a great article to start your project is the <a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Packaging Python Projects</a> tutorial. This tutorial is written by PyPA, or, the <a href="https://www.pypa.io/en/latest/">Python Packaging Authority</a> team<sup>1</sup>, and it seems to be “The Place” to search for best practices on Python package projects.</p>
<p>The PyPA team also have a very detailed documentation about <a href="https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/">Packaging and distributing projects</a> with <code>setuptools</code>. This is a more technical, detailed documentation, but, it can be a great resource too.</p>
<p>Another very useful article to learn about the structure of a Python package, and the import process of Python, is the article entitled <a href="https://dev.to/codemouse92/dead-simple-python-project-structure-and-imports-38c6">Dead Simple Python: Project Structure and Imports</a> from Jason C. McDonald.</p>
</section>
<section id="now-lets-dive-in" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Now, let’s dive in</h1>
<section id="the-search-path-of-python" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="the-search-path-of-python"><span class="header-section-number">3.1</span> The search path of Python</h2>
<p>We usually import a package in Python, by including a <code>import</code> statement at the beginning of our script. For example, to import the <code>pandas</code> package to my Python session, I could do this:</p>
<div id="951ca647" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas</span></code></pre></div>
</div>
<p>When you import a package in Python, the Python interpreter starts a search process 🔍 through your computer, to find the specific package you called in your script. Every Python package you use must be installed in your machine. Otherwise, Python will never find it, and, as a consequence, you can not use it.</p>
<p>The Python interpreter will always look for the packages you import, inside a set of pre-defined locations of your computer. This pre-defined list is stored inside the <code>sys.path</code> variable <span class="citation" data-cites="pymodule">(Foundation 2023c)</span>. In other words, when you import a package, Python looks for this package inside each one of the directories listed at <code>sys.path</code> variable.</p>
<div id="403756fb" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sys.path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['/usr/lib/python310.zip', '/usr/lib/python3.10', '/usr/lib/python3.10/lib-dynload', '', '/home/pedro-dev/.local/lib/python3.10/site-packages', '/usr/local/lib/python3.10/dist-packages', '/usr/lib/python3/dist-packages']</code></pre>
</div>
</div>
<p>You might also find contents about the <code>PYTHONPATH</code> variable when searching for this subject on the internet. In essence, <code>PYTHONPATH</code> is a environment variable that can contain a complementary list of directories to be added to <code>sys.path</code> <span class="citation" data-cites="pypathvar">(Foundation 2023a)</span>.</p>
<p>As you can imagine, the Python interpreter look into these directories in a sequential manner. That is, Python looks for the package at the first folder. If it does not find the package you called, then, it looks at the second folder. If it does not find the package again, it looks at the third folder. And goes on and on, until it hits the last folder of the list.</p>
<p>If does not find the package you called at this last folder, Python will automatically raise a <code>ModuleNotFoundError</code> error. As you expect, this error means that Python could not find the package you called at any of the directories listed at <code>sys.path</code>.</p>
</section>
<section id="do-not-change-the-sys.path-or-pythonpath-variable" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="do-not-change-the-sys.path-or-pythonpath-variable"><span class="header-section-number">3.2</span> Do not change the <code>sys.path</code> or <code>PYTHONPATH</code> variable ⚠️</h2>
<p>The <code>sys.path</code> variable is a standard Python list, and, as any other list, can be altered to include other directories that are not currently there. The same goes for the <code>PYTHONPATH</code> variable, which is an environment variable, and can be altered too.</p>
<p>As an example, when you try to import your package, which is stored at folder <code>A</code>, and, you face a <code>ModuleNotFoundError</code> error, you might be tempted to alter <code>PYTHONPATH</code> or <code>sys.path</code>, to add the folder <code>A</code> to this search path of Python. DO NOT DO IT! YOU SHOULD NEVER alter <code>PYTHONPATH</code> or <code>sys.path</code> ⚠️ ! I mean, at least not inside a Python package.</p>
<p>In other words, if at some point inside the source code of your Python package, you execute a code like this:</p>
<div id="c504ad50" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb4-2">sys.path.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./../weird-unknow-folder'</span>)</span></code></pre></div>
</div>
<p>just erase this code! Python packages are made to be used by other peoples, and with a code like this above, you will change the search path of this user. Changing the search path of a user is a bad idea. Because you can accidentaly produce bad and confusing side effects to the user’s session, which can be hard to debug and solve.</p>
<p>Besides, in the majority of times when you alter the <code>sys.path</code>, you are trying to overcome a bad structure of your files. In other words, you can always avoid altering the <code>sys.path</code> variable by changing the structure of your source files inside your project.</p>
<p>Just to be clear, is a bad idea to alter the <code>sys.path</code> inside the source code of your package. However, it is ok to alter these variables outside of your package.</p>
<p>As a practical example, Apache Spark is written in Scala. But it have a Python API available through the <code>pyspark</code> package. If you look closely into the source code of the project, or, more specifically at the <a href="https://github.com/apache/spark/blob/master/python/run-tests.py"><code>run-tests.py</code></a> file, you can see that new paths (or new directories) are appended to <code>sys.path</code> in this file.</p>
<p>However, this <code>run-tests.py</code> file IS NOT A PART of the <code>pyspark</code> package itself. It is just an auxiliary script (outside of the package) used to support the testing processes of <code>pyspark</code>. This means that <code>run-tests.py</code> contains code that is not intended to be executed by the users of the package, but by the developers of <code>pyspark</code> instead.</p>
</section>
<section id="differences-between-a-package-and-a-module" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="differences-between-a-package-and-a-module"><span class="header-section-number">3.3</span> Differences between a package and a module</h2>
<p>This is a very basic knowledge for a Python developer. However, until recently, I did not know the meaning of these two concepts. So, I will give it to you now, in case you do not have it yet.</p>
<p>A Python module is a single Python file (i.e.&nbsp;a file with extension <code>.py</code>). Every Python script you write, is a Python module. In contrast, a Python package is a set of Python modules gathered together inside a folder. This folder must contain a particular Python module named as <code>__init__.py</code>. This <code>__init__.py</code> is the file that “initialize”, or, “identifies” this folder as a Python package <span class="citation" data-cites="pypackages">(Foundation 2023b)</span>.</p>
<p>You can have multiple Python packages inside a Python package. That is, inside the directory of your package, you can have multiple sub-directories with more Python modules and <code>__init__.py</code> files. In this case, these sub-directories become submodules of the package. You can interpret them as sub-packages, if you prefer.</p>
</section>
<section id="structuring-the-package-was-one-of-the-hardest-parts" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="structuring-the-package-was-one-of-the-hardest-parts"><span class="header-section-number">3.4</span> Structuring the package was one of the hardest parts</h2>
<p>Every Python package follows the same basic file/directory structure 🏛️. In other words, the files that compose a Python package are always structured in a standard way. But, understanding and using this structure effectively was one of the hardest parts for me. At this section, I want to explain this structure for you.</p>
<p>In a Python package project, you usually have these <strong>files</strong>:</p>
<ul>
<li><p><code>LICENSE.md</code> or <code>LICENSE.rst</code> (or both): a text file with the license of your package. It can be a Markdown file (<code>.md</code>), or, a reStructuredText markup file (<code>.rst</code>);</p></li>
<li><p><code>README.md</code>: a Markdown file introducing your package. That is, a file that describes succintly the objective of the package, its main features, and showing a small example of use of the package;</p></li>
<li><p><code>setup.py</code> or <code>pyproject.toml</code> or <code>setup.cfg</code>: these are files used by the build system you choose to build (or compile) your Python package into a compact and shareable format;</p></li>
</ul>
<p>Also, a Python package project usually contains these <strong>folders (or directories)</strong>:</p>
<ul>
<li><code>src/&lt;package-name&gt;/</code> or <code>&lt;package-name&gt;/</code>: inside this directory you store all Python modules of your package, that is, the source code of your package;</li>
<li><code>tests/</code>: inside this directory you store all unit tests of your package. In other words, the scripts and automated workflow used to test your package.</li>
</ul>
<!--
- `doc/` or `docs/`: inside this directory you store all documentation files. That is, files that document your package, describe its contents, functionality and concepts;
-->
<p>You must store the source code (or the python modules) of your package inside a folder with the same name as the package itself (i.e.&nbsp;the <code>&lt;package-name&gt;/</code> folder). So, for a package named <code>spark_map</code> we should keep the source files (i.e.&nbsp;the <code>.py</code> files) of this package inside a folder called <code>spark_map</code>. As a practical example, if you <a href="https://github.com/pandas-dev/pandas/tree/main/pandas">look at the source code</a> of the famous <code>pandas</code> package, you will see that all source code of the package is stored inside a folder called <code>pandas</code>.</p>
<p>In contrast, this <code>&lt;package-name&gt;/</code> folder might be (or might be not) inside another folder called <code>src/</code>, that is, the path to the source code might be <code>src/&lt;package-name&gt;/</code> instead of <code>&lt;package-name&gt;/</code>. The <code>pandas</code> package for example, do not uses the <code>src/</code> folder, so the source code is stored inside the <code>pandas/</code> folder. In contrast, the famous <code>flask</code> package uses the <code>flask/</code> folder inside a <code>src/</code> folder, so the path to the source code becomes <code>src/flask</code>. <a href="https://github.com/pallets/flask/tree/main/src/flask">You can check this by looking at the source code of the package.</a>.</p>
<p>So the folder structure to store the source code of the package might change very slightly from package to package. There is no consensus about which one of these two structures is the best. But in general, the source is always stored inside a folder with the same name as the package (i.e.&nbsp;the <code>&lt;package-name&gt;/</code> folder). And this folder might be stored inside a <code>src/</code> folder.</p>
<p>Furthermore, every project of a Python package usually have one, two, or more files that <strong>control the build process of the package</strong> (like <code>setup.py</code>, <code>pyproject.toml</code> or <code>setup.cfg</code>). In other words, these files are not part of the package itself. But they are used by the <strong>build system</strong> to build (or compile) your package into a compact and shareable format. I talk more about these files at Section&nbsp;3.5.</p>
<p>Having in mind all these files that we described until here, we can build a example of file structure for a package. For example, a possible file strucuture for a package named <code>haven</code> could be:</p>
<pre><code>.
├── LICENSE.md
├── LICENSE.rst
├── README.md
├── pyproject.toml
├── src
│   └── haven
│       ├── __init__.py
│       ├── functions.py
│       ├── utils.py 
│       └── haven.py
│
└── tests
    ├── test_functions.py
    └── test_haven.py</code></pre>
</section>
<section id="sec-build-systems" class="level2" data-number="3.5">
<h2 data-number="3.5" class="anchored" data-anchor-id="sec-build-systems"><span class="header-section-number">3.5</span> Introducing build systems</h2>
<p>When you are developing a package, you write multiple Python modules that perform all necessary tasks to solve the specific problem you want to solve with your package. However, in order to distribute this package to other peoples, that is, to make it available to the wide public, you need to compile (or build) your package into a compact and shareable format.</p>
<p>This is what a build system does. It compiles all archives of your package into a single and compact file that you can publish at PyPI, and distribute to other peoples. This means that, when a user downloads your package (through <code>pip</code> for example), it downloads this compact and shareable version of your package.</p>
<p>On the day of writing this article, there are four main build systems available on the market for Python packages, which are <code>hatchling</code>, <code>setuptools</code>, <code>flit</code> and <code>PDM</code>. No matter which one you use, just choose one, anyone. Because they do the same thing, and work in a very similar way.</p>
<p>Most of them use various metadata stored at the <code>pyproject.toml</code> file to build your project. The <code>setuptools</code> build system is probably a exception to this rule, because this build system supports other kinds of files to store this metadata, which are <code>setup.py</code> and <code>setup.cfg</code>.</p>
<section id="the-pyproject.toml-file-as-the-commom-ground" class="level3" data-number="3.5.1">
<h3 data-number="3.5.1" class="anchored" data-anchor-id="the-pyproject.toml-file-as-the-commom-ground"><span class="header-section-number">3.5.1</span> The <code>pyproject.toml</code> file as the commom ground</h3>
<p>The <a href="https://peps.python.org/pep-0517/">PEP517</a> and <a href="https://peps.python.org/pep-0518/">PEP518</a> were lauched to stablish the <code>pyproject.toml</code> file as the commom ground to every build system. Basically, the <code>pyproject.toml</code> is a file included at the root level of your project, and contains metadata about your package (e.g.&nbsp;it’s name, version, license, description, author, dependencies, etc.).</p>
<p>It represents a “commom ground” because all build systems available can read and use this file to build (or compile) your package. As a consequence, with this file, you can change very easily the build system you use in your package, without having to change various configurantions and files. All you have to do is to change the options under the <code>build-system</code> table.</p>
<p>This <code>build-system</code> table is the part of <code>pyproject.toml</code> file where you can specify options and configurations for the build system. As an example, to use the <code>setuptools</code> build system, you would add these lines to <code>pyproject.toml</code>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[build-system]</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools.build_meta"</span></span></code></pre></div>
<p>In the other hand, if you want to use the <code>hatchling</code> build system instead, you would change the above lines to:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[build-system]</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hatchling"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hatchling.build"</span></span></code></pre></div>
<p>Or, maybe you prefer <code>flit</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[build-system]</span></span>
<span id="cb8-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flit_core"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flit_core.buildapi"</span></span></code></pre></div>
<p>Anyway, you get it. You use the options <code>requires</code> and <code>build-backend</code> under the <code>build-system</code> table to specificy which system you want to use in the building process of your package. All of these different systems will use <code>pyproject.toml</code> to collect other very important metadata about your package, like these metadata below:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[project]</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark_map"</span></span>
<span id="cb9-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.2.77"</span></span>
<span id="cb9-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">authors</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb9-5">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pedro Faria"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">email</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pedropark99@gmail.com"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pyspark implementation of `map()` function for spark DataFrames"</span></span>
<span id="cb9-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">readme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span></span>
<span id="cb9-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires-python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=3.7"</span></span>
<span id="cb9-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">license</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LICENSE.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span>
<span id="cb9-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">classifiers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb9-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Programming Language :: Python :: 3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"License :: OSI Approved :: MIT License"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Operating System :: OS Independent"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb9-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyspark"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setuptools"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toml"</span></span>
<span id="cb9-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</section>
<section id="the-setuptools-build-system" class="level3" data-number="3.5.2">
<h3 data-number="3.5.2" class="anchored" data-anchor-id="the-setuptools-build-system"><span class="header-section-number">3.5.2</span> The <code>setuptools</code> build system</h3>
<p>The <code>setuptools</code> build system is the system that I use to build <code>spark_map</code>. It is kind of a more “versatile”<sup>2</sup> system than the others, only because it supports other kinds of files besides <code>pyproject.toml</code>.</p>
<p>The <code>setup.py</code> file is probably the most “famous” file, or, the most associable to <code>setuptools</code>. Although this is changing in recent years (more about this at the next section), the <code>setup.py</code> is still considered the traditional way of using the system, as the documentation itself says:</p>
<blockquote class="blockquote">
<p>The traditional <code>setuptools</code> way of packaging Python modules uses a <code>setup()</code> function within the <code>setup.py</code> script. <span class="citation" data-cites="setuptools">(Authority 2023)</span></p>
</blockquote>
<p>In summary, you can replace <code>pyproject.toml</code> with the <code>setup.py</code> file. Just as an example, I could replace the <code>pyproject.toml</code> file for <code>spark_map</code> with a <code>setup.py</code> file similar to the file below. The whole <code>setup.py</code> file is usually composed of just a single call to the <code>setuptools.setup()</code> function, and nothing more. All of the various metadata about the package stored at <code>pyproject.toml</code> are translated to named arguments to this <code>setup()</code> function.</p>
<div id="91ff760d" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup.py placed at root directory</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> setuptools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> setup</span>
<span id="cb10-3">setup(</span>
<span id="cb10-4">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark_map'</span></span>
<span id="cb10-5">    version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0.2.77'</span>,</span>
<span id="cb10-6">    author <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pedro Faria'</span>,</span>
<span id="cb10-7">    description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pyspark implementation of `map()` function for spark DataFrames'</span>,</span>
<span id="cb10-8">    long_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>,</span>
<span id="cb10-9">    license <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LICENSE.txt"</span> }</span>
<span id="cb10-10">    classifiers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Programming Language :: Python :: 3"</span>,</span>
<span id="cb10-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"License :: OSI Approved :: MIT License"</span>,</span>
<span id="cb10-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Operating System :: OS Independent"</span>,</span>
<span id="cb10-14">    ],</span>
<span id="cb10-15">    python_requires <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&gt;=3.7'</span>,</span>
<span id="cb10-16">    install_requires <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pyspark'</span>],</span>
<span id="cb10-17">    extras_require <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'setuptools'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'toml'</span>]</span>
<span id="cb10-18">)</span></code></pre></div>
</div>
<p>However, if you use a <code>setup.py</code> file you become kind of locked into the <code>setuptools</code> framework. This one the reasons why many developers prefer to use the <code>pyproject.toml</code> file instead. Because it becomes so much more easy to change between build systems if you want to.</p>
<p>Another “clash point” about the <code>setup.py</code> file is that it changes the way, or the steps (or the worflow) to build the package. The standard or the most supported strategy to build a package, is to use the <code>build</code> module command of Python at the terminal. This command will build your package, no matter which build system you use:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you are on Windows:</span></span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">py</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> build</span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you are on Linux:</span></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> build</span></code></pre></div>
<p>In contrast, when you use the <code>setup.py</code> file, you have to execute directly the script with some additional options, like <code>sdist</code>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you are on Windows:</span></span>
<span id="cb12-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">py</span> setup.py sdist</span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you are on Linux:</span></span>
<span id="cb12-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> setup.py sdist</span></code></pre></div>
<p>Again, this is bad, because it forces you into a certain framework, or, a certain workflow that is different than the standard way of building a package.</p>
</section>
<section id="avoid-setup.py-and-use-pyproject.toml-instead" class="level3" data-number="3.5.3">
<h3 data-number="3.5.3" class="anchored" data-anchor-id="avoid-setup.py-and-use-pyproject.toml-instead"><span class="header-section-number">3.5.3</span> Avoid <code>setup.py</code> and use <code>pyproject.toml</code> instead</h3>
<p>The Python community understood this problem, and now, executing the <code>setup.py</code> script directly is heavily discouraged <span class="citation" data-cites="ganssle">(Ganssle 2021)</span>. Actually, the <code>setuptools</code> project itself started a movement to migrate it’s functionality to <code>pyproject.toml</code> and <code>setup.cfg</code> files.</p>
<p>This concern is clearly documented at <a href="https://setuptools.pypa.io/en/latest/userguide/quickstart.html#basic-use">the “Quick Start” section</a> of the official documentation for the project:</p>
<blockquote class="blockquote">
<p>Setuptools offers first class support for <code>setup.py</code> files as a configuration mechanism … It is important to remember, however, that running this file as a script (e.g.&nbsp;<code>python setup.py sdist</code>) is strongly discouraged, and that the majority of the command line interfaces <strong>are (or will be) deprecated</strong> (e.g.&nbsp;<code>python setup.py install</code>, <code>python setup.py bdist_wininst</code>, …) … We also recommend users to expose as much as possible configuration in a more declarative way via the <code>pyproject.toml</code> or <code>setup.cfg</code>, and keep the <code>setup.py</code> minimal with only the dynamic parts (<strong>or even omit it completely if applicable</strong>).</p>
</blockquote>
<p>In resume, avoid using <code>setup.py</code> in your project, and use <code>pyproject.toml</code> instead with the <code>python -m build</code> command. This a much more recommended workflow for building your package.</p>
</section>
</section>
</section>
<section id="one-of-the-hardest-bugs-i-ever-faced-in-my-life" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> One of the hardest bugs I ever faced in my life</h1>
<p>While developing <code>spark_map</code> I encoutered one of the hardest and weirdest bugs I ever faced in my life. Since it was really hard to find this bug, I want to reveal it here to you, and describe how it happens.</p>
<p>First, a little bit of context. This bug was present at the version 0.2.7 of the package, and, you can look at the exact source of this version, by searching for the <a href="https://github.com/pedropark99/spark_map/tree/v0.2.7">git tag <code>v0.2.7</code> at the source code history</a>. At this point, the package was ready to be shipped to PyPI.</p>
<p>I had no problems at building the package. When I executed the command <code>python -m build</code>, the package was built successfully, without any error or warning messages. The source and wheel distributions of the package were there.</p>
<p>I had no problemas at importing the package. I could start a new Python session, and use a <code>import</code> statement to import the package, and that statement would execute flawlessly.</p>
<p>I had no problems at the unit tests of the package. When I executed the command <code>pytest</code> to initiate the unit tests runs, I was passing in all tests. Again, I had no error or warning messages appearing.</p>
<p>Everything seemed to work perfectly. As a consequence, I was ready to publish the package at PyPI, and that is what I did. I published at PyPI. Than, I started to test the package at PyPI.</p>
<p>First, I tried to install the package with <code>pip install spark_map</code>, and everything worked fine at the installation process. The package version was right, and, after the installation process, when I executed the <code>pip list</code> command, I could clearly see <code>spark_map</code> on the list of installed packages.</p>
<p>However, I SIMPLY COULD NOT IMPORT THE PACKAGE! The package was installed succesfully, and with that in mind, I expected to import it succesfully in any Python module, at any location of my computer. However, when I started a new Python session at a random location of my computer, and tried to import the package, the Python interpreter always raised a <code>ModuleNotFoundError</code> error.</p>
<section id="sec-weird-problem" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="sec-weird-problem"><span class="header-section-number">4.1</span> How did this problem occur</h2>
<p>There was no error or warning messages at the building stage of the package, neither in the installation process as well. But something was definitely wrong with the package.</p>
<p>In essence, the source of this weird and confusing problem was at the building stage of the package. Basically, the build system (in that case, the <code>setuptools</code>) was not able to automatically find all source files (i.e.&nbsp;the <code>.py</code> files) of the package. As a result, the build system was building the package, but, not including the source files inside this built version of the package. Very weird! Isn’t it?</p>
<p>I mean, if the build system did not find any source files… it should definitely raise a warning or error during the build process. Because this is definitely an error in the process. How or why can you share a Python package, which have no Python source code? If the package does not contain any Python code in it, it is probably not a Python package. Right?</p>
<p>That is why I could not import the package after I installed it on my machine, trough <code>pip</code>. Because the version of the package that was being installed on my machine, was a version of the package that had no Python source code that could be imported. That is why the <code>ModuleNotFoundError</code> error was being raised by the Python interpreter when I tried to import the package.</p>
</section>
<section id="how-to-identify-this-problem" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="how-to-identify-this-problem"><span class="header-section-number">4.2</span> How to identify this problem</h2>
<p>First, when you build your package, usually two main files are created, which are: 1) the <em>wheel</em> distribution of your package; 2) the <em>source</em> distribution of your package. These are just two different formats in which you can ship and share your package with another human.</p>
<p>The source distribution is a TAR file (with <code>.tar</code> or <code>.tar.gz</code> extension). Is just a compressed file (like ZIP files) with all of the essential files that compose your package (i.e.&nbsp;the metadata of the package, the source files - <code>.py</code> files, README and LICENSE files, etc.).</p>
<p>On the other hand, the wheel distribution (files with <code>.whl</code> extension), is “pre-compiled” version of your package. This means that a wheel version of your package comes in a ready-to-install format, and, as a consequence, is much faster to install this version of your package, in comparison to source distributions, which must be compiled before being installed on your system.</p>
<p>To identify if the problem I described at Section&nbsp;4.1 is happening inside your package project, I recommend you to focus your attention on the source distribution of your package (i.e.&nbsp;the TAR file - <code>.tar</code> or <code>.tar.gz</code>). Because you can easily open this kind of file with decompressing tools, like <code>WinRar</code> or <code>7-zip</code>, and it is much more easy to analyze than the wheel distribution.</p>
<p>In resume, if you open the TAR file, and, you do not find any Python modules (i.e.&nbsp;<code>.py</code> files) in it, this means that the problem I described at Section&nbsp;4.1 is unfortunately happening inside your package. In contrast, if you do find all Python modules of your package inside this TAR file, than, you are safe and good to go forward.</p>
<p>To fix this problem inside my package project, I had to add the lines below to my <code>pyproject.toml</code> file. These lines tell <code>setuptools</code> which are the packages available inside the project, and, which is the folder inside the project where all the source code of the package was stored.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.setuptools]</span></span>
<span id="cb13-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark_map"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb13-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">package-dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>It was so hard to find this bug, yet, it was quite simple and straightforward to fix it 😑 (poker face). With these options, <code>setuptools</code> could finally find all the Python modules of my package, and, as a consequence, include them in the built versions of the package (in the source and in the wheel distributions).</p>
<p>Therefore, if you face a <code>ModuleNotFoundError</code> error when you try to import your package, after you installed it in your computer with <code>pip</code>, I recommend you to check if your Python modules are being included on the built versions of your package.</p>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-setuptools" class="csl-entry">
Authority, Python Packaging. 2023. <span>“Setuptools Documentation.”</span> <a href="https://setuptools.pypa.io/en/latest/index.html">https://setuptools.pypa.io/en/latest/index.html</a>.
</div>
<div id="ref-pypathvar" class="csl-entry">
Foundation, Python Software. 2023a. <span>“Environment Variables.”</span> <em>Python 3.11.1 Documentation</em>. <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH">https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH</a>.
</div>
<div id="ref-pypackages" class="csl-entry">
———. 2023b. <span>“Packages.”</span> <em>Python 3.11.1 Documentation</em>. <a href="https://docs.python.org/3/tutorial/modules.html#packages">https://docs.python.org/3/tutorial/modules.html#packages</a>.
</div>
<div id="ref-pymodule" class="csl-entry">
———. 2023c. <span>“The Module Search Path.”</span> <em>Python 3.11.1 Documentation</em>. <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path">https://docs.python.org/3/tutorial/modules.html#the-module-search-path</a>.
</div>
<div id="ref-ganssle" class="csl-entry">
Ganssle, Paul. 2021. <span>“Why You Shouldn’t Invoke Setup.py Directly.”</span> <a href="https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html">https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Probably a bad name for a team. But, that is just my opinion.↩︎</p></li>
<li id="fn2"><p>And I mean these quotation marks, because I am not sure to call a system which can be out of the standard as “being more versatile”, or not.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Package</category>
  <category>Development workflow</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-02-06-python-pckg/en/</guid>
  <pubDate>Mon, 06 Feb 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-02-06-python-pckg/package.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>JOINs são importantes fontes de duplicações em seus dados</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2023/2023-01-10-join-duplicates/pt/</link>
  <description><![CDATA[ 





<section id="introdução" class="level1">
<h1>Introdução</h1>
<!--
A regra de ouro da programação DRY (*do not repeat yourself*) também pode influenciar outras dimensões de sua vida. Por exemplo, se você der o mesmo conselho para uma pessoa pela terceira vez ou mais, é melhor que você escreva ou documente esse conselho de alguma forma. Desse modo, você pode disseminar esse conselho para outras pessoas de forma mais efetiva. Esse post é um reflexo direto disso:

> When you’ve written the same code 3 times, write a function. When you’ve given the same in-person advice 3 times, write a blog post. ROBINSON, David, 2017 ^[Essa citação vem de um tweet de David Robinson, o qual está disponível no link: <https://twitter.com/drob/status/928447584712253440?s=20&t=5gy5SkBKGr6oXsWcg9LIag>].
-->
<p>Quando estamos construindo uma nova tabela de dados, é muito comum compararmos os nossos resultados com tabelas anteriores e nos depararmos com problemas de divergência nos dados. Isto é, situações como:</p>
<blockquote class="blockquote">
<p>Uhmm… a tabela antiga indica que o número de maquininhas vendidas no mês de Dezembro foi de 1387. Porém, esse mesmo indicador na tabela nova está em 1824 para o mesmo mês de Dezembro. Porque esse aumento?</p>
</blockquote>
<p>Aumentos desse tipo podem ocorrer por uma variedade de razões. Porém, operações de JOIN tem sido uma razão específica que tenho enfrentado com muita frequência em meu trabalho. Em outras palavras, JOINs são fontes extremamente comuns de dados duplicados. Como resultado, esses dados duplicados acabam gerando um “efeito expansivo” sobre os seus indicadores e suas tabelas.</p>
<p>Muitos analistas não compreendem o porquê, ou não enxergam como isso pode ocorrer. Nesse post, busco justamente esclarecer como uma operação de JOIN pode causar esse “efeito expansivo” em seus dados. Eu também explico esse efeito em detalhes no capítulo 6 do meu livro introdutório da linguagem R. Mais especificamente, a partir da seção <a href="https://pedropark99.github.io/Introducao_R/introdu%C3%A7%C3%A3o-a-base-de-dados-relacionais-com-dplyr.html#rela%C3%A7%C3%B5es-entre-keys-primary-keys-s%C3%A3o-menos-comuns-do-que-voc%C3%AA-pensa">Relações entre <em>keys: primary keys</em> são menos comuns do que você pensa</a>. Portanto, grande parte do conhecimento exposto aqui são referências diretas ao livro.</p>
</section>
<section id="esse-efeito-independe-da-linguagem-de-programação-utilizada" class="level1">
<h1>Esse efeito independe da linguagem de programação utilizada</h1>
<p>Por opção minha, vou utilizar exemplos na linguagem R para demonstrar esse “efeito expansivo” de JOINs. Mas você poderia facilmente transpor todos esses exemplos para qualquer outra linguagem de sua preferência (e.g.&nbsp;como o Python).</p>
<p>Ou seja, o conhecimento exposto aqui <strong>independe da linguagem utilizada</strong>. Pois o efeito descrito aqui é uma característica intrínseca ao processo de JOIN, e não da linguagem utilizada.</p>
</section>
<section id="um-exemplo-de-efeito-expansivo" class="level1">
<h1>Um exemplo de efeito expansivo</h1>
<p>Para demonstrar esse efeito expansivo, vou utilizar as tabelas <code>cores_de_pele</code> e <code>alturas</code> como exemplo. Podemos visualizar os dados dessas duas tabelas abaixo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">cores_de_pele</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
     ID Cor    
  &lt;dbl&gt; &lt;chr&gt;  
1   100 Pardo  
2   102 Branco 
3   104 Branco 
4   105 Amarelo</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">alturas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  DataRegistro    ID Altura
  &lt;date&gt;       &lt;dbl&gt;  &lt;dbl&gt;
1 2022-01-10     102   1.58
2 2022-01-10     105   1.72
3 2022-06-12     105   1.74
4 2022-08-24     105   1.75</code></pre>
</div>
</div>
<section id="necessidade-inicial" class="level2">
<h2 class="anchored" data-anchor-id="necessidade-inicial">Necessidade inicial</h2>
<p>Vamos supor que, no início, você precisava manter um indicador de “número de usuários por cor de pele” em um relatório. Para isso, você simplesmente contava o número de linhas na tabela <code>cores_de_pele</code> agrupado pelos valores da coluna <code>Cor</code>. Como demonstrado abaixo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-2">usuarios_por_cor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cores_de_pele <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Cor) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N_usuarios =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span>
<span id="cb5-5"></span>
<span id="cb5-6">usuarios_por_cor</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  Cor     N_usuarios
  &lt;chr&gt;        &lt;int&gt;
1 Amarelo          1
2 Branco           2
3 Pardo            1</code></pre>
</div>
</div>
</section>
<section id="uma-nova-necessidade" class="level2">
<h2 class="anchored" data-anchor-id="uma-nova-necessidade">Uma nova necessidade</h2>
<p>Porém, uma nova necessidade surge no time. Agora, você precisa calcular também a “altura média por cor de pele”. Você sabe que as alturas dos usuários estão armazenadas na tabela <code>alturas</code>, contudo, você precisa trazer essas alturas para dentro da tabela <code>cores_de_pele</code>, para que você possa de fato calcular a altura média para cada cor de pele.</p>
<p>Portanto, você precisa realizar um JOIN entre essas tabelas, e é isso que estamos fazendo no código abaixo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">dados <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cores_de_pele <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(alturas, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>)</span></code></pre></div>
</div>
<p>Agora, temos uma nova tabela chamada <code>dados</code> que contém todos os dados que precisamos para calcular ambos os indicadores (“número de usuários” e “altura média”) para cada cor de pele. Entretanto, quando calculamos esses indicadores com essa tabela <code>dados</code>, perceba que o número de usuários (indicador <code>N_usuarios</code>) de cor “Amarelo” sofreu um <strong>aumento repentino</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">indicadores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dados <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Cor) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb8-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N_usuarios =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb8-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Altura_media =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(Altura, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-6">    )</span>
<span id="cb8-7"></span>
<span id="cb8-8">indicadores</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  Cor     N_usuarios Altura_media
  &lt;chr&gt;        &lt;int&gt;        &lt;dbl&gt;
1 Amarelo          3         1.74
2 Branco           2         1.58
3 Pardo            1       NaN   </code></pre>
</div>
</div>
<p>Repare que nós não mudamos a fórmula de cálculo do indicador <code>N_usuarios</code>. Nós aplicamos a mesma função <code>n()</code> que utilizamos anteriormente. Nós também agrupamos a tabela <code>dados</code> pela coluna <code>Cor</code> com <code>group_by()</code>, da mesma forma que fizemos anteriormente. Porque esse aumento ocorreu?</p>
<p>Nós não mudamos nada na fórmula de cálculo do indicador <code>N_usuarios</code>. Porém, nós introduzimos um novo item na cadeia de transformações da tabela. Mais especificamente, um LEFT JOIN realizado pela função <code>left_join()</code>. Ou seja, <strong>o JOIN é o que mudou nesse código</strong>, e ele é o culpado por esse estranho e repentino aumento no número de usuários de cor “Amarelo”.</p>
</section>
<section id="o-que-aconteceu" class="level2">
<h2 class="anchored" data-anchor-id="o-que-aconteceu">O que aconteceu?</h2>
<p>Se olharmos bem para a tabela resultado do JOIN (tabela <code>dados</code>) podemos começar a compreender o que aconteceu. Perceba que temos 6 linhas nessa tabela, isto é, temos 2 linhas a mais que a tabela <code>cores_de_pele</code> (que possui 4 linhas). Perceba também que temos 3 linhas nessa tabela descrevendo o mesmo usuário de ID 105. Ou seja, temos <strong>dados duplicados</strong> para esse usuário.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">dados</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
     ID Cor     DataRegistro Altura
  &lt;dbl&gt; &lt;chr&gt;   &lt;date&gt;        &lt;dbl&gt;
1   100 Pardo   NA            NA   
2   102 Branco  2022-01-10     1.58
3   104 Branco  NA            NA   
4   105 Amarelo 2022-01-10     1.72
5   105 Amarelo 2022-06-12     1.74
6   105 Amarelo 2022-08-24     1.75</code></pre>
</div>
</div>
<p>O usuário de ID 105 é o único usuário de cor “Amarelo” na tabela. Portanto, essas 3 linhas referentes ao ID 105 são a causa da mudança repentina no indicador <code>N_usuarios</code> para a cor “Amarelo”. Porém, como podemos ver abaixo, a tabela <code>cores_de_pele</code> tem 1 única linha para o usuário de ID 105. Como essa única linha se transformou em três?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">cores_de_pele</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
     ID Cor    
  &lt;dbl&gt; &lt;chr&gt;  
1   100 Pardo  
2   102 Branco 
3   104 Branco 
4   105 Amarelo</code></pre>
</div>
</div>
</section>
<section id="entenda-o-processo-de-pareamento-de-um-join" class="level2">
<h2 class="anchored" data-anchor-id="entenda-o-processo-de-pareamento-de-um-join">Entenda o processo de pareamento de um JOIN</h2>
<p>A única linha de ID 105 na tabela <code>cores_de_pele</code> se transformou em 3 linhas devido ao processo de pareamento dos dados realizado pelo JOIN. Todo JOIN, independe do tipo que ele seja (<em>left, inner, right, full</em>), vai sempre realizar um processo de pareamento entre os dados das duas tabelas, utilizando as colunas que representam as “chaves” do JOIN <span class="citation" data-cites="pedro2022">(Faria 2022)</span>.</p>
<p>Podemos visualizar esse processo de pareamento dos dados em Figure&nbsp;1. Perceba que, tanto no exemplo dessa imagem, quanto no exemplo desse post, as chaves do JOIN são representadas pela coluna <code>ID</code>. Logo, o JOIN vai puxar os dados de uma tabela para a outra, utilizando os valores dessa coluna como guia.</p>
<div id="fig-pareamento" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pareamento-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-01-10-join-duplicates/pareamento1.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pareamento-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Processo de pareamento realizado em um JOIN
</figcaption>
</figure>
</div>
<p>No exemplo de Figure&nbsp;1, ambas as tabelas que estão sendo unidas possuem uma linha para cada <code>ID</code>. Ou seja, não existe IDs duplicados em nenhuma das duas tabelas, formando assim, uma relação de “um para um” entre as chaves do JOIN.</p>
<p>Contudo, no exemplo deste post, a tabela <code>alturas</code> possui três linhas diferentes para o mesmo ID 105, enquanto a tabela <code>cores_de_pele</code> não apresenta IDs duplicados. Isso acaba formando uma relação de “um para muitos” entre as chaves do JOIN. Nesse caso, como o processo de pareamento do JOIN deve se comportar? Bem, o seguinte vai acontecer…</p>
<ol type="1">
<li><p>O JOIN vai pegar o ID 105 da tabela <code>cores_de_pele</code> e pesquisar por ele ao longo da tabela <code>alturas</code>. Como resultado, o JOIN vai localizar três linhas distintas para o ID 105 na tabela <code>alturas</code>.</p></li>
<li><p>O JOIN percebe que há um desequilíbrio (1 linha de <code>cores_de_pele</code> <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> 3 linhas de <code>alturas</code>).</p></li>
<li><p>Para reequilibrar essa balança, o JOIN vai executar um produto cartesiano entre as linhas dessas duas tabelas.</p></li>
</ol>
<p>A Figure&nbsp;2 apresenta de forma visual essa conexão:</p>
<div id="fig-desenho-expansao" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-desenho-expansao-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-01-10-join-duplicates/expansao.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-desenho-expansao-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Uma representação visual do efeito expansivo sobre o ID 105
</figcaption>
</figure>
</div>
<p>Ou seja, o JOIN vai retornar como resultado, <strong>todas as combinações possíveis</strong> entre a linha única de <code>cores_de_pele</code> e as 3 linhas de <code>alturas</code>. Ou seja, a linha única de <code>cores_de_pele</code> é combinada com cada uma das 3 linhas de <code>alturas</code>. Como resultado, temos as 3 linhas de ID 105 na tabela <code>dados</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">dados</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
     ID Cor     DataRegistro Altura
  &lt;dbl&gt; &lt;chr&gt;   &lt;date&gt;        &lt;dbl&gt;
1   100 Pardo   NA            NA   
2   102 Branco  2022-01-10     1.58
3   104 Branco  NA            NA   
4   105 Amarelo 2022-01-10     1.72
5   105 Amarelo 2022-06-12     1.74
6   105 Amarelo 2022-08-24     1.75</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusão" class="level1">
<h1>Conclusão</h1>
<p>Portanto, o produto cartesiano executado pelo JOIN gerou linhas duplicadas para o ID 105, e essa introdução de dados duplicados acabou distorcendo o valor dos indicadores. <strong>O efeito expansivo está no produto cartesiano gerado pelo JOIN</strong>, e você deve ficar atento em todas as situações em que esse produto pode ocorrer.</p>
<p>Mas então… em que momentos especificamente esse produto cartesiano é gerado? A resposta é: sempre que existir uma relação de “um para muitos” ou de “muitos para muitos” entre as chaves do JOIN. As “chaves” (ou <em>keys</em>) de todo JOIN podem formar três tipos de relação: 1) um para um; 2) um para muitos; e 3) muitos para muitos <span class="citation" data-cites="pedro2022">(Faria 2022)</span>. Em Figure&nbsp;3 apresentamos de forma visual essas relações, e os produtos cartesianos que elas geram, onde a coluna <code>key</code> representa a “chave” do JOIN.</p>
<div id="fig-relacoes" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-relacoes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://pedro-faria.netlify.app/posts/2023/2023-01-10-join-duplicates/relacoes_keys.png" class="img-fluid figure-img" style="width:80.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-relacoes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Resumo das relações possíveis entre <em>keys</em> e seus respectivos produtos cartesianos
</figcaption>
</figure>
</div>
<p>Perceba que, para o caso de relação um para um, o número de linhas na tabela resultado permanece inalterado. Porém, as relações que realmente nos interessam nesse post são as relações de “um para muitos” e de “muitos para muitos”. Perceba que um produto cartesiano ocorre nesses dois tipos de relação, e, como resultado, algum nível de “duplicação” de informações é gerado na tabela resultado do JOIN.</p>
<p>É através dessa “duplicação” que pode ocorrer o que estamos chamando de “efeito expansivo” dos JOINs nesse post. Perceba em Figure&nbsp;3 que o “efeito expansivo” e, consequentemente, a distorção sobre os seus indicadores pode ser ainda maior no caso de relações “muitos para muitos”. Pois o produto cartesiano gerado por esse tipo de relação resulta em um número maior de linhas duplicadas.</p>
<p>É provável que as “chaves” do seu JOIN apresentem ao menos alguns valores (ou IDs específicos) que possuem uma relação de “um para um”. Logo, esses valores específicos não vão causar esse efeito expansivo em seu JOIN. O ID 102 da tabela <code>cores_de_pele</code> é um exemplo de ID que também está presente na tabela <code>alturas</code>, e que ocupa uma única linha dessa tabela. Logo, esse ID específico forma uma relação de “um para um” entre as tabelas <code>cores_de_pele</code> e <code>alturas</code>.</p>
<p>Por outro lado, é bastante provável que as “chaves” do seu JOIN também possuem alguns valores (ou IDs específicos) que apresentem relações do tipo “um para muitos” ou “muitos para muitos”. Portanto, um produto cartesiano vai ocorrer para cada um desses valores que apresentam essas relações. Isto é, se por exemplo, tivessemos 30 IDs na tabela <code>x</code> que formassem uma relação de “um para muitos” com IDs na tabela <code>y</code>, um JOIN entre as tabelas <code>x</code> e <code>y</code>, geraria como resultado 30 produtos cartesianos diferentes. Por causa disso, o efeito expansivo sobre a sua tabela pode ser considerável se você tiver um número grande de valores que possuem esses tipos de relações.</p>
<p>Por último, vale destacar uma última vez, que estes produtos cartesianos independem do tipo de JOIN (<em>inner, left, right, full</em>) que você está executando, mas dependem diretamente dos seus dados e da relação que eles formam entre as chaves do JOIN.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-pedro2022" class="csl-entry">
Faria, Pedro Duarte. 2022. <em>Introdução à Linguagem r: Seus Fundamentos e Sua Prática</em>. 4th ed. Belo Horizonte.
</div>
</div></section></div> ]]></description>
  <category>JOINs</category>
  <guid>https://pedro-faria.netlify.app/posts/2023/2023-01-10-join-duplicates/pt/</guid>
  <pubDate>Tue, 10 Jan 2023 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2023/2023-01-10-join-duplicates/expansao.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Novidades da 4° edição de Introdução à Linguagem R: seus fundamentos e sua prática</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2022/2022-12-26-4th-edition-rbook/pt/</link>
  <description><![CDATA[ 





<section id="introdução" class="level1">
<h1>Introdução</h1>
<p>É com muito prazer que venho compartilhar com você as novidades que estou trazendo para essa nova edição do livro <a href="https://pedro-faria.netlify.app/publications/book/introducao_linguagem_r/pt/">Introdução à Linguagem R: seus fundamentos e sua prática</a>. Esta quarta edição busca principalmente fazer algumas correções e adições que buscam manter o livro como um <strong>referência moderna, introdutória e técnica</strong> sobre a linguagem R.</p>
<p><a href="https://www.amazon.com.br/dp/B0BNW4K232"> <button type="button" class="btn btn-primary">Compre uma versão do livro</button></a> <a href="https://pedro-faria.netlify.app/publications/book/introducao_linguagem_r/pt/"> <button type="button" class="btn btn-primary">Página de publicação</button></a> <a href="https://pedropark99.github.io/Introducao_R/"> <button type="button" class="btn btn-primary">Leia online</button></a></p>
</section>
<section id="o-que-temos-de-novo" class="level1">
<h1>O que temos de novo?</h1>
<p>Primeiro, a seção do capítulo 4 que citava o pacote <code>SAScii</code> foi removida. Pois durante o desenvolvimento desta quarta edição, foi identificado que este pacote não estava funcionando corretamente em versões mais recentes do R.</p>
<p>Segundo, uma nova seção foi adicionada ao capítulo 5, para introduzir o novo operador <em>pipe</em> do R (<code>|&gt;</code>) - que está disponível desde a versão 4.1 da linguagem, além de explicar as diferenças deste novo operador com o operador <em>pipe</em> do pacote <code>magrittr.</code></p>
<p>Terceiro, várias melhorias e pequenas correções foram aplicadas sobre o capítulo 8, com o objetivo de melhorar a clareza do conhecimento exposto e da organização do capítulo.</p>
<p>Quarto, a seção <a href="https://pedropark99.github.io/Introducao_R/configurando-componentes-est%C3%A9ticos-do-gr%C3%A1fico-no-ggplot2.html#alterando-as-fontes-do-seu-gr%C3%A1fico">Alterando as fontes do seu gráfico</a> no capítulo 9 foi reformulada, com o objetivo de substituir o pacote <code>extrafont</code> (o qual era a solução descrita em edições passadas desta obra) pelo pacote <code>ragg</code>, o qual se tornou uma solução mais moderna e robusta para o uso de fontes em gráficos do R.</p>
<p>Quinto, tivemos algumas melhorias sobre o capítulo 4, especialmente sobre a descrição de endereços absolutos e relativos, assim como a seção <a href="https://pedropark99.github.io/Introducao_R/importando-e-exportando-dados-com-readr-readxl-e-haven.html?q=guess#sec:readr_guess_encoding">A função <code>guess_encoding()</code> como um possível guia</a> que foi atualizada com o objetivo de acompanhar as mudanças recentes sobre a função <code>readr::guess_encoding()</code>.</p>
</section>
<section id="sobre-onde-encontrar-o-livro" class="level1">
<h1>Sobre onde encontrar o livro</h1>
<p>Você pode ler toda a obra de maneira gratuita e aberta através de seu <a href="https://pedropark99.github.io/Introducao_R/">website</a> 📖. Caso você queira contribuir para o projeto desse livro, você pode adquirir uma <a href="https://www.amazon.com.br/dp/B0BNW4K232">versão física ou em EBook do livro através da loja da Amazon</a>. Ao comprar essas versões, você estará me ajudando a continuar contribuindo com a nossa comunidade ❤️. Além disso, você também pode doar um Pix para o autor (veja a página <a href="https://pedro-faria.netlify.app/donate.html">Donate or Sponsor Me</a>).</p>
</section>
<section id="contribua-para-a-obra-ou-faça-sugestões" class="level1">
<h1>Contribua para a obra ou faça sugestões!</h1>
<p>Caso seja de seu interesse, você pode contribuir diretamente para a obra, ao postar <em>pull requests</em> dentro de seu <a href="https://github.com/pedropark99/Introducao_R">repositório oficial</a>. Para mais, você também pode fazer sugestões ou comentários, ao postar <em>issues</em> neste mesmo repositório.</p>


</section>

 ]]></description>
  <category>Book</category>
  <category>R</category>
  <guid>https://pedro-faria.netlify.app/posts/2022/2022-12-26-4th-edition-rbook/pt/</guid>
  <pubDate>Mon, 26 Dec 2022 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2022/2022-12-26-4th-edition-rbook/featured.png" medium="image" type="image/png" height="206" width="144"/>
</item>
<item>
  <title>Introducing the {spark_map} Python package</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2022/2022-12-21-spark-map-v0.2.3/en/</link>
  <description><![CDATA[ 





<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><code>spark_map</code> is a python package that offers some tools that help you to apply a function over multiple columns of Apache Spark DataFrames, using <code>pyspark</code>. The package offers two main functions (or “two main methods”) to distribute your calculations, which are <code>spark_map()</code> and <code>spark_across()</code>. Furthermore, the package offers several methods to map (or select) the columns to which you want to apply your calculations (these methods are called <em>mapping methods</em> in the package).</p>
<p><a href="https://github.com/pedropark99/spark_map"> <button type="button" class="btn btn-primary">Official repository</button></a> <a href="https://pedropark99.github.io/spark_map"> <button type="button" class="btn btn-primary">Package website</button></a> <a href="https://pypi.org/project/spark-map/"> <button type="button" class="btn btn-primary">Page on PyPI</button></a></p>
</section>
<section id="how-to-install-it" class="level2">
<h2 class="anchored" data-anchor-id="how-to-install-it">How to install it ?</h2>
<p>You can install the package through PyPI, by using the <code>pip</code> tool on your terminal, like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install spark-map</span></code></pre></div>
</section>
<section id="what-problem-spark_map-solves" class="level2">
<h2 class="anchored" data-anchor-id="what-problem-spark_map-solves">What problem <code>spark_map</code> solves?</h2>
<p>I work a lot with data pipelines using Apache Spark and <code>pyspark</code> at <a href="https://www.take.net/">Take Blip</a>. Some day, I got myself writing a very long <code>agg()</code> statement to aggregate multiple columns of my Spark DataFrame with the same function, like this one below:</p>
<div id="6652def4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql.functions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>, column</span>
<span id="cb2-2">aggregates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-3">    spark.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards.detailed_sales_per_user'</span>)</span>
<span id="cb2-4">        .groupBy(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>)</span>
<span id="cb2-5">        .agg(</span>
<span id="cb2-6">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_lite'</span>)).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_lite'</span>),</span>
<span id="cb2-7">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_silver'</span>)).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_silver'</span>),</span>
<span id="cb2-8">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_gold'</span>)).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_gold'</span>),</span>
<span id="cb2-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_premium'</span>)).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_premium'</span>),</span>
<span id="cb2-10">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_enterprise'</span>)).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_enterprise'</span>),</span>
<span id="cb2-11">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_business'</span>)).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards_business'</span>)</span>
<span id="cb2-12">        )</span>
<span id="cb2-13">)</span></code></pre></div>
</div>
<p>Looking at this code, I had the following thought: “this is not elegant, and is error-prone, because it involves copy and paste, and very subtle changes in each line”. Following the golden rule of DRY (<em>do not repeat yourself</em>), I had to find a better way to write this code.</p>
<p>I just wanted to apply the <code>sum()</code> function over multiple columns of <code>cards.detailed_sales_per_user</code> grouped by <code>day</code>. Because of that, I decided to develop the <code>spark_map</code> package, which allows you to declare this operation in a much better, elegant and concise way, by using the <code>spark_map()</code> function.</p>
<div id="8c18eacc" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> spark_map.functions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> spark_map</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> spark_map.mapping <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> starts_with</span>
<span id="cb3-3">grouped_by_day <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards.detailed_sales_per_user'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-4">    .groupBy(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6">aggregates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark_map(grouped_by_day, starts_with(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cards'</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>)</span></code></pre></div>
</div>
</section>
<section id="how-spark_map-works" class="level2">
<h2 class="anchored" data-anchor-id="how-spark_map-works">How <code>spark_map()</code> works ?</h2>
<p>The <code>spark_map()</code> function receives three inputs, which are <code>table</code> (i.e.&nbsp;the Spark DataFrame you want to use), <code>mapping</code> (i.e.&nbsp;a “mapping” that describes which columns you want to apply your function), and <code>function</code> (i.e.&nbsp;the function you want to apply to each column in the Spark DataFrame).</p>
<p>In short, the <code>starts_with('cards')</code> section tells <code>spark_map()</code> that you want to apply the input function on all columns of <code>grouped_by_day</code> whose name starts with the text <code>'cards'</code>. In other words, all <code>spark_map()</code> does is to apply the function you want (in the above example this function is <code>sum()</code>) to whatever column it finds in the input DataFrame which fits in the description of your mapping method.</p>
<p>You can use different mapping methods to select the columns of your DataFrame, and the package offers several built-in methods which can be very useful for you, which are available through the <code>spark_map.mapping</code> module of the package. You can select columns based on:</p>
<ul>
<li><code>at_position()</code>: their position (i.e.&nbsp;3rd, 4th and 5th columns);</li>
<li><code>matches()</code>: a regex to which their match;</li>
<li><code>are_of_type()</code>: the type of data their store (i.e.&nbsp;all columns of type <code>int</code>);</li>
<li><code>starts_with()</code> and <code>ends_with()</code>: its name starting or ending with a particular pattern;</li>
<li><code>all_of()</code>: its name being inside a specific list of options;</li>
</ul>
</section>
<section id="the-differences-between-spark_map-and-spark_across" class="level2">
<h2 class="anchored" data-anchor-id="the-differences-between-spark_map-and-spark_across">The differences between <code>spark_map()</code> and <code>spark_across()</code></h2>
<p>There are two main functions in the package that performs the heavy work, which are <code>spark_map()</code> and <code>spark_across()</code>.</p>
<p>Both of these functions perform the same work, which is to apply a function over a set of columns of a Spark DataFrame. But they differ in the method they use to apply this function. While <code>spark_map()</code> uses the <code>agg()</code> method of Spark DataFrame’s to apply the function, <code>spark_across()</code> uses the <code>withColumn()</code> method to do so.</p>
<p>This means that you will mainly use <code>spark_map()</code> when you want to calculate <strong>aggregates</strong>. Is worthy pointing out that <code>spark_map()</code> works perfectly with grouped DataFrames as well (i.e.&nbsp;<code>GroupedData</code>). In the other hand, you will use <code>spark_across()</code> when you want to just transform the values of multiple colums at once by applying the same function over them.</p>
</section>
<section id="check-the-documentation-for-more-examples-and-details" class="level1">
<h1>Check the documentation for more examples and details</h1>
<p>The <a href="https://pedropark99.github.io/spark_map/">website</a> have documentation for all functions of the package. If you have any trouble to understand or to find examples, is a good idea to check the <a href="https://pedropark99.github.io/spark_map/reference-en.html">Function Reference</a> of the package, to see examples and more details about how each function works.</p>
<p>To understand how the mapping methods works, and how you can create your own mapping method, a good place to start is to read the article <a href="https://pedropark99.github.io/spark_map/english/articles/building-mapping.html">Building the mapping</a> available at the website of the package.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Package</category>
  <category>pyspark</category>
  <category>Apache Spark</category>
  <guid>https://pedro-faria.netlify.app/posts/2022/2022-12-21-spark-map-v0.2.3/en/</guid>
  <pubDate>Wed, 21 Dec 2022 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2022/2022-12-21-spark-map-v0.2.3/spark-map-logo.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>Erro de memória no Power BI Online? Hora de repensar o seu dashboard</title>
  <dc:creator>Pedro Duarte Faria</dc:creator>
  <link>https://pedro-faria.netlify.app/posts/2022/2022-12-14-power-bi-memory-error/pt/</link>
  <description><![CDATA[ 





<section id="introdução" class="level1">
<h1>Introdução</h1>
<p>Em um dia recente, eu descobri que um dos dashboards que estavam publicados em nosso ambiente de produção do Power BI Online havia sofrido um erro de atualização. Logo, eu prontamente parei o que estava fazendo e comecei a investigar o motivo do erro, até porque: 1) o nosso cliente depende dos dados desse dashboard ; e 2) erros em produção não são legais!</p>
<p>Nesse post, eu quero mostrar como esse tipo de erro de atualização pode ser um forte sinal de que você precisa repensar o design de seu dashboard. Em outras palavras, meu objetivo é mostrar que se você está puxando milhões e milhões de linhas de dados para um dashboard… é provável que você <strong>não tenha entendido o que é um dashboard e qual o seu propósito.</strong></p>
</section>
<section id="contexto" class="level1">
<h1>Contexto</h1>
<p>Bem, você já sabe que tudo começou por um erro durante a atualização de um dashboard publicado no Power BI Online. Porém, este não era qualquer erro, e sim, um erro de falta de memória:</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2022/2022-12-14-power-bi-memory-error/image.png" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption>Mensagem de erro da atualização no Power BI Online</figcaption>
</figure>
</div>
</div>
</div>
<p>Perceba pela mensagem acima, que o motivo do erro foi uma falta de memória (<em>insufficient memory</em>) nos clusters responsáveis por executar a atualização. O que isso significa? Significa que este dashboard estava pedindo por um volume tão grande, mas tão grande de dados durante a atualização, que os clusters que estavam executando essa atualização não tinham mais espaço para alocar esse volume tão grande de dados.</p>
<section id="hora-de-explorar-o-terreno-desconhecido" class="level2">
<h2 class="anchored" data-anchor-id="hora-de-explorar-o-terreno-desconhecido">Hora de explorar o terreno desconhecido</h2>
<p>Nesse dia, eu estava em minha primeira semana em uma nova equipe, e, eu não conhecia esse dashboard. Em outras palavras, eu havia herdado esse dashboard, que foi criado pelos analistas anteriores dessa equipe. Logo, eu precisava abrir o <code>.pbix</code> desse dashboard e começar a investigar, tentando descobrir que mistérios e perigos estão escondidos dentro dele.</p>
<p>Inicialmente, percebi oito tabelas associadas ao dashboard que foram puxadas diretamente dos nossos databases SQL (<code>campanhas</code>, <code>cartoes_selecionados</code>, <code>usuarios_por_dia</code>, <code>formatos</code>, <code>inputs</code>, <code>usuarios_por_mes</code>, <code>perfis</code> e <code>tracks</code>), as quais estão expostas na imagem abaixo<sup>1</sup>. Além delas, temos outras duas tabelas calculadas no próprio <code>.pbix</code>, através de DAX (<code>dCalendario</code> e <code>Medidas</code>).</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2022/2022-12-14-power-bi-memory-error/tabelas.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Tabelas associadas ao arquivo <code>.pbix</code></figcaption>
</figure>
</div>
</div>
</div>
<p>Decidi simplesmente clicar no botão de <code>Atualizar</code>. Já que o erro ocorreu durante a atualização, imaginei que seria mais simples descobrir a fonte do problema dessa forma.</p>
<p>A maioria das tabelas atualizaram rapidamente. Porém, a tabela <code>input</code> ainda estava atualizando. Em resumo, essa tabela continha todas as mensagens digitadas por todos os usuários que acessaram o nosso sistema.</p>
<p>O tempo foi passando, e após 3 horas com a atualização rodando em meu computador, o Power BI já havia puxado mais de 80 milhões de linhas para essa única tabela. Decidi verificar se o recurso de <a href="https://learn.microsoft.com/pt-br/power-bi/connect-data/incremental-refresh-overview">Atualização incremental</a> estava ligado para essa tabela <code>input</code>, e, percebi que ele estava desligado.</p>
</section>
<section id="a-fonte-do-problema" class="level2">
<h2 class="anchored" data-anchor-id="a-fonte-do-problema">A fonte do problema</h2>
<p>Portanto, a fonte do problema estava claro. Como o recurso de “Atualização incremental” estava desligado para essa tabela <code>input</code>, a cada atualização, o Power BI Online estava recalculando toda a tabela <code>input</code> de uma vez só.</p>
<p>Isso significa que, todos os dias, o Power BI estava coletando todas as <strong>80 milhões de linhas</strong> dessa tabela <code>input</code>. Devido a este volume monumental de dados, o serviço do Power BI decidiu interromper a atualização.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://pedro-faria.netlify.app/posts/2022/2022-12-14-power-bi-memory-error/conversa.png" class="img-fluid figure-img" style="width:80.0%"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="a-solução-simples-e-suja-o-famoso-quick-and-dirty" class="level1">
<h1>A solução simples e suja (o famoso <em>quick and dirty</em>)</h1>
<p>Um jeito simples de resolver esse erro de falta de memória, seria simplesmente não carregar todas as 80 milhões de linhas de uma vez só! E sim, carregar essas linhas aos poucos.</p>
<p>Para isso, poderíamos ligar a atualização incremental nessa tabela <code>input</code>. Desse modo, cada atualização vai atualizar apenas os dados dos últimos dias (ao invés de atualizar a tabela inteira), e em seguida, começamos a carregar os dados aos poucos para o dashboard.</p>
<p>Por exemplo, na primeira atualização, tentamos puxar os dados do primeiro mês, depois, na próxima atualização, puxamos os dados do segundo mês, e assim por diante, até puxarmos todas as 80 mihões de linhas. Contudo, isso não é uma solução de fato!</p>
</section>
<section id="antes-de-tudo-pare-um-pouco-e-pense" class="level1">
<h1>Antes de tudo, pare um pouco e pense</h1>
<p>Primeiro de tudo, pare! E pense… tente entender o porquê você está puxando milhões e milhões de linhas. Você realmente precisa desse volume tão grande de dados em seu dashboard? É muito provável que não!</p>
<blockquote class="blockquote">
<p><strong>Insight 1:</strong> Se você está puxando milhões e milhões de linhas de dados para um dashboard, é provável que você não tenha entendido o que é um dashboard e qual o seu propósito.</p>
</blockquote>
<section id="manutenção-se-torna-um-peso-grande" class="level2">
<h2 class="anchored" data-anchor-id="manutenção-se-torna-um-peso-grande">Manutenção se torna um peso grande</h2>
<p>Atualizar 80 milhões de linhas <strong>não é prático, não é rápido, e é difícil de manter e testar</strong>. Se por algum motivo, você precisar atualizar todos os dados de seu dashboard<sup>2</sup>, você vai muito provavelmente perder uma tarde, talvez um dia inteiro de trabalho só para completar a atualização.</p>
<blockquote class="blockquote">
<p><strong>Insight 2:</strong> Um dashboard deve ser fácil de se manter e expandir. Em contrapartida, manter um volume grande de dados em um dashboard é trabalhoso demais.</p>
</blockquote>
</section>
<section id="vamos-pensar-um-pouco-sobre-user-experience" class="level2">
<h2 class="anchored" data-anchor-id="vamos-pensar-um-pouco-sobre-user-experience">Vamos pensar um pouco sobre <em>user experience</em></h2>
<p>Por um momento, vamos adotar o papel de um UX, e refletir sobre a experiência dos usuários que consomem o nosso dashboard. É esquisito pensar dessa forma, entretanto, às vezes, nós nos esquecemos que pessoas de verdade usam o nosso produto (nesse caso, o dashboard) e se baseiam nele diariamente para desempenhar trabalhos e planejamentos importantes. Portanto, é muito importante que eles tenham uma experiência agradável utilizando o nosso dashboard.</p>
<ul>
<li><strong>Definindo o público-alvo:</strong> Primeiro, quem utiliza o nosso dashboard?</li>
</ul>
<p>Na maioria das vezes, quem está consumindo os nossos dashboards são <strong>gerentes de alguma área</strong>. Gente importante, que tem pouco tempo no dia, e que lidam com várias tarefas e responsabilidades ao mesmo tempo.</p>
<p>É justamente por essa escassez de tempo e atenção que, em geral, gerentes gostam muito de dashboards. Eles gostam de entrar num dashboard, e rapidamente visualizar todos os indicadores que eles precisam acompanhar. Com isso, eles não precisam gastar horas e horas caçando números em diferentes lugares, e com diferentes pessoas. Está tudo concentrado em um lugar único e de fácil acesso.</p>
<p>Por isso, um dashboard tem que ser <strong>rápido</strong>. Todo gerente tem pressa, então, a página inicial do dashboard precisa carregar rápido! Navegar pelas diferentes páginas e visões do dashboard também precisa ser uma experiência rápida e flúida. Ninguém gosta de uma página que demora 5 minutos para carregar… muito menos um gerente.</p>
<p>É por esse mesmo motivo, que cada página de um dashboard precisa ser focada em um tema central, e manter o mínimo possível de informação que o gerente precisa, da forma mais clara possível. Se uma mesma página mistura diferentes temas, o leitor pode ter dificuldade em navegar pelos indicadores e encontrar o que ele está procurando (ou seja, misturar temas = confusão mental!).</p>
<blockquote class="blockquote">
<p>Ah! Achei a página com os indicadores de vendas. Ok. Espera! Por que os indicadores de atendimento estão nessa página? Onde está o número de vendas de maquininhas nesse mês? Ahhh achei! Não, espera… Esse é o número de maquininhas vendidas somente no setor de atendimento, mas eu quero os números de venda em TODOS os setores…</p>
</blockquote>
<p>Portanto, dashboards precisam ser rápidos, claros e bem dividos! E se você está puxando um volume muito grande de dados para dentro dele, você com certeza vai impactar negativamente a rapidez desse dashboard, pois ele precisa carregar o grande conjunto de dados que você inseriu lá dentro. Além disso, um grande volume de dados pode indicar que você está preenchendo esse dashboard com informações que são irrelevante para o gerente.</p>
<blockquote class="blockquote">
<p><strong>Insight 3:</strong> Dashboards precisam ser rápidos, claros e bem dividos!</p>
</blockquote>
</section>
<section id="gerentes-querem-indicadores-e-agregados-não-dados-brutos" class="level2">
<h2 class="anchored" data-anchor-id="gerentes-querem-indicadores-e-agregados-não-dados-brutos">Gerentes querem indicadores e agregados! Não dados brutos…</h2>
<p>Gerentes querem acompanhar indicadores e agregados que descrevam de maneira rápida a situação atual do negócio que eles gerem, e das pessoas que estão envolvidas nele.</p>
<p>Logo, por que trazer dados brutos para o dashboard? Por que trazer para o dashboard uma tabela com a lista completa de todos os usuários que visitaram o nosso serviço em todos os dias do ano? Se eu posso simplesmente trazer uma tabela já agregada, com o número de usuários que visitaram esse serviço dentro de cada dia do ano?</p>
<blockquote class="blockquote">
<p><strong>Insight 4:</strong> Gerentes estão interessados em acompanhar indicadores e agregados, ao invés de dados brutos. Portanto, importe os seus dados já agregados para dentro do dashboard.</p>
</blockquote>
</section>
<section id="isso-significa-que-dados-brutos-geralmente-não-devem-estar-em-um-dashboard" class="level2">
<h2 class="anchored" data-anchor-id="isso-significa-que-dados-brutos-geralmente-não-devem-estar-em-um-dashboard">Isso significa que dados brutos geralmente não devem estar em um dashboard</h2>
<p>Isso tudo não significa que gerentes não consomem dados brutos em momento algum. Mas isso significa que um dashboard é geralmente o lugar errado para esses dados brutos.</p>
<p>É até comum em certos momentos um gerente pedir para nós coletarmos um conjunto específico de dados brutos para ele. Mas se você refletir sobre todas as ocasiões onde isso ocorreu, você talvez consiga perceber que essas situações caem em duas categorias:</p>
<ol type="1">
<li><p>o gerente queria investigar um problema bem específico, e é bem provável que esse problema não se repita, logo, ele nunca mais vai precisar desses dados brutos específicos novamente (i.e.&nbsp;foi uma entrega pontual);</p></li>
<li><p>o gerente precisa desses dados brutos com certa frequência para alimentar algum fluxo de trabalho que você não conhece, ou está em uma equipe/setor diferente do seu;</p></li>
</ol>
<p>Essas duas categorias não justificam incluir dados brutos em um dashboard. Para a primeira situação, você pode armazenar a query (ou o script) que você usou no momento para puxar os dados brutos que o gerente te pediu naquele momento. Desse modo, se lá na frente, por algum motivo você precisar extrair novamente esses dados brutos, você precisa apenas retornar à query e executá-la novamente. Além disso, é muito mais econômico armazenar centenas de queries distintas, do que armazenar os dados brutos produzidos em cada uma dessas queries (imagine ter centenas de CSV’s de vários MB’s armazenados no seu computador…).</p>
<p>Em minha equipe de trabalho, nós utilizamos um board de cards no estilo kanban (como o Asana, ou o Azure DevOps, etc.) para organizar as nossas tarefas e demandas. Eu particularmente gosto de sempre salvar a query que eu utilizei para completar uma demanda, dentro do card correspondente a essa demanda. Sendo assim, caso eu precisar utilizar essa mesma query, eu procuro rapidamente pelo card dessa demanda no histórico do nosso board de cards, e, copio a query que está salva lá dentro desse card.</p>
<p>Já na segunda situação, faz mais sentido criar rotinas automatizadas de envio desses dados para o gerente, ou para qualquer que seja a pessoa que esteja precisando desses dados. Ou seja, se por exemplo, o Paulo precisa extrair toda semana, uma lista com todos os usuários que são elegíveis a adquirir um empréstimo, eu posso, por exemplo, criar uma rotina automatizada em Python ou em R, que pega os dados brutos do nosso database SQL, filtra todos esses usuários elegíveis, e compila esses dados em um formato agradável e intuitivo, e por fim, envia esses dados para o Paulo, seja por email, ou talvez, para um servidor ou uma pasta na nuvem que o Paulo tem acesso.</p>
</section>
<section id="dashboards-são-ferramentas-de-uso-diário" class="level2">
<h2 class="anchored" data-anchor-id="dashboards-são-ferramentas-de-uso-diário">Dashboards são ferramentas de uso diário</h2>
<p>O gerente depende desse dashboard todos os dias (ou talvez toda semana) para extrair informações importantes sobre o seu negócio. Portanto, dashboards possuem uma frequência de uso alta, e por essa característica, é essencial que um dashboard <strong>seja estável</strong> e que esteja sempre o mais atualizado possível.</p>
<p>Contudo, ao puxar milhões e milhões de linhas de dados para um dashboard, todos os dias, você está aumentando as chances desse dashboard enfrentar um erro de atualização. Isso não é algo estável!</p>
<p>Você não quer erros acontecendo no seu dashboard, pois você não quer perder uma tarde inteira de trabalho investigando onde nas milhões e milhões de linhas que você puxou está a fonte do erro. Você também não quer perder horas e horas atualizando essas milhões de linhas. Isso está bastante relacionado também com o insight 2, onde definimos que um dashboard deve ser fácil de se manter e expandir.</p>
<blockquote class="blockquote">
<p><strong>Insight 5:</strong> Dashboards precisam ser estáveis! Quanto menos erros ele gerar, melhor para você (que vai gastar menos tempo de debugging e manutenção) e também para o gerente que utiliza esse dash.</p>
</blockquote>
<p>Você quer um dashboard simples, leve, claro, e que funcione da forma como você esperava que ele funcionasse. Na empresa onde trabalho, temos um lema: “A simplicidade é o mais alto nível de sofisticação”. Portanto, leve essa simplicidade para os seus dashboards. Não tente fazer coisas complexas e confusas, que são difíceis de se entender e de investigar (ou “desbugar”).</p>
</section>
<section id="as-vezes-não-existe-maneira-simples-de-contornar-o-problema" class="level2">
<h2 class="anchored" data-anchor-id="as-vezes-não-existe-maneira-simples-de-contornar-o-problema">As vezes não existe maneira simples de contornar o problema</h2>
<p>Em certas ocasiões, os usuários de um dashboard realmente precisam ver algum tipo de dado bruto dentro dele. Nesses casos, você traçar algumas outras estratégias e perguntas para reduzir ao máximo o número de linhas importadas. Por exemplo:</p>
<ol type="1">
<li>eu posso trazer para dentro dashboard uma parte bastante filtrada dos dados brutos?</li>
</ol>
<p>Ou seja, ao invés de trazer as 80 milhões de linhas, será que eu consigo aplicar vários filtros sobre esses dados brutos, antes de importá-los para dentro do dashboard? Esses filtros podem te ajudar a reduzir drasticamente o número de linhas carregadas.</p>
<ol start="2" type="1">
<li>ao invés de trazer todos os dados, por que não trazer uma amostra aleatória da população?</li>
</ol>
<p>É útil entender o porquê exatamente o seu usuário precisa ver algum dado bruto em seu dashboard. Ao entender o que esse usuário está perseguindo, você talvez chegue a conclusão de que o seu usuário já ficaria satisfeito ao ver pelo menos uma parte dos dados brutos (não precisa trazer literalmente tudo). Portanto, você poderia selecionar uma amostra aleatória dos dados, e importar apenas essa amostra para dentro do dashboard.</p>
<ol start="3" type="1">
<li>será que eu preciso manter o histórico desses dados brutos dentro do dash?</li>
</ol>
<p>Será que o seu cliente precisa frequentemente visualizar os dados brutos de 6 meses atrás? É muito provável que não. Então, por que não manter apenas os dados brutos dos últimos 30 dias? Em outras palavras, os dados históricos são sempre limpos, e apenas os dados brutos mais recentes são mantidos.</p>
<p>Ao reduzir o volume de dados mantidos dentro do dashboard, você talvez traga uma melhoria considerável sobre o tempo de navegação e carregamento do dashboard (lembre-se, um dashboard preciso ser rápido, claro e bem divido).</p>
</section>
</section>
<section id="conclusão" class="level1">
<h1>Conclusão</h1>
<p>Espero que neste artigo, tenha consiguido deixar claro como um número exacerbado de dados brutos em seu dashboard pode ser um forte sinal de que você tenha desenvolvido um dashboard mal desenhado. Apenas para recapitular, os principais pontos abordados foram:</p>
<ol type="1">
<li><p>Se você está puxando milhões e milhões de linhas de dados para um dashboard, é provável que você não tenha entendido o que é um dashboard e qual o seu propósito.</p></li>
<li><p>Um dashboard deve ser fácil de se manter e expandir. Em contrapartida, manter um volume grande de dados em um dashboard é trabalhoso demais.</p></li>
<li><p>Dashboards precisam ser rápidos, claros e bem dividos!</p></li>
<li><p>Gerentes estão interessados em acompanhar indicadores e agregados, ao invés de dados brutos. Portanto, importe os seus dados já agregados para dentro do dashboard.</p></li>
<li><p>Dashboards precisam ser estáveis! Quanto menos erros ele gerar, melhor para você (que vai gastar menos tempo de debugging e manutenção) e também para o gerente que utiliza esse dash.</p></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Vale destacar que essas tabelas foram renomeadas com o objetivo de manter o anonimato do cliente e dos dados associados a elas.↩︎</p></li>
<li id="fn2"><p>Como exemplo, talvez a fonte dos dados sofreu uma atualização, e você quer trazer essa atualização para o seu dashboard, ou então, porque houve uma perda de dados no Power BI Online e você deseja recuperar esses dados perdidos.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Power BI</category>
  <category>Power BI Online</category>
  <guid>https://pedro-faria.netlify.app/posts/2022/2022-12-14-power-bi-memory-error/pt/</guid>
  <pubDate>Wed, 14 Dec 2022 03:00:00 GMT</pubDate>
  <media:content url="https://pedro-faria.netlify.app/posts/2022/2022-12-14-power-bi-memory-error/featured.png" medium="image" type="image/png" height="52" width="144"/>
</item>
</channel>
</rss>
