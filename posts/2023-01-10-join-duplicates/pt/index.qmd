---
title: JOINs são importantes fontes de duplicações em seus dados
description: "Se os seus dados crescerem de forma repentina, sem explicação aparente, verifique se os seus JOINs são a fonte desse problema"
date: 2023-01-10
bibliography: "../bibliography.bib"
---


# Introdução

<!--
A regra de ouro da programação DRY (*do not repeat yourself*) também pode influenciar outras dimensões de sua vida. Por exemplo, se você der o mesmo conselho para uma pessoa pela terceira vez ou mais, é melhor que você escreva ou documente esse conselho de alguma forma. Desse modo, você pode disseminar esse conselho para outras pessoas de forma mais efetiva. Esse post é um reflexo direto disso:

> When you’ve written the same code 3 times, write a function. When you’ve given the same in-person advice 3 times, write a blog post. ROBINSON, David, 2017 ^[Essa citação vem de um tweet de David Robinson, o qual está disponível no link: <https://twitter.com/drob/status/928447584712253440?s=20&t=5gy5SkBKGr6oXsWcg9LIag>].
-->

Quando estamos construindo uma nova tabela de dados, é muito comum compararmos os nossos resultados com tabelas anteriores e nos depararmos com problemas de divergência nos dados. Isto é, situações como:

> Uhmm... a tabela antiga indica que o número de maquininhas vendidas no mês de Dezembro foi de 1387. Porém, esse mesmo indicador na tabela nova está em 1824 para o mesmo mês de Dezembro. Porque esse aumento?

Aumentos desse tipo podem ocorrer por uma variedade de razões. Porém, operações de JOIN tem sido uma razão específica que tenho enfrentado com muita frequência em meu trabalho. Em outras palavras, JOINs são fontes extremamente comums desse tipo de "efeito expansivo", e, muitos analistas não compreendem o porquê, ou não enxergam como isso pode ocorrer. 

Nesse post, busco justamente esclarecer como uma operação de JOIN pode causar esse "efeito de aumento" em seus dados. Eu explico esse efeito em detalhes no capítulo 6 do meu livro introdutório da linguagem R. Mais especificamente, a partir da seção [Relações entre *keys: primary keys* são menos comuns do que você pensa](https://pedropark99.github.io/Introducao_R/introdu%C3%A7%C3%A3o-a-base-de-dados-relacionais-com-dplyr.html#rela%C3%A7%C3%B5es-entre-keys-primary-keys-s%C3%A3o-menos-comuns-do-que-voc%C3%AA-pensa). Portanto, grande parte do conhecimento exposto aqui são referências diretas ao livro.

# Alguns exemplos de tabela

Para demonstrar os processos de JOIN ao longo desse post, vou utilizar algumas tabelas de exemplo. Por opção minha, estou mostrando esses exemplos na linguagem R. Mas você poderia facilmente transpor esses exemplos para qualquer outra linguagem (e.g. como o Python).

Ou seja, o conhecimento exposto aqui **independe da linguagem utilizada**. Pois o efeito expansivo descrito aqui é uma característica intrínseca ao processo de JOIN, e não à linguagem utilizada.

```{r}
#| eval: false
library(dplyr)

info <- data.frame(
  name = c("Mick", "John", "Paul", "George", "Ringo"),
  band = c("Rolling Stones", "Beatles", "Beatles", "Beatles", "Beatles"),
  born = as.Date(c("1943-07-26", "1940-09-10", "1942-06-18", "1943-02-25", "1940-07-07")),
  children = TRUE
)

band_instruments <- data.frame(
  name = c("John", "Paul", "Keith"),
  plays = c("guitar", "bass", "guitar")
)
```

# O que é um JOIN?

Um processo de JOIN é a união entre duas tabelas. Ou seja, se você tem uma tabela A com colunas `x` e `y`, e uma tabela B com colunas `j`, `k` e `l`, um JOIN entre essas duas tabelas resulta em uma nova tabela com colunas `x`, `y`, `j`, `k` e `l`.

Uma característica fundamental de um JOIN, é que ele realiza um processo de pareamento dos dados durante essa união. Ou seja, um JOIN não vai simplesmente unir as colunas `x`, `y`, `j`, `k`, `l` e voa-lá! Temos uma nova tabela. Esse tipo de união que não inclui um processo de pareamento geralmente é denominado de *"binding"* ou *"concating"*, ao invés de *"join"*.


# Relações entre *keys* de um JOIN

Para realizar esse processo de pareamento dos dados, um JOIN utiliza uma coluna (ou um conjunto de colunas) presente em ambas as tabelas como as "chaves" do JOIN. Portanto, as *keys*, ou as "chaves" de um JOIN são a combinação de colunas utilizadas para realizar o processo de pareamento (ou *matching*) entre os dados das duas tabelas que estão sendo unidas no JOIN. 

Em @fig-pareamento, podemos visualizar esse processo de pareamento dos dados. Nesse exemplo, a coluna que representa a "chave" do JOIN é a coluna `ID`, pois ela é a única coluna que está presente em ambas as tabelas.

![Processo de pareamento realizado em um JOIN](../pareamento1.png){#fig-pareamento}

Por exemplo, olhando para a tabela 


![Resumo das relações possíveis entre *keys*](../relacoes_keys.png)

Para entender como esse efeito expansivo é interessante enxergarmos como as relações entre as *keys* (ou as "chaves") das duas tabelas afetam o produto, ou o resultado do JOIN.


