---
title: "Improving decision making with Git and why you should care"
description: "This article uses a real world situation that me and my team encountered to show how you can improve decision making in your team by tracking the decisions you make with Git"
image: "./../git-logo.png"
date: "2023-07-31"
---

# Introduction

Last week, me and my team encountered a situation where we need to find out why and how
a certain problem occurred. We needed to understand which decisions led
to this problem, and why they were made. Pretty normal stuff right?

But understanding what did happened was only possible for us because we do track every change and decision that we make with Git,
by signing commits and writing Pull Requests (or PRs for short). This article uses this real world situation that we faced
to showcase how Git and formal processes to register changes in the codebase (like PRs) are a critical part for
improving decision making and understanding how your past decisions are affecting you in the present.

I begin the article describing what problem occurred, and in sequence, I explain what mistakes were made, and how Git helped
us to identify those mistakes.

# The data pipeline where the problem occurred

The problem occurred in one of the many data pipelines that we manage and support. This specific data pipeline was a
"aggregate the data and send the results to client" type of pipeline. In more technical details, this pipeline
triggered the execution of a Python notebook. This notebook was perfoming the following steps:

1. aggregates the raw data of sales made in a specific channel.
2. saves the result in a CSV or Excel file.
3. send this CSV or Excel file by email to the client.

The following diagram show these steps in a visual manner: 

![A diagram that summarises the data pipeline were the problem occurred](./../diagrams-en.png)


# What problem occurred ?

In essence, the data pipeline disappeared! Our client notified us saying that they were not receiving the CSV files for about a week.
So we started to search for this data pipeline, and look at it's execution logs, and search for problems.

However, we just did not found the data pipeline, it had simply disapeared from our repository. The client did received some files a few weeks ago, so,
we were positive that some pipeline existed at some point in the past. But where did this pipeline go? Why it disappeared?


# Investigating the commmits


# Why did I made this decision?


# Another part of the problem


# What mistakes were made?




# How Git helped us to solve the issue

We use Git to store and track any changes in all of our data pipelines. As you well know, files
does not simply dissappear from a Git repository. When a file is removed from a Git repository, 
is because someone intentionally deleted the file and committed the change to the repository.


So we needed to find who deleted the data pipeline, why this person made this decision, and when the deletion
was made. Thanks to the our Git history of commits, we just follow the trails of commits and we found the exact
commit that deleted the pipeline, and understand how our previous actions triggered the current problem.


Me and my team perform many decisions all the time that affect the maintained pipelines.
As a consequence, when you make so many decisions and changes to the codebase like this, is really hard to remember what decision you made, when and
why you made it, etc. That is why Git help us so much, because it tracks all of these changes for us.



Because of Git, we manage to track down and understand how and why did this data pipeline disappeared, and
we were able to locate the data pipeline again, and restore it to it's previous state,
and re-send the files.

Not only did we fixed the issue, but also, by understanding what happened, and what decisions were made
that led to the dissapeareance of the data pipeline, we could identify the flaws in our decision making process.
And by identifying these issues, we can now address them, so we do not make these mistakes again.

Over the next sections, I explain what happened, what mistakes were made, and how we could have avoided this problem.

