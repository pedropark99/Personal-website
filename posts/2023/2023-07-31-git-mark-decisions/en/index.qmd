---
title: "Improving decision making with Git and why you should care"
description: "This article uses a real world situation that me and my team encountered to show how you can improve decision making in your team by tracking the decisions you make with Git"
image: "./../git-logo.png"
date: "2023-07-31"
---

# Introduction

Last week, me and my team encountered a situation where we need to find out why and how
a certain problem occurred. We needed to understand which decisions led
to this problem, and why they were made. Pretty normal stuff right?

But understanding what happened was only possible for us because we track every change and every decision that we make with Git,
by signing commits and writing Pull Requests (or PRs for short). This article uses this real world situation that we faced
to showcase how Git and formal processes to register changes in the codebase (like PRs) are a critical part for
improving decision making and understanding how your past decisions are affecting you in the present.

I begin the article describing what problem occurred, and in sequence, I explain what mistakes were made, and how Git helped
us to identify those mistakes.

# The data pipeline where the problem occurred

The problem occurred in one of the many data pipelines[^what-is-pipelines] that we manage and support. This specific data pipeline was a
"aggregate the data and send the results to client" type of pipeline. In more technical details, this pipeline
triggered the execution of a Python notebook. This notebook was perfoming the following steps:


[^what-is-pipelines]: What is a pipeline? A pipeline is just a sequence of steps (or tasks)
to be performed at a specific time of the day (or a specific day of the week or of the month, etc.).
And a data pipeline is a pipeline that contains tasks that load, transform, send, or ingest data in some form.


1. aggregates the raw data to get the total sales made per channel.
2. saves the result in a CSV or Excel file.
3. send this CSV or Excel file by email to the client.

The following diagram show these steps in a visual manner: 

![A diagram that summarises the data pipeline were the problem occurred](./../diagrams-en.png)


# What problem occurred ?

In essence, both the Python notebook and the data pipeline itself disappeared! Our client notified us saying that they were not receiving the CSV files for about a week.
So we started to search for this data pipeline, and look at it's execution logs to search for problems.

However, we just did not found the data pipeline. Neither did we finded the Python notebook that represented the core of the pipeline.
Without this notebook, is the same as not having any pipeline at all. They both had simply disapeared from our repository.
But the client did received some files a few weeks ago, so,
we were positive that this pipeline did existed at some point in the past. But where did it go? Why it disappeared?

The data pipeline was basically a JSON file that described the steps (or tasks) that should be performed, and, which specific time of the day these tasks
should be performed, what were the dependencies, etc. The Python notebook was one of the tasks described inside this data pipeline. So the data pipeline
referenced the notebook directly as one of it's main tasks.


# Investigating the commmits

We use Git to store and track any changes in all of our data pipelines. As you well know, a file
do not simply disappear from a Git repository. When a file is removed from a Git repository, 
is because someone intentionally deleted the file and committed the change to the repository.

Since we knew that this data pipeline existed at some point in the time, I started to investigate,
and follow the history of commits. Took around 30 minutes to find the exact commit that deleted the
data pipeline, and, oops! The commit was created by me! I deleted the data pipeline from our
repository. Wait! What? ... Why? Why did I deleted this data pipeline?

At this point, the commit already answered
two very important questions which were: 1. Who deleted the pipeline? 2. When it was deleted?
Because every commit you create in Git have a timestamp associated with it, and the name of the author of
that commit. We knew at that point that it was me that deleted the pipeline, a few weeks ago.



# Why did I made this decision?

But that alone does not answers another part of the problem. We still need to know why did I made that decision.
Why did I intentionally deleted this pipeline? This is the point where PRs are essential.


<!--
In essence, a Pull Request (or PR) is a **proposal** to perform a `git merge` operation. 
In other words, you create a PR when you want to merge the changes you made in a branch into another branch
(most of the times the main branch). The "proposal" aspect of a PR means that it needs be approved to be effectively performed.

A PR is not a feature from
Git. It is actually a standard feature from most Git service providers. So you create a PR inside a Git services platform such as GitHub,
GitLab and Azure DevOps, and not inside Git itself.
If you are not familiar with PRs, the [GitHub documentation has an excellent article about it](<https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests>).


This means that in a PR, other people analyse your changes, they analyse your decisions. Having this feedback (or this approval)
from another coworker is always important to develop better decision making. But also, PRs are very important source of
documentation.

Since you need approval from another person, you usually document inside the PR what changes did you made, and, why you
made some decisions along the way. This way, the approver of the PR can quickly understand these changes and the decisions involved.
-->



# Another part of the problem


# What mistakes were made?




# How Git helped us to solve the issue


So we needed to find who deleted the data pipeline, why this person made this decision, and when the deletion
was made. Thanks to the our Git history of commits, we just follow the trails of commits and we found the exact
commit that deleted the pipeline, and understand how our previous actions triggered the current problem.


Me and my team perform many decisions all the time that affect the maintained pipelines.
As a consequence, when you make so many decisions and changes to the codebase like this, is really hard to remember what decision you made, when and
why you made it, etc. That is why Git help us so much, because it tracks all of these changes for us.



Because of Git, we manage to track down and understand how and why did this data pipeline disappeared, and
we were able to locate the data pipeline again, and restore it to it's previous state,
and re-send the files.

Not only did we fixed the issue, but also, by understanding what happened, and what decisions were made
that led to the dissapeareance of the data pipeline, we could identify the flaws in our decision making process.
And by identifying these issues, we can now address them, so we do not make these mistakes again.

Over the next sections, I explain what happened, what mistakes were made, and how we could have avoided this problem.

