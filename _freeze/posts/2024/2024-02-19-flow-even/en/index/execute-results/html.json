{
  "hash": "8802b0ef69185bf1471465f551a376bd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Producing evenly-spaced and non-overlapping curves with Jobard-Lefer Algorithm in C\ndescription: \"In this article, I want to implement the Jobard-Lefer Algorithm in C. With this algorithm, we can produce evenly-spaced and non-overlapping curves in a flow field (i.e. a vector field).\"\ndate: \"2024-02-19\"\ncategories: [\"Flow Fields\", \"C\", \"Algorithm\", \"Computer Graphcis\"]\nbibliography: \"./../reference.bib\"\nimage: \"./../flow_field.png\"\nnumber-sections: true\n---\n\n\n\n\n# Introduction\n\nI'm currently writing a book about R and Graphics (stay tuned for more news about this book soon ðŸ˜‰).\nDuring my research for this book, I had to study a relatively famous and established algorithm, called as the Jobard-Lefer algorithm.\nIt is an algorithm for producing evenly spaced curves in a flow field (or a vector field).\nThis algorithm is thoroughly described in a scientific paper [@jobard97].\n\nIn this article, I want to describe how you can implement this algorithm in C.\nThese are the topics we are going to discuss:\n\n- What are flow fields (or vector fields)?\n- How to draw curves in a flow field?\n- What the algorithm does?\n- How does it work?\n- How to implement it in C?\n\n# What are flow fields (or vector fields)?\n\nA flow field (which is also called a vector field in some ocasions) is essentially a field (or a two-dimensional grid) of angles.\n@fig-flow-field1 shows an example of a flow field:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![An example of flow field](index_files/figure-html/fig-flow-field1-1.png){#fig-flow-field1 width=1400}\n:::\n:::\n\n\nIn more details, a flow field is usually represented as a 2D (two-dimensional) grid, or a 2D matrix of angle values.\nSo each element in this matrix is a real number, and this real number is interpretd as an angle value (in the radians scale).\nThis 2D matrix of angle values is usually produced by a Perlin Noise algorithm [@perlin], or a similar algorithm, like\nthe Simplex Noise algorithm [@simplex].\n\nIn other words, the numbers in the 2D matrix are normally random numbers. But you cannot use any\nrandom number generator to produce them. You must use a 2D (or two-dimensional) noise algorithm\nto produce these random numbers.\n\nJust to give you a very brief example, you can\nbuild a flow field in C, by using the [`FastNoiseLite` library](https://github.com/Auburn/FastNoiseLite).\nIn this library, you have multiple algorithms you can use for producing two-dimensional noise.\n\nDespite the many options, I will use as an example in this article, the classic Perlin Noise algorithm for producing the flow field.\nYou can see in the snippet below that I am building a flow field with 120 of width and height. In other words, we have\na 120x120 grid of angle values.\n\n```c\n#include <math.h>\n#include <stdlib.h>\n\n#define FNL_IMPL\n#include \"FastNoiseLite.h\"\n\n#define FLOW_FIELD_WIDTH 120\n#define FLOW_FIELD_HEIGHT 120\n\nint main() {\n  double flow_field[FLOW_FIELD_WIDTH][FLOW_FIELD_HEIGHT];\n\t// Create and configure noise state\n\tfnl_state noise = fnlCreateState();\n\tnoise.seed = 50;\n\tnoise.noise_type = FNL_NOISE_PERLIN;\n\tint index = 0;\n\tfor (int y = 0; y < FLOW_FIELD_HEIGHT; y++) {\n\t    for (int x = 0; x < FLOW_FIELD_WIDTH; x++) {\n\t\t    // Scale each value to the radians scale by\n            // multiplying each value by 2PI.\n\t\t    flow_field[x][y] = fnlGetNoise2D(&noise, x, y) * 2 * M_PI;\n\t    }\n\t}\n}\n```\n\n\n# How to draw curves in a flow field? {#sec-draw-curve}\n\nFlow fields have multiple applications in computer graphics. For example, you can use\nthem to draw interesting (or \"very pleasing looking\") curves.\n\nThe basic idea is to draw a curve by walking across the flow field. First, we choose a point in the flow field as our starting point,\nand then, we start to walking by following the direction of the angles we encounter in the flow field.\nAs we walk trough the flow field, we record the x and y coordinates of our positions.\nWhen we finish walking, we can draw a curve by \"connecting the dots\", i.e. connecting the points (x and y coordinates) that we passed through.\n\nSo, in essence, the steps for drawing a curve in a flow field are:\n\n1. Choose a starting point in the grid.\n1. Look at the angle that is stored in the position of the grid that you are currently in.\n1. Take a step in the direction of that angle.\n1. Recalculate your current position in the grid, and record/store this position for later use.\n1. Comeback to step 2.\n\nYou can see in the bullet points above that, we begin a loop at step 5. We are repeatedly taking a step in the direction of an angle, recalculating our current position in the flow field, and taking another step in the direction of another angle. As long as we stay inside the boundaries of the flow field, we can repeat this pattern as much as we want to.\n\nThe @fig-flow-field2 below shows the end result of this process. In this example, we begin in coordinate $(5, 10)$,\ni.e. $x = 5$ and $y = 10$, in the field, and take 45 sequential steps in the field by following the direction of the angles\nwe encounter in the way. The curve painted in red shows the end result of this \"walking process\".\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Drawing a curve in the flow field](index_files/figure-html/fig-flow-field2-1.png){#fig-flow-field2 width=1400}\n:::\n:::\n\n\nAs you walk trough the flow field, the angle that you currently using might lead you to a position that is off the boundaries of the flow field. In that case, you should stop walking, before you go off the flow field. Because if you pass the boundaries of the flow field, then, the lookup process we perform to take an angle in the flow field, will fail.\n\nTwo important variables need to be defined to draw your curve:\n\n- The number of steps you want to take.\n- The distance of each step (or \"step length\").\n\nFirst is the number of steps you want to take\nin your walk. You can definetly set this to infinity, so you walk indefinitely until you hit one of\nthe boundaries of the flow field. But you normally do not want to walk indefinitely. Because\nthis usually produces a very long curve that goes across the entire flow field.\n\nYes! You might want to draw a very long curve. As you probably notice, this is very subjective to each person and their objective.\nBut for the most part, you usually do not have to set this number of steps too much high.\nAround 30-40 steps is a good range for those who doesn't know what they want.\n\nTherefore, the number of steps directly affects the length of the curve that you are drawing. If you take a high number for steps\n, the curve will be longer. In contrast, if you take just few steps, your\ncurve will be shorter.\n\nSecond is the distance you will take in each step (let's call it as the \"step length\").\nThe step length affects how \"sharp\" the curve looks. If you set the step length\ncorrectly, the curve will look nice, very \"curvy\". In other words, the curve will look like an actual curve.\nBut if you set the step length too high, then, the \"connect the dots\" effects will be much more appearant.\nIn other words, your curve will not look like a curve, and more like an attempt to draw a polygon with very sharp\nedges.\n\nBut be careful to also not set the step length too low. If you set it very very low, then, you will end up affecting the length\nof the curve as well. Because the step length is soo low, that even if you set the number of steps very high, you still\nget a very short curve as a result. This is bad because you will be tempted to raise the number of steps even higher,\nand by setting the number of steps too high, you end up increasing the overhead and computing time of the algorithm.\n\nI mean, increasing the number of steps from 10 to 1000 for drawing a single curve into the field is fine.\nBut when you raise the number of steps to 1000 when you are drawing like 10000 curves into field, then you will\nnotice the overhead very quickly. So, if you want your algorithm to perform well, and still get nice\nand visually attractive curves in the output, you usually want to set the step length to a number that is in\nthe range from 0.1% to 1% of the flow field width.\n\nThe C code snippet below translates the steps I described at @sec-draw-curve to draw a curve into\nthe field. You can see in this code that our current position in the Cartesian plane\nis mapped to a specific position in the flow field, or, in other words, to a position in the 2D matrix of angles,\nby transforming our current x and y positions into integers.\n\nSo for example, if our current position in the Cartesian plane is $x = 45.289$ and $y = 21.556$,\nthen, our current position in the flow field is $x = 45$ and $y = 21$. So, the current angle that\nwe need to retrieve and use from the flow field, is the angle that is stored in the\nelement `angles[45][21]` of the matrix.\n\n```c\n#define N_STEPS 30\n#define STEP_LENGTH 0.01 * FLOW_FIELD_WIDTH\n\nint off_boundaries (double x, double y, int limit) {\n\treturn (\n\tx <= 0 ||\n\t    y <= 0 ||\n\t    x >= limit ||\n\t    y >= limit\n\t);\n}\n\ndouble x_coords[N_STEPS];\ndouble y_coords[N_STEPS];\n\nfor (int i = 0; i < N_STEPS; i++) {\n  int ff_column_index = (int) floor(x);\n  int ff_row_index = (int) floor(y);\n\n  if (off_boundaries(ff_column_index, ff_row_index, FLOW_FIELD_WIDTH)) {\n    break;\n  }\n\n  double angle = flow_field[ff_row_index][ff_column_index];\n  double x_step = STEP_LENGTH * cos(angle);\n  double y_step = STEP_LENGTH * sin(angle);\n  x = x + x_step;\n  y = y + y_step;\n\n  x_coords[i] = x;\n  y_coords[i] = y;\n}\n```\n\nFurthermore, this C code uses a pair of equations from geometry (@eq-rotation1 and @eq-rotation2) to calculate\nthe new x and y coordinates after I take the step by following the direction of the current angle.\nThese equations are normally used to calculate the coordinates\nin the circumference of a circle centered at the origin point of the Cartesian plane,\nand they are exposed below.\n\nGiven that a circle that is centered at the origin point of the Cartesian plane, and \nthat $r$ is the radius of the circle, and that $A$ is the angle, in radians,\nthat identifies the position in the circumference that you are trying to calculate it's coordinates,\nyou can calculate the x ($x'$) and y ($y'$) coordinates of the corresponding position\nin the circumference by using the following pair of equations:\n\n$$\nx'=r\\times \\cos(A)\n$${#eq-rotation1}\n\n$$\ny'=r\\times \\sin(A)\n$${#eq-rotation2}\n\n\n\n# The Jobard-Lefer algorithm\n\nWhen you start to draw multiple curves in the flow field, without caring where these curves are placed\nand where they go, eventually, you will end up with a very dense\nimage, with many curves overlapping each other. Some people are intentionally\ntrying to produce such dense images, because they want the interesting depth effect that these\nimages normally have around the curves.\n\nBut sometimes, you are really trying to avoid that. Sometimes, you want to meet all of these criterias below at the same time:\n\n- draw a high number of curves (i.e. a number that is high enough to \"fill\" the image) in the field.\n- draw only non-overlapping curves.\n- draw curves that are \"evenly-spaced\" between each other.\n\n@jobard97 proposes an algorithm that produces non-overlapping and\nevenly-spaced curves around a flow field. If you read the paper carefully,\nyou might notice that you can divide the algorithm into two separate parts.\nAnd splitting this algorithm like this, into two separate parts, will be very\nuseful here in this article for explaining how each piece of the algorithm works.\n\nThese parts are:\n\n- An algorithm to draw non-overlapping curves.\n- An algorithm to select new start points for new curves.\n\n[^parts]: There are other parts to the entire algorithm proposed by @jobard97. But these other parts are not worth explaining in this article. Read the original scientific paper for full details about the algorithm.\n\nSince each part have it's own quirks, I begin by focusing on the first part of the algorithm. After explaining\nhow this first part works, it will be a little easier for you to understand how the\nsecond part works.\n\n## Drawing non-overlapping curves\n\nThis first part of the algorithm is the part that makes sure that only non-overlapping\ncurves are drawn to the field. The idea behind it, is that we are constantly checking the distances\nbetween our next position and the other curves around us. We want to always make sure\nthat the current curve is far enough from the other curves, and, if not, stop drawing this curve.\n\nThis specific part of the algorithm works around a constant value, that represents the minimum\ndistance allowed between two curves. @jobard97 call this value as $d_{sep}$,\nor, as the \"separating distance\". The end result of the algorithm is that any point\nin any curve in the field is, at least, at a distance of\n$d_{sep}$ units from any other point from another curve in the field.\n\nIf you use this part of the algorithm, you normally produce some very nice and \"pleasing to the eyes\" type of\nimages. At @fig-diff-algorithm, I am showing the difference that this part of the algorithm makes\nto the image. In both subfigures, we used the same colors for each curve, the same\nstarting points for each curve, the same step length, the same number of steps,\nsame flow field, etc. Anymway, all the configs used in both images are literally the same. The only\ndifference between these two images, is the use (or not) of this\n\"non-overlaping\" curve algorithm.\n\nIn the first image (without the Jobard-Lefer algorithm)\nI simply drawn the curves using the steps I described at @sec-draw-curve, without caring if the\ncurves were overlapping (or, if they were too close to) each other.\nIn contrast, in the second image, I used the first part of the Jobard-Lefer algorithm to draw the curves\nwhile checking if they were overlapping (or, if they were too close to) each other.\n\n::: {#fig-diff-algorithm layout-nrow=2}\n\n![Without Jobard-Lefer algorithm](./../overlap.png){#fig-diff-overlap}\n\n![With Jobard-Lefer algorithm](./../non_overlap.png){#fig-diff-non-overlap}\n\nDemonstrating the effect of the Jobard-Lefer algorithm on curves drawn in the field\n:::\n\n### How this part of the algorithm works?\n\nIn essence, at each step we take drawing our curve in the flow field, we look at the curves that are around us,\nand we compare the distance between our current position and all of these neighboring curves.\nIf this distance between the next step we take and any of the neighboring curves, is lower or\nequal to a specific value ()\n\n\n, then, we do not take this next step, and we stop drawing the current curve. At this point, if we have\na next curve to draw, then, we start to this next curve in the field, and restart this process\nof checking if the distance of this next step we take and the neighboring curves will\nbe less or equal to the \"separating distance\".",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}