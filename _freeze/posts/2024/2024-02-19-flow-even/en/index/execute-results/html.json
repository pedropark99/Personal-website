{
  "hash": "5972ad8e7d571e3401048329ed64c2ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Producing evenly-spaced and non-overlapping curves with Jobard-Lefer Algorithm in C\ndescription: \"In this article, I want to implement the Jobard-Lefer Algorithm in C. With this algorithm, we can produce evenly-spaced and non-overlapping curves in a flow field (i.e. a vector field).\"\ndate: \"2024-02-19\"\ncategories: [\"Flow Fields\", \"C\", \"Algorithm\", \"Computer Graphcis\"]\nbibliography: \"./../reference.bib\"\nimage: \"./../flow_field.png\"\nnumber-sections: true\n---\n\n\n\n\n# Introduction\n\nI'm currently writing a book about R and Graphics (stay tuned for more news about this book soon ðŸ˜‰).\nDuring my research for this book, I had to study a relatively famous and established algorithm, called as the Jobard-Lefer algorithm.\nIt is an algorithm for producing evenly spaced curves in a flow field (or a vector field).\nThis algorithm is thoroughly described in a scientific paper [@jobard97].\n\nIn this article, I want to describe how you can implement this algorithm in C.\nThese are the topics we are going to discuss:\n\n- What are flow fields (or vector fields)?\n- How to draw curves in a flow field?\n- What the algorithm does?\n- How does it work?\n- How to implement it in C?\n\n# What are flow fields (or vector fields)?\n\nA flow field (which is also called a vector field in some ocasions) is essentially a field (or a two-dimensional grid) of angles.\n@fig-flow-field1 shows an example of a flow field:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![An example of flow field](index_files/figure-html/fig-flow-field1-1.png){#fig-flow-field1 width=1400}\n:::\n:::\n\n\nIn more details, a flow field is usually represented as a 2D (two-dimensional) grid, or a 2D matrix of angle values.\nSo each element in this matrix is a real number, and this real number is interpretd as an angle value (in the radians scale).\nThis 2D matrix of angle values is usually produced by a Perlin Noise algorithm [@perlin], or a similar algorithm, like\nthe Simplex Noise algorithm [@simplex].\n\nIn other words, the numbers in the 2D matrix are normally random numbers. But you cannot use any\nrandom number generator to produce them. You must use a 2D (or two-dimensional) noise algorithm\nto produce these random numbers.\n\nJust to give you a very brief example, you can\nbuild a flow field in C, by using the [`FastNoiseLite` library](https://github.com/Auburn/FastNoiseLite).\nIn this library, you have multiple algorithms you can use for producing two-dimensional noise.\n\nDespite the many options, I will use as an example in this article, the classic Perlin Noise algorithm for producing the flow field.\nYou can see in the snippet below that I am building a flow field with 120 of width and height. In other words, we have\na 120x120 grid of angle values.\n\n```c\n#include <math.h>\n#include <stdlib.h>\n\n#define FNL_IMPL\n#include \"FastNoiseLite.h\"\n\n#define FLOW_FIELD_WIDTH 120\n#define FLOW_FIELD_HEIGHT 120\n\nint main() {\n  double flow_field[FLOW_FIELD_WIDTH][FLOW_FIELD_HEIGHT];\n\t// Create and configure noise state\n\tfnl_state noise = fnlCreateState();\n\tnoise.seed = 50;\n\tnoise.noise_type = FNL_NOISE_PERLIN;\n\tint index = 0;\n\tfor (int y = 0; y < FLOW_FIELD_HEIGHT; y++) {\n\t    for (int x = 0; x < FLOW_FIELD_WIDTH; x++) {\n\t\t    // Scale each value to the radians scale by\n            // multiplying each value by 2PI.\n\t\t    flow_field[x][y] = fnlGetNoise2D(&noise, x, y) * 2 * M_PI;\n\t    }\n\t}\n}\n```\n\n\n# How to draw curves in a flow field? {#sec-draw-curve}\n\nFlow fields have multiple applications in computer graphics. For example, you can use\nthem to draw interesting (or \"very pleasing looking\") curves.\n\nThe basic idea is to draw a curve by walking across the flow field. First, we choose a point in the flow field as our starting point,\nand then, we start to walking by following the direction of the angles we encounter in the flow field.\nAs we walk trough the flow field, we record the x and y coordinates of our positions.\nWhen we finish walking, we can draw a curve by \"connecting the dots\", i.e. connecting the points (x and y coordinates) that we passed through.\n\nSo, in essence, the steps for drawing a curve in a flow field are:\n\n1. Choose a starting point in the grid.\n1. Look at the angle that is stored in the position of the grid that you are currently in.\n1. Take a step in the direction of that angle.\n1. Recalculate your current position in the grid, and record/store this position for later use.\n1. Comeback to step 2.\n\nYou can see in the bullet points above that, we begin a loop at step 5. We are repeatedly taking a step in the direction of an angle, recalculating our current position in the flow field, and taking another step in the direction of another angle. As long as we stay inside the boundaries of the flow field, we can repeat this pattern as much as we want to.\n\nThe @fig-flow-field2 below shows the end result of this process. In this example, we begin in coordinate $(5, 10)$,\ni.e. $x = 5$ and $y = 10$, in the field, and take 45 sequential steps in the field by following the direction of the angles\nwe encounter in the way. The curve painted in red shows the end result of this \"walking process\".\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Drawing a curve in the flow field](index_files/figure-html/fig-flow-field2-1.png){#fig-flow-field2 width=1400}\n:::\n:::\n\n\nAs you walk trough the flow field, the angle that you currently using might lead you to a position that is off the boundaries of the flow field. In that case, you should stop walking, before you go off the flow field. Because if you pass the boundaries of the flow field, then, the lookup process we perform to take an angle in the flow field, will fail.\n\nTwo important variables need to be defined to draw your curve:\n\n- The number of steps you want to take.\n- The distance of each step (or \"step length\").\n\nFirst is the number of steps you want to take\nin your walk. You can definetly set this to infinity, so you walk indefinitely until you hit one of\nthe boundaries of the flow field. But you normally do not want to walk indefinitely. Because\nthis usually produces a very long curve that goes across the entire flow field.\n\nYes! You might want to draw a very long curve. As you probably notice, this is very subjective to each person and their objective.\nBut for the most part, you usually do not have to set this number of steps too much high.\nAround 30-40 steps is a good range for those who doesn't know what they want.\n\nTherefore, the number of steps directly affects the length of the curve that you are drawing. If you take a high number for steps\n, the curve will be longer. In contrast, if you take just few steps, your\ncurve will be shorter.\n\nSecond is the distance you will take in each step (let's call it as the \"step length\").\nThe step length affects how \"sharp\" the curve looks. If you set the step length\ncorrectly, the curve will look nice, very \"curvy\". In other words, the curve will look like an actual curve.\nBut if you set the step length too high, then, the \"connect the dots\" effects will be much more appearant.\nIn other words, your curve will not look like a curve, and more like an attempt to draw a polygon with very sharp\nedges.\n\nBut be careful to also not set the step length too low. If you set it very very low, then, you will end up affecting the length\nof the curve as well. Because the step length is soo low, that even if you set the number of steps very high, you still\nget a very short curve as a result. This is bad because you will be tempted to raise the number of steps even higher,\nand by setting the number of steps too high, you end up increasing the overhead and computing time of the algorithm.\n\nI mean, increasing the number of steps from 10 to 1000 for drawing a single curve into the field is fine.\nBut when you raise the number of steps to 1000 when you are drawing like 10000 curves into field, then you will\nnotice the overhead very quickly. So, if you want your algorithm to perform well, and still get nice\nand visually attractive curves in the output, you usually want to set the step length to a number that is in\nthe range from 0.1% to 1% of the flow field width.\n\nIn C, you can represent a curve with the struct `Curve` below. You can\nsee below that I am dynamically allocating space to store the x and\ny coordinates that compose this curve.\n\n```c\n#define N_STEPS 30\n\nstruct Curve {\n\tint id;\n\tdouble* x;\n\tdouble* y;\n} typedef Curve;\n\nCurve curve;\ncurve.id = 0;\ncurve.x = malloc(N_STEPS * sizeof(double));\ncurve.y = malloc(N_STEPS * sizeof(double));\n```\n\nAlso, the C snippet below translates the steps I described above to draw a curve into\nthe field. You can see in this code that our current position in the Cartesian plane\nis mapped to a specific position in the flow field, or, in other words, to a position in the 2D matrix of angles,\nby transforming our current x and y positions into integers.\n\nSo for example, if our current position in the Cartesian plane is $x = 45.289$ and $y = 21.556$,\nthen, our current position in the flow field is $x = 45$ and $y = 21$. So, the current angle that\nwe need to retrieve and use from the flow field, is the angle that is stored in the\nelement `angles[45][21]` of the matrix.\n\n```c\n#define STEP_LENGTH 0.01 * FLOW_FIELD_WIDTH\n\nint off_boundaries (double x, double y, int limit) {\n\treturn (\n\tx <= 0 ||\n\t    y <= 0 ||\n\t    x >= limit ||\n\t    y >= limit\n\t);\n}\n\nfor (int i = 0; i < N_STEPS; i++) {\n  int ff_column_index = (int) floor(x);\n  int ff_row_index = (int) floor(y);\n\n  if (off_boundaries(ff_column_index, ff_row_index, FLOW_FIELD_WIDTH)) {\n    break;\n  }\n\n  double angle = flow_field[ff_row_index][ff_column_index];\n  double x_step = STEP_LENGTH * cos(angle);\n  double y_step = STEP_LENGTH * sin(angle);\n  x = x + x_step;\n  y = y + y_step;\n\n  curve.x[i] = x;\n  curve.y[i] = y;\n}\n```\n\nFurthermore, this C code uses a pair of equations from geometry (@eq-rotation1 and @eq-rotation2) to calculate\nthe new x and y coordinates after I take the step by following the direction of the current angle.\nThese equations are normally used to calculate the coordinates\nin the circumference of a circle centered at the origin point of the Cartesian plane,\nand they are exposed below.\n\nGiven that a circle that is centered at the origin point of the Cartesian plane, and \nthat $r$ is the radius of the circle, and that $A$ is the angle, in radians,\nthat identifies the position in the circumference that you are trying to calculate it's coordinates,\nyou can calculate the x ($x'$) and y ($y'$) coordinates of the corresponding position\nin the circumference by using the following pair of equations:\n\n$$\nx'=r\\times \\cos(A)\n$${#eq-rotation1}\n\n$$\ny'=r\\times \\sin(A)\n$${#eq-rotation2}\n\n\n\n# The Jobard-Lefer algorithm\n\nWhen you start to draw multiple curves in the flow field, without caring where these curves are placed\nand where they go, eventually, you will end up with a very dense\nimage, with many curves overlapping each other. Some people are intentionally\ntrying to produce such dense images, because they want the interesting depth effect that these\nimages normally have around the curves.\n\nBut sometimes, you are really trying to avoid that. Sometimes, you want to meet all of these criterias below at the same time:\n\n- draw a high number of curves (i.e. a number that is high enough to \"fill\" the image) in the field.\n- draw only non-overlapping curves.\n- draw curves that are \"evenly-spaced\" between each other.\n\n@jobard97 proposes an algorithm that produces non-overlapping and\nevenly-spaced curves around a flow field. If you read the paper carefully,\nyou might notice that you can divide this algorithm into two separate parts.\nSplitting this algorithm into two separate is very useful for the objective of this article.\nBecause is easier to explain how each part works separately, than to trying to explain\nthe entire algorithm at once.\n\nThese two parts are:\n\n- An algorithm to draw non-overlapping curves.\n- An algorithm to select new start points for new curves.\n\nFirst, I will focus on the first part of the algorithm, and, after explaining\nhow this first part works, it will be a little easier for you to understand how the\nsecond part works.\n\n# Drawing non-overlapping curves\n\nThis first part of the algorithm is the part that makes sure that only non-overlapping\ncurves are drawn to the field. The idea behind it, is that we are constantly checking the distances\nbetween our next position and the other curves around us. We want to always make sure\nthat the current curve is far enough from the other curves, and, if not, stop drawing this curve.\n\nThis specific part of the algorithm works around a constant value, that represents the minimum\ndistance allowed between two curves. @jobard97 call this value as $d_{sep}$,\nor, as the \"separating distance\". The end result of the algorithm is that any point\nin any curve in the field is, at least, at a distance of\n$d_{sep}$ units from any other point from another curve in the field.\n\nIf you use this part of the algorithm, you normally produce some very nice and \"pleasing to the eyes\" type of\nimages. At @fig-diff-algorithm, I am showing the difference that this part of the algorithm makes\nto the image. In both subfigures, we used the same colors for each curve, the same\nstarting points for each curve, the same step length, the same number of steps,\nsame flow field, etc. Anymway, all the configs used in both images are literally the same. The only\ndifference between these two images, is the use (or not) of this\n\"non-overlaping\" curve algorithm.\n\nIn the first image (without the Jobard-Lefer algorithm)\nI simply drawn the curves using the steps I described at @sec-draw-curve, without caring if the\ncurves were overlapping (or, if they were too close to) each other.\nIn contrast, in the second image, I used the first part of the Jobard-Lefer algorithm to draw the curves\nwhile checking if they were overlapping (or, if they were too close to) each other.\n\n::: {#fig-diff-algorithm layout-nrow=2}\n\n![Without Jobard-Lefer algorithm](./../overlap.png){#fig-diff-overlap}\n\n![With Jobard-Lefer algorithm](./../non_overlap.png){#fig-diff-non-overlap}\n\nDemonstrating the effect of the Jobard-Lefer algorithm on curves drawn in the field\n:::\n\n## How this part of the algorithm works?\n\nIn essence, at each step we take while drawing our curve, we look at the curves that are around us,\nand we compare the distance between our next step and all of these neighboring curves.\nIf this distance between is lower or equal to the separating value ($d_{sep}$), then,\nwe do not take the next step, and we stop drawing the current line.\n\nNotice that we are still using the exact same steps I described at @sec-draw-curve to draw the curves\ninto the field. We are still start with a starting point, then, we start to take sequential steps\nby following the direction of the angles we encounter through the field.\n\nHowever, the key difference here, is that we added a new step, or new check\nto these previous steps. Now, while we are walking through the field, we are constantly calculating distances,\nand checking these distances to make sure that we are not too close to a neighbour curve.\n\n@fig-even-algo demonstrates this process visually. And I know what you are thinking! \"These curves\nin @fig-even-algo doesn't look like curves!\". Just remember the steps I described at @sec-draw-curve.\nWe are essentially drawing curves by connecting the positions where we walked through.\nIs like I applied a very big zoom over the image\nwhile the algorithm is actively drawing the curves.\n\nSo, at a very low scale, the curves we are drawing are not really curves at all. But at a normal scale, when we zoom\nout of the image, and look to the image with our own human eyes, the steps are so small,\nso small, that we cannot perceive the connected dots. The curve effectivelly\nlooks very much like a nice and fluid curve.\n\nIn the example of @fig-even-algo, we have one already existing curve (in blue), and we are currently\ndrawing a second curve into the field. At each step, we calculate the coordinates of\nthe next step we need to make, them, we compare the distance between the position of this next step,\nand the points from other curves that are close by. If this distance between this next\nstep and any point from the surrounding curves is lower or equal than $d_{sep}$, we \"cancel\"\nthe next step, and we stop drawing the current curve.\n\n![The steps to check if the current curve is too close to a neighbour](./../distance.svg){#fig-even-algo}\n\nTo calculate the distance between two points in the Cartesian plane, we use\nanother equation from geometry, which is commonly know as the \"distance formula\":\n\n$$\nd = \\sqrt{[(x_2 - x_1)^2 + (y_2 - y_1)^2]}\n$${#eq-distance}\n\nThe function `distance()` below translates this @eq-distance into a C function.\n\n```c\ndouble distance (double x1, double y1, double x2, double y2) {\n\tdouble s1 = pow(x2 - x1, 2.0);\n\tdouble s2 = pow(y2 - y1, 2.0);\n\treturn sqrt(s1 + s2);\n}\n```\n\n\n## The density grid\n\nI think this specific section of the paper is a little confusing. But if I did understand\nthe authors correctly, then, at each step we take in the field, the Jobard-Lefer algorithm\ntakes the coordinate of out next step, and calculates the distance between this point and\n**all of the points that are near by and that belongs to others (already existing) curves**.\n\nTo find the points that are near by, the algorithm uses a second Cartesian grid that is superposed\nover the Cartesian plane that our flow field lives. In other words, it uses a second Cartesian plane\nthat uses a different scale, accordingly to the \"separating distance\" ($d_{sep}$).\n@jobard97 call this second Cartesian grid as the \"density grid\".\n\nSo every coordinate in the Cartesian plane can be mapped to a specific position in the density grid.\nYou do that by scaling the x and y coordinates in the Cartesian to fit the scale used in the density grid.\nAs an example, let's consider a Cartesian plane that is 100x100.\n\nFor example, if you have an x and y coordinates in the flow field, and you want\nto calculate the corresponding position in the density grid for this specific\ncoordinate, you can use the functions `get_density_col()` and `get_density_row()`\nexposed below:\n\n\n```c\nint get_density_col (double x, double d_sep) {\n\tdouble c = (x / d_sep) + 1;\n\treturn (int) c;\n}\n\nint get_density_row (double y, double d_sep) {\n\tdouble r = (y / d_sep) + 1;\n\treturn (int) r;\n}\n```\n\nAt @fig-cartesian-grid, we are using as an example, a Cartesian plane with dimensions 100x100.\nWith $d_{sep} = 2$, the corresponding density grid becomes a Cartesian grid with dimensions 50x50.\nYou can see at @fig-density1 that, the density grid is a grid of $50 \\times 50 = 2500$ cells.\nEach cell have width and height equal to $d_{sep}$. In @jobard97 paper, these cells are called\n\"density cells\".\n\nThe functions `get_density_col()` and `get_density_row()` always return an integer value\nas output. Because they calculate the coordinates of the density cell in which the original coordinate in\nthe Cartesian plane is mapped to.\n\nSo a single cell in the density grid can contain\nmultiple points from the Cartesian plane where the flow field lives. Or, on the other side,\nyou can say that multiple points in the Cartesian plane can be mapped to the same cell in\nthe density grid.\n\nIn the example of @fig-cartesian-grid, the coordinate $x = 42.312$ and $y = 72.112$\nis mapped to the cell at position $x = 22$ and $y = 37$ in the density grid.\n\n::: {#fig-cartesian-grid layout-ncol=2}\n\n![100x100 Cartesian plane](./../cartesian_plane.png){#fig-cartesian1}\n\n![The equivalent density grid with dsep = 2](./../density_grid.png){#fig-density1}\n\nThe relationship between the Cartesian plane and the density grid.\n:::\n\nEach cell in the density grid should store a collection of pointers. Each pointer\npoints to a specific point in the flow field that belongs to a curve drawn in the field,\nand that is mapped to that specific cell.\n\n\nAs an example, let's suppose we are using a 100x100 flow field, and that\nwe already drawn two curves in the field,\ncurve A and curve B. Because we configured the number of steps to 30,\neach curve have approximatelly 30 different points.\n\nBut let's focus our example on 4 specific points.\nOne specific point (of these 4) belongs\nto curve B. While the remaining 3 points (of the 4)\nbelongs to curve A. Let's suppose these points are the following\nx and y coordinates:\n\n- $x = 21.2, y = 55.5$ (Curve A);\n- $x = 20.2, y = 54.5$ (Curve A);\n- $x = 19.8, y = 53.1$ (Curve A);\n- $x = 21.9, y = 52.9$ (Curve B);\n\nIf we set $d_{sep}$ to 15, then, all of these 4 points will be mapped into\nthe same density cell at position $x = 2$ and $y = 4$ of the density\ngrid. @fig-density-cell presents this idea visually.\n\n![An example of density cell](./../density_cell.svg){#fig-density-cell}\n\nAs a consequence, the density cell at position $x = 2$ and $y = 4$ of the density\ngrid, should store 4 pointers. Each pointer will point to one\nof these 4 coordinates that we described above. Because each of these\ncoordinates in the flow field were mapped to this particular\ndensity cell.\n\n\n\nA density grid can be represented in C as a two dimensional array,\nwhere each element of this array is a density cell object. The\nstruct `DensityCell` below represents a density cell.\n\nNotice that, I am dynamically allocating memory on the heap, with `malloc()`, for reserving space\nto store the values for each (x and y) coordinates that will be mapped to\nthis density cell. Since this is a dynamically allocated memory, we need to\nremember to free this memory later, when we are done with it.\n\nTo start, I am allocation space for 14000 x and y coordinates in each\ndensity cell with `malloc()`. This value might be too high, or might be too low.\nIs hard to predict the number of coordinates that will be stored\ninside this density cell.\n\nBecause of that, it might be a good idea to transform\nthese x and y arrays inside the density cell into growable arrays, instead of using fixed sized arrays. But\nfor now, I don't care about that, I don't need this work now, I just\nwant to write a version of the algorithm that works.\n\n```c\n#define D_SEP 0.8\n#define DENSITY_GRID_WIDTH ((int) (FLOW_FIELD_WIDTH / D_SEP))\n\nstruct DensityCell {\n\tdouble* x;\n\tdouble* y;\n\tint space_used;\n\tint capacity;\n} typedef DensityCell;\n\nDensityCell density_grid[DENSITY_GRID_WIDTH][DENSITY_GRID_WIDTH];\nint density_capacity = 14000;\nfor (int y = 0; y < DENSITY_GRID_WIDTH; y++) {\n\tfor (int x = 0; x < DENSITY_GRID_WIDTH; x++) {\n\t\tdensity_grid[x][y].space_used = 0;\n\t\tdensity_grid[x][y].capacity = density_capacity;\n\t\tdensity_grid[x][y].x = malloc(density_capacity * sizeof(double));\n\t\tdensity_grid[x][y].y = malloc(density_capacity * sizeof(double));\n\t}\n}\n```\n\nNow, given that you have a coordinate in the flow field,\nhow to do you store this coordinate inside the density grid?\nThe function `insert_coord_in_density_grid()` below summarises this process.\n\nFirst, we calculate the coordinate of the density cell that is mapped\nto this particular coordinate. We check if we are inside the boundaries\nof the density grid. Then, we look at the density cell found, and\ncheck if we have enough space to add this one coordinate to the\ndensity cell. If we do have space, then, we simply add this coordinate\nto the x and y arrays that are inside this `DensityCell` object.\n\n```c\nvoid insert_coord_in_density_grid (double x,\n\t\t\t\t   double y,\n\t\t\t\t   double d_sep,\n\t\t\t\t   DensityCell density_grid[DENSITY_GRID_WIDTH][DENSITY_GRID_WIDTH]) {\n\tint density_col = get_density_col(x, d_sep);\n\tint density_row = get_density_row(y, d_sep);\n\tif (off_boundaries(density_col, density_row, DENSITY_GRID_WIDTH)) {\n\t\treturn;\n\t}\n\n\tint space_used = density_grid[density_col][density_row].space_used;\n\tint capacity = density_grid[density_col][density_row].capacity;\n\t\n\tif ((space_used + 1) < capacity) {\n\t\tdensity_grid[density_col][density_row].x[space_used] = x;\n\t\tdensity_grid[density_col][density_row].y[space_used] = y;\n\t\tdensity_grid[density_col][density_row].space_used = space_used + 1;\n\t} else {\n\t\tprintf(\"[ERROR]: Attempt to add coordinate in density cell that is out of capacity!\\n\");\n\t}\n}\n\n```\n\n\n## Searching for points near by\n\nWe use the density grid to find all points from another curves that are near by our next\nmove in the flow field. That is essentially the main purpose\nof the density grid. To help us finding which points are near by our next move\nin the flow field.\n\nIn essence, at each step we take in the flow field, we need to calculate\nthe position of the density cell that is mapped to our\nnext move. By identifying which cell in\nthe density grid we are mapped to, we can look at the pointers\nthat are already stored inside this specific density cell\nto find which points are near by.\n\nActually, the algortihm from @jobard97 looks not only\nat the specific cell that is mapped to our next move,\nbut it also looks at the 8 density cells that are surrounding\nthis current cell.\n\nYou can see at @fig-distance3 a representation of this\nprocess.\n\n![Calculating the distance between our current position and the near by points from neighbouring curves](./../distance-surroundings.svg){#fig-distance3}\n\n\n## Checking if our next step is valid\n\nSo, in summary, we need to check if our next step, is a valid step, before we\ntake it. If the step is not valid, we should \"cancel\" the next step, and stop\ndrawing the current curve.\n\n\nBut how to check if this next step is valid. The function `is_valid_step()`\nbelow summarises this process. This function returns a boolean\nvalue, 1 for true and 0 for false.\n\nFirst, we find which density cell\nis mapped to the coordinates of this next step. Then, we need to calculate\nthe coordinates of the surrounding density cells, as I showed\nat @fig-distance3.\n\nHaving the coordinates of density cells we need to pass through,\nwe use then, calculate the distance between our next step and\neach point stored in each density cell, and check if any\nof these distances are less or equal than $d_{sep}$.\n\n```c\nint is_valid_step (double x, double y,\n\t\t     double d_sep,\n\t\t     int density_grid_width,\n\t\t     DensityCell density_grid[DENSITY_GRID_WIDTH][DENSITY_GRID_WIDTH]) {\n\n\tint density_col = get_density_col(x, d_sep);\n\tint density_row = get_density_row(y, d_sep);\n\tif (off_boundaries(density_col, density_row, DENSITY_GRID_WIDTH)) {\n\t\treturn 0;\n\t}\n   \n\tint start_row = (density_row - 1) > 0 ? density_row - 1 : 0;\n\tint end_row = (density_row + 1) < density_grid_width ? density_row + 1 : density_row; \n\tint start_col = (density_col - 1) > 0 ? density_col - 1 : 0;\n\tint end_col = (density_col + 1) < density_grid_width ? density_col + 1 : density_col;\n \n \t// Subtracting a very small amount from D_SEP, just to account for the lost of float precision\n\t// that happens during the calculations below, specially in the distance calc\n\td_sep = fabs(d_sep - (0.01 * D_SEP));\n\tfor (int c = start_col; c <= end_col; c++) {\n\t\tfor (int r = start_row; r <= end_row; r++) {\n\t\t\tint n_elements = density_grid[c][r].space_used;\n\t\t\tif (n_elements == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < n_elements; i++) {\n\t\t\t\tdouble x2 = density_grid[c][r].x[i];\n\t\t\t\tdouble y2 = density_grid[c][r].y[i];\n\t\t\t\tdouble dist = distance(x, y, x2, y2);\n\t\t\t\tif (dist <= d_sep) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\treturn 1;\n}\n```\n\n## Drawing the curves\n\nNow, the final piece of the alorithm. How can you draw non-overlaping curves?\nActually, all we need to do, is to add two more steps to the same\nsteps we described at @sec-draw-curve.\n\nIf you look at the C code below, you can see that we now have\na main for loop, that draws a single curve per iteration.\nNow, the first inner loop is the exact same for\nloop we presented at @sec-draw-curve, with essentially\nthe same steps, with only one difference.\n\nWe now have a if statement to check the result of\n`is_valid_next_step()`. If the function returns\ntrue, then, the next step we are trying to take is valid,\nso we go on with our lives, and we go to the next\niteration.\n\nHowever, if the function returns false (0), then, it means that the next step is\nnot valid (i.e. it is too close to a neighboring curve), and because of\nthat, we run a `break` statement to drawing the current curve. Then,\nwe comeback to the main and outer loop, and we start to draw the next curve in the field. \n\nYou can also see that, after this first inner loop, it means that you finished drawing\nthe current curve. Because of that, we now need, to register/insert all\npoints of this curve into the density grid. So that the next curves that are\ndrawn into the field, take the points from this current curve into account.\nThat is what the second inner loop does. It walks trough the points of\nthe curve, and register these points into the density grid.\n\n```c\nCurve* curves = malloc(N_CURVES * sizeof(Curve));\nfor (int i = 0; i < N_CURVES; i++) {\n\tcurves[i].x = malloc(N_STEPS * sizeof(double));\n\tcurves[i].y = malloc(N_STEPS * sizeof(double));\n}\n\nfor (int curve_id = 0; curve_id < N_CURVES; curve_id++) {\n\tdouble x = start_points[curve_id].x;\n\tdouble y = start_points[curve_id].y;\n\tcurves[curve_id].id = curve_id;\n\n\tfor (int i = 0; i < N_STEPS; i++) {\n\t\tint ff_column_index = (int) floor(x);\n\t\tint ff_row_index = (int) floor(y);\n\n\t\tif (off_boundaries(ff_column_index, ff_row_index, FLOW_FIELD_WIDTH)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdouble angle = flow_field[ff_row_index][ff_column_index];\n\t\tdouble x_step = STEP_LENGTH * cos(angle);\n\t\tdouble y_step = STEP_LENGTH * sin(angle);\n\t\tx = x + x_step;\n\t\ty = y + y_step;\n\n\t\tint valid = is_valid_next_step(\n\t\t\tx, y,\n\t\t\tD_SEP,\n\t\t\tDENSITY_GRID_WIDTH,\n\t\t\tdensity_grid\n\t\t);\n\n\t\tif (!valid) {\n\t\t\t// This next step is not valid, stop drawing current curve\n\t\t\t// and jump to start drawing next curve.\n\t\t\tbreak;\n\t\t}\n\n\t\tcurves[curve_id].x[i] = x;\n\t\tcurves[curve_id].y[i] = y;\n\t}\n\n\t// After we finish calculating the coordinates of a curve,\n\t// we add the coordinates of this curve to the density grid.\n\tfor (int i = 0; i < N_STEPS; i++) {\n\t\tdouble x = curves[curve_id].x[i];\n\t\tdouble y = curves[curve_id].y[i];\n\t\tinsert_coord_in_density_grid(x, y, D_SEP, density_grid);\n\t}\n}\n```\n\n\n## The full source code\n\nAfter I explained each individual aspect about this first part of the algorithm, is finally time to see the entire piece.\nBut, just for brevity reasons, and to save space in this article, I will not show\nthe entire source code here. Instead, I will give you a link to GitHub, where\nyou can read the source code peacefully.\n\nLink to the entire algorithm: <https://github.com/pedropark99/Personal-website/blob/main/posts/2024/2024-02-19-flow-even/src/non_overlap_curves.c>\n\n\n# Drawing evenly-spaced curves\n\nNow, the other part of the algorithm introduces some new concepts,\nand strategies. According to @jobard97, in order to obtain a\ngood visual appearance of the flow field, an accurante\nseed point selection method needs to be performed.\n\nThis sentence introduces a new term that we haven't spoked about\nyet. A seed point is the term chosen by @jobard97 to designate a starting point of a curve, is the point\nfrom where the curves starts to grow.\n\nWhat @jobard97 is really trying to say, is that, if you\nreally want to draw curves that are evenly spaced between each other, then,\nyou need choose wisely the points from where your curves starts.\n\n## Drawing a curve in two directions\n\nBefore we talk about how to select proper seed points for your curves, I want\nto talk about how can you draw a curve in two directions. Because @jobard97\nalgorithm actually draws a curve in both directions (from right to left and left to right).\n\nIn other words, for the @jobard97 algorithm to work effectively, we need to draw every\nsingle curve in both directions. @fig-curve-both-directions shows what \"drawing\na curve in both directions\" actually means.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Drawing a curve in both directions](index_files/figure-html/fig-curve-both-directions-1.png){#fig-curve-both-directions width=1400}\n:::\n:::\n\n\n\nSo, to do that, we need to adjust our current script. First, let's change\nthe `Curve` struct to include some more information that will\nhelp us tracking the coordinates that are being calculated.\nThese extra informations, will help us to sort these coordinates,\nor, to track the order of each step taken.\n\nYou can see below that, three more variables were added to the\nstruct: `step_id` is essentially the number of the step that\ncreated the corresponding x and y coordinates; `steps_taken`\nis the total number of steps taken to draw this curve;\n`direction`, an integer indicating if the corresponding\nx and y coordinates were calculated when the algorithm was\ndrawing the curve in the direction right to left (zero),\nor, if was drawing the curve from left to right (one).\n\n```c\nstruct Curve {\n\tint curve_id;\n\tdouble x[N_STEPS];\n\tdouble y[N_STEPS];\n\t// If x and y coordinates are from a step that was taken from left to right (1)\n\t// or a step from right to left (0).\n\tint direction[N_STEPS];\n\t// The id of the step\n\tint step_id[N_STEPS];\n\tint steps_taken;\n} typedef Curve;\n```\n\nNow, our algorithm currently draws only curves from left to right. But\nwe want to draw curves in both directions. For that, is good to include\nthe logic for drawing curves into a nice function. That is why, I \ncreated the `draw_curve()` function below:\n\nYou can see in the function that, the logic of the function is essentially\nthe same as before. But now, we have two main loops, represented as\n`while` loops. But the only thing that changes between one loop\nand another, is the \"translation\" operation that we apply\nafter we calculated the step.\n\nOn the first `while` loop, we **add** the steps to the current x and y coordinates.\nBut on the second `while` loop, we **subtract** these steps instead from\nthe current x and y coordinates. That makes the walking process go backwards.\nIn other words, that draws the curve in the inverse direction.\n\nDespite this diference, we are essentially doing the exact same computations we did\nbefore. We are still validating at each iteration it the next step we\ncalculated is a valid one, using the `is_valid_next_step()`\nfunction.\n\n```c\n\nCurve draw_curve(double x_start,\n\t\t\t\t double y_start,\n\t\t\t\t int curve_id,\n\t\t\t\t double flow_field[FLOW_FIELD_WIDTH][FLOW_FIELD_HEIGHT],\n\t\t\t\t DensityCell density_grid[DENSITY_GRID_WIDTH][DENSITY_GRID_WIDTH]) {\n\n\tCurve curve;\n\tcurve.curve_id = curve_id;\n\tcurve.steps_taken = 0;\n\tfor (int i = 0; i < N_STEPS; i++) {\n\t\tcurve.x[i] = 0;\n\t\tcurve.y[i] = 0;\n\t\tcurve.direction[i] = 0;\n\t\tcurve.step_id[i] = 0;\n\t}\n\n\tdouble x = x_start;\n\tdouble y = y_start;\n\tint direction = 0;\n\tcurve.x[0] = x_start;\n\tcurve.y[0] = y_start;\n\tint step_id = 1;\n\tint i = 1;\n\t// Draw curve from right to left\n\twhile (i < (N_STEPS / 2)) {\n\t\tint ff_column_index = (int) floor(x);\n\t\tint ff_row_index = (int) floor(y);\n\n\t\tif (off_boundaries(ff_column_index, ff_row_index, FLOW_FIELD_WIDTH)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdouble angle = flow_field[ff_row_index][ff_column_index];\n\t\tdouble x_step = STEP_LENGTH * cos(angle);\n\t\tdouble y_step = STEP_LENGTH * sin(angle);\n\t\tx = x - x_step;\n\t\ty = y - y_step;\n\n\t\tint valid = is_valid_next_step(\n\t\t\tx, y,\n\t\t\tD_SEP,\n\t\t\tD_TEST,\n\t\t\tDENSITY_GRID_WIDTH,\n\t\t\tdensity_grid\n\t\t);\n\n\t\tif (!valid) break;\n\n\t\tcurve.x[i] = x;\n\t\tcurve.y[i] = y;\n\t\tcurve.step_id[i] = step_id;\n\t\tstep_id++;\n\t\tcurve.steps_taken++;\n\t\ti++;\n\t}\n\n\n\tx = x_start;\n\ty = y_start;\n\t// Draw curve from left to right\n\twhile (i < N_STEPS) {\n\t\tint ff_column_index = (int) floor(x);\n\t\tint ff_row_index = (int) floor(y);\n\n\t\tif (off_boundaries(ff_column_index, ff_row_index, FLOW_FIELD_WIDTH)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdouble angle = flow_field[ff_row_index][ff_column_index];\n\t\tdouble x_step = STEP_LENGTH * cos(angle);\n\t\tdouble y_step = STEP_LENGTH * sin(angle);\n\t\tx = x + x_step;\n\t\ty = y + y_step;\n\n\t\tint valid = is_valid_next_step(\n\t\t\tx, y,\n\t\t\tD_SEP,\n\t\t\tD_TEST,\n\t\t\tDENSITY_GRID_WIDTH,\n\t\t\tdensity_grid\n\t\t);\n\n\t\tif (!valid) break;\n\n\t\tcurve.x[i] = x;\n\t\tcurve.y[i] = y;\n\t\tcurve.direction[i] = 1;\n\t\tcurve.step_id[i] = step_id;\n\t\tstep_id++;\n\t\tcurve.steps_taken++;\n\t\ti++;\n\t}\n\n\treturn curve;\n}\n```\n\n\n## The logic behind the core algorithm\n\nThe main idea behind the core algorithm, is to select the next seed points\nfrom the current curve. In other words, instead of selecting all\nstarting points for all the curves we want to draw, before we even\ntouch the flow field and starting to draw any curve, in this\nalgorithm, we now want to select new starting points from the curve\nwe are currently drawing.\n\nThe main logic of the algorithm is:\n\n1. First, we draw a curve;\n1. Then, we go trough each point of this curve, and collects all possible seed points that are in a distance of $d_{sep}$ from each point of the curve. That becomes like a queue of elegible seed points to be processed.\n1. We then go through that queue of elegible seed points, and we check if each seed point is valid (i.e. if is not too close to a neighbouring curve).\n1. If the current seedpoint is not valid, we jump to the next seed point in the queue, and we check it is valid.\n1. If the current seedpoint is valid, then, we draw a curve from this seed point, and we add this new curve to the queue of curves to be evaluated.\n1. After we finished going through all of the elegible seed points we collected from the current curve, we jump to the next curve in the queue, and repeat this process from step 2, until we have no more curves to be evaluated.\n\n\nYou can see in the above steps that there are two types of \"queues\" involved in this process. First, we have a queue\nof starting points (or seed points). We need to check if each starting point in this queue is valid.\nSecond, we also have a queue of curves to be evaluated. The idea is to collect all elegible starting points\nwe can find from each curve registered in this queue.\n\nThe function `collect_seedpoints()` below is responsible for collecting all elegible seed points\nfrom a single curve. The collected seedpoints are stored inside a `SeedPointsQueue` object,\nthat represents a queue of seed points to be evaluated.\n\n```c\nstruct Point {\n\tdouble x;\n\tdouble y;\n} typedef Point;\n\nstruct SeedPointsQueue {\n\tPoint* points;\n\tint space_used;\n\tint capacity;\n} typedef SeedPointsQueue;\n\nSeedPointsQueue collect_seedpoints (Curve curve) {\n\tint steps_taken = curve.steps_taken;\n\tSeedPointsQueue queue;\n\tqueue.space_used = 0;\n\tif (steps_taken == 0) {\n\t\tqueue.capacity = 0;\n\t\treturn queue;\n\t}\n\n\tqueue.points = malloc(steps_taken * 2 * sizeof(Point));\n\tqueue.capacity = steps_taken * 2;\n\tint candidate_point_index = 0;\n\tfor (int i = 0; i < steps_taken - 1; i++) {\n\t\tdouble x = curve.x[i];\n\t\tdouble y = curve.y[i];\n\t\t\t\n\t\tint ff_column_index = (int) floor(x);\n\t\tint ff_row_index = (int) floor(y);\n\t\tdouble angle = atan2(curve.y[i + 1] - y, curve.x[i + 1] - x);\n\n\t\tdouble angle_left = angle + (M_PI / 2);\n\t\tdouble angle_right = angle - (M_PI / 2);\n\n\t\tPoint left_point = {\n\t\t\tx + (D_SEP * cos(angle_left)),\n\t\t\ty + (D_SEP * sin(angle_left))\n\t\t};\n\t\tPoint right_point = {\n\t\t\tx + (D_SEP * cos(angle_right)),\n\t\t\ty + (D_SEP * sin(angle_right))\n\t\t};\n\n\t\tqueue.points[candidate_point_index] = left_point;\n\t\tcandidate_point_index++;\n\t\tqueue.space_used++;\n\t\tqueue.points[candidate_point_index] = right_point;\n\t\tcandidate_point_index++;\n\t\tqueue.space_used++;\n\t}\n\n\treturn queue;\n}\n```\n\n\nWith this function, we can now build the complete logic of the algorithm.\nIn the previous sections, we drawn all curves inside a for loop. But\nthis time, we first, draw manually a single curve in to the field,\nfrom whatever starting point we want to (in the example below, I choose to start from the coordinate $x = 45$ and $y = 24$). And then, all of the\nother curves are derived from this first curve that we drawn.\n\n```c\n#define MIN_STEPS_ALLOWED 2\n\nCurve curves[N_CURVES];\ndouble x = 45.0;\ndouble y = 24.0;\nint curve_array_index = 0;\nint curve_id = 0;\ncurves[curve_array_index] = draw_curve(x, y, curve_id, flow_field, density_grid);\nint steps_taken = curves[curve_array_index].steps_taken;\nfor (int i = 0; i < steps_taken + 1; i++) {\n\tdouble x = curves[curve_array_index].x[i];\n\tdouble y = curves[curve_array_index].y[i];\n\tinsert_coord_in_density_grid(x, y, D_SEP, density_grid);\n}\ncurve_array_index++;\n\n\nwhile (curve_id < N_CURVES && curve_array_index < N_CURVES) {\n\tSeedPointsQueue queue;\n\tqueue = collect_seedpoints(curves[curve_id]);\n\tfor (int point_index = 0; point_index < queue.space_used; point_index++) {\n\t\tPoint p = queue.points[point_index];\n\t\t// check if it is valid given the current state\n\t\tint valid = is_valid_next_step(\n\t\t\tp.x, p.y,\n\t\t\tD_SEP,\n\t\t\tDENSITY_GRID_WIDTH,\n\t\t\tdensity_grid\n\t\t);\n\n\t\tif (valid) {\n\t\t\t// if it is, draw the curve from it\n\t\t\tCurve curve = draw_curve(\n\t\t\t\tp.x, p.y,\n\t\t\t\tcurve_array_index,\n\t\t\t\tflow_field,\n\t\t\t\tdensity_grid\n\t\t\t);\n\t\t\tif (curve.steps_taken < MIN_STEPS_ALLOWED) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurves[curve_array_index] = curve;\n\t\t\t// insert this new curve into the density grid\n\t\t\tint steps_taken = curves[curve_array_index].steps_taken;\n\t\t\tfor (int i = 0; i < steps_taken + 1; i++) {\n\t\t\t\tdouble x = curves[curve_array_index].x[i];\n\t\t\t\tdouble y = curves[curve_array_index].y[i];\n\t\t\t\tinsert_coord_in_density_grid(x, y, D_SEP, density_grid);\n\t\t\t}\n\t\t\tcurve_array_index++;\n\t\t}\n\t}\n\n\tcurve_id++;\n}\n```\n\n## The end result of the algorithm\n\nNow that the algorithm is complete, we can now see the end results it produces.\n@fig-even-curves1 shows an example. We essentially took the exact same flow field\nof @fig-diff-algorithm. We just changed the value for $d_{sep}$ slightly.\n\n![A result of the evenly-spaced curves algorithm. Configs: flow_field_width=120; dsep=1; n_curves=1500; n_steps=30; step_length=0.01*flow_field_width; min_steps_allowed=2](./../even_curves1.png){#fig-even-curves1}\n\nNow, that is a variable that is useful for you to control when you producing such\nimages, which is the `MIN_STEPS_ALLOWED` variable. This variable controls\nwhich curves are considered and included in the end result, and which are not,\nbased on the number of steps taken in that particular curve.\n\nYou see at @fig-even-curves1 that it has a lot of very short curves in some particular\nareas of the flow field. In other words, depending on the flow field you are using,\nand all of the global configs (i.e. value of $d_{sep}$, the number of steps, the step length, the number of curves, etc.),\nsome particular areas of the flow field will tend to concentrate some very short curves.\n\nAlso, the order in which you draw each valid seed point you find can also influence this specific aspect of the image.\nFor example, if you draw the valid seed points in sequential order, as they come to you, them, you get a result.\nBut if you draw these valid seed points in a random order, you might end up getting a slightly different result.\n\nThis is not something that will happen always, in 100% cases. But it normally does happen\nwith this particular algorithm. But this is something that you can easily improve (or fix)\nby changing the value of `MIN_STEPS_ALLOWED`.\n\nIn most cases, this variable is configured to 2. But If you raise this number, just a bit, you usually\nend up getting much better results. At @fig-even-curves2 we have the result, when `MIN_STEPS_ALLOWED`\nis configured to 5.\n\n![A result of the evenly-spaced curves algorithm. Configs: flow_field_width=120; dsep=1; n_curves=1500; n_steps=30; step_length=0.01*flow_field_width; min_steps_allowed=5](./../even_curves2.png){#fig-even-curves2}\n\n\n## The full source code\n\nAgain, for brevity reasons and to save space in this article, I will give you a link to GitHub, where\nyou can read the full source code peacefully.\n\nLink to the entire algorithm: <https://github.com/pedropark99/Personal-website/blob/main/posts/2024/2024-02-19-flow-even/src/even_spaced_curves.c>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}