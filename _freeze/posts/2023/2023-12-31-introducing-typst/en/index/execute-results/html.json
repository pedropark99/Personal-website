{
  "hash": "2a92986359c3fcc23124b9d5d99ae027",
  "result": {
    "markdown": "---\ntitle: My experience with `Typst`, the potential sucessor of `LaTex`\ndate: \"2023-12-31\"\ncategories: [\"Typst\", \"Typesetting system\", \"Documents\"]\ndescription: \"Let me quickly describe my recent experience with Typst, which is a new markup-based typesetting system for composing documents and articles for science, and also, the most promissing sucessor of the famous LaTex typeset system.\"\n\nnumber-sections: true\n---\n\n# Introduction\n\nTypst is a new markup-based typesetting system for the sciences written in Rust. The Typst works similarly to other typesetting systems.\nIn resume, you write a Typst source file which describes the document you want to create, and then, you invoke the Typst compiler\nto build the document you described in the source file.\n\n![Producing documents with Typst](./../typst-process.svg)\n\nTypst is open-source and is freely available at GitHub, just\n[download the release file according to your operational system](https://github.com/typst/typst/releases/)\nand install the tool into your system.\n\n\n# What I like about Typst\n\nLet me describe the features about Typst that I like the most.\n\n## Have good documentation!\n\n[Typst have a very good documentation](https://typst.app/docs/), and this makes all the difference in the world! Because learning\nhow to use the tool becomes so much easier when you have a good support material to rely on.\n\n## Have fast compilation time!\n\nLaTex have a known weakness of being slow to compile the input file and producing the output PDF.\nTypst does not suffer from this problem, because it has a much faster compilation time.\n\nThis is an important advantage of Typst, because it delivers a much faster feedback loop into your workflow.\nIn other words, if you reduce the compilation time, you will spend less time waiting to see if your code works!\nBy spending less time trying to see the output of your work,\nyou can spend more time in what really matters! Like writing more content or refining your work.\n\n\n## Understandable error messages\n\nFor me personally, one of the great weaknesses of LaTex is it's error messages, which are very obscure, and honestly,\nuseless in the majority of cases. And I mean this.\n\nIn contrast, Typst have much more understandable error messages. Messages that are easy to understand, and that\nare easy to relate back to your source code.\n\n## Very good quality output\n\nLaTex is known for producing very-high quality documents, and Typst leaves nothing to be desired in this aspect.\nSpecially because the Typst development team ported some\nof the core algorithms behind LaTex into Typst.\n\nSo Typst also produces very-high quality documents because it learned from the\ngreat powers of LaTex.\n\n## Preview and Incremental compilation\n\nTypst have a preview mode which is very good and powerful. When you use the preview mode, Typst create a new window\nthat shows the preview of the output document of your source code, and any changes that you make to your\nsource code are instantly reflected (pratically in real time) into the previewed document.\n\nThis preview in real time of the output document is very good when you are trying to refine the aesthetics of your\ndocument, but you are not very sure yet on how to do it properly, and you want to test different options.\nReflecting your changes into the output document in the preview window is only possible because of the incremental compilation engine\nthat the Typst compiler have.\n\n## Show rules are awesome!\n\nShow rules with the `#show` directive are an amazing way of customizing specific elements of\nyour document. But the true power of `#show` directives is that you can write more clear and organized code with them.\n\nWhen you want some parts of your document to have, for example, font Inconsolata with size 14pt,\nand other parts of the same document to have completely different settings, like font Times New Roman size 12pt,\nand coloured red, you usually end up redefining these settings over and over again.\n\nYou might for example set a \"default setting\" to be applied over the entire document. Then, you overrule this default setting\nby setting specific settings every time that a specific element appears across the document.\nSo you end up with a lot of duplicated code, that redefines the same settings over and over again,\nacross the entire source file.\n\nShow rules with the `#show` directive eliminates this necessitty by allowing you to specify a set of settings to be applied\nto every element of type `x` that appears in your document. As an example, if I want to use font Inconsolata size 14pt in\nany raw code that is exposed inside my document, I can set a show rule to be applied over any element of type `raw`, like this:\n\n```typst\n#show raw: code => {\n   set text(font: \"Inconsolata\", size : 14pt)\n   code\n}\n\n\nTesting if this `raw code element` uses the show rule.\n```\n\nThe code above outputs this:\n\n\n```{css}\n.typst-example1 {\n  font-family: \"Times New Roman\", Times, serif;\n}\n```\n\n```{=html}\n<div class=\"typst-example1\">Testing if this raw code element uses the show rule.</div>\n```\n\n\n# What I dislike about Typst\n\nAlthough my experience with Typst was mainly very positive, I disliked some aspects about it.\n\n## \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}