{
  "hash": "40d3edcc002bb55fdeda9f17149e6767",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Recipient table and source table\"\nsubtitle: \"A second view on *outer joins*\"\ndescription: \"A different (maybe crazy) view on how to teach/explain *Outer joins* to students\"\n\ncategories: [\"JOINs\", \"Teaching\"]\ndate: 2021-01-02\nimage: \"./../featured.png\"\nprojects: [\"R_curso\"]\n\naliases: \n    - \"./../../../2021-01-02-tabela-destinataria-fonte/en/\"\n---\n\n::: {.cell}\n<style type=\"text/css\">\n.hljs{\n  font-family: 'Inconsolata', monospace;\n  font-size: 17px;\n}\n\n.hljs.shell{\n  font-size: 18px;\n}\n\n.hljs-comment{\n  font-style: normal;\n  color: #222222;\n}\n</style>\n:::\n\n\n\n \n\n# Introduction\n\n \n\n*Outer joins* are a simple topic of understanding for most students. However, this article proposes a second approach on the subject. This approach was built during a recent reformulation of the chapter \"Introdu√ß√£o a base de dados relacionais\", from the book [Introdu√ß√£o √† Linguagem R: seus fundamentos e sua pr√°tica](https://pedro-faria.netlify.app/pt/publication/book/introducao_linguagem_r/). The point of view presented here seeks to be strict, and uses this rigidity as a mechanism that facilitates the student`s memorization of the behaviors in each type of *outer join*.\n\n \n\n# Joins have direction\n\n \n\nA *join* operation is nothing more than a union between two tables. But, instead of an union of two tables, we have another option for interpreting the result of this operation. So that to produce a table that represents the union between two tables, we could simply extract all the columns from one of the tables, and insert them into the other table.\n\n \n\nFor example, suppose you have a table `A`, which contains two columns, called `x` and `y`; and a table `B`, which in turn holds 4 different columns, named `x`, `z`, `r`, and `t`. Note that one of the columns in table `B` corresponds to the same column `x` that we found in table `A`.\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n\nA <- tibble(\n  x = 1:5,\n  y = round(rnorm(5, 2, 1), 2)\n)\n\nB <- tibble(\n  x = 1:5,\n  z = letters[1:5],\n  r = c(3.5, 2.1, 1, 5.6, 7.2),\n  t = \"tzu\"\n)\n```\n:::\n\n\n \n\n \n\nIf you want to join tables `A` and `B`, you basically want to create a new table, which contains all five columns of these two tables (`x`, `y`, `z`, `r` and `t`). Therefore, we could imagine a *join* process, as if we were extracting all the columns from table `B`, and inserting all of these columns in table `A`. Hence, we have the table below as a result:\n\n \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(A, B, by = \"x\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 5\n      x     y z         r t    \n  <int> <dbl> <chr> <dbl> <chr>\n1     1  1.11 a       3.5 tzu  \n2     2  3.3  b       2.1 tzu  \n3     3  3.53 c       1   tzu  \n4     4  0.4  d       5.6 tzu  \n5     5  1.78 e       7.2 tzu  \n```\n\n\n:::\n:::\n\n\n \n\n \n\nWith this, we are creating the idea that **a *join* always has a direction**. In other words, we first extract the columns from table `B`, and then we add those columns to table `A`. Note that we are always starting from table `B` towards table `A`.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./../direcao.png){width=2200}\n:::\n:::\n\n\n \n\n# Recipient table and source table\n\n \n\nFrom this perspective, we can interpret that, in a *join*, we are bringing all the columns of a secondary table into our main table (or our table of interest). We have the option to call these tables :**source table** (secondary table) and **recipient table** (main table). With this, a *join* always starts at **source table** and go towards the **recipient table**.\n\n \n\nThis perspective makes sense with the practice of *joins*. Because in any analysis, we commonly work with a \"main\" table, or a table that contains the key data we're analyzing. And when we use some *join*, we're usually bringing columns from other tables into this \"main\" table (or \"recipient\" table, according to that perspective). So keep in mind that a *join* always part from the **source table** toward the **recipient table**.\n\n \n\n \n\n \n\n# Types of *outer join*\n\n \n\nA natural *join* (*inner join*) usually generates a loss of observations from both tables involved in the process. In contrast, a *join* of type *outer* (that is, an *outer join*), seeks to delimit which of the two tables will be preserved in the result. That is, an *outer join* seeks to keep in the *join* result, the rows of at least one of the tables involved.\n\n \n\nWe have three main types of *outer joins*, which are *left join*, *right join* and *full join*. A *full join* is the simplest to understand, as it seeks to keep all rows of both tables employed. Therefore, even if there is some observation not found in one of the tables, it will be preserved in the final product of the operation.\n\n \n\nHowever, *left join* and *right join* seek to keep rows from only one of the tables used in *join*. At this point, many teachers would say something like: \"if we want to apply a *join* between tables `A` and `B`, a *left join* will keep the rows of table `A`, and a *right join* will keep the rows of table `B`\". Other teachers would still try to say, \"*left join* will keep the table rows on the left, while a *right join* will keep the table rows to the right\". \n\nHowever, some confusion can be easily applied in both alternatives. I mean, a student can easily face the following question: \"ü§î Uhmm... I don't remember very well. Does a *left join* keep the rows in table `A`? Or are the rows in table `B`?\"; or else, \"ü§î Wait! But which of the two tables is on the right side?\"\n\n \n\n# Conclusion\n\n \n\nWith this, according to the perspective adopted in this article, we can understand that a *left join* and a *right join* seek to keep the rows of the **recipient table** and the **source table**, respectively. Thus, when using a *right join* or a *left join*, you should ask yourself the following: \"Do I want to keep the rows in my main table (recipient table)? Or the secondary table (source table), where I am extracting the new columns from?\" So if you want to keep, for example, the rows in your main table (recipient table), which is what occurs most of the time, you now know that you need to use a *left join*.\n\n \n\nIn a visual representation, we can reproduce below the initial image of this article, which marks the lines maintained by each of these two types of *join*.\n\n \n\n::: {.cell}\n::: {.cell-output-display}\n![](./../featured.png){width=2200}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}